From aa481b19debe7db5992088b4f72378e25d9c983c Mon Sep 17 00:00:00 2001
From: "Chenggen.Wang" <wangchenggen@canaan-creative.com>
Date: Mon, 29 Aug 2022 11:44:50 +0800
Subject: [PATCH] dsi: use hs mode sending cmd for JD9365D.

Signed-off-by: Chenggen.Wang <wangchenggen@canaan-creative.com>
---
 .../controler/video/mipi/dsi/cnds_dsi_test.c  | 3940 ++++++------
 board/Canaan/dsi_logo/test/log/vo/vo_app.c    | 5474 ++++++++---------
 2 files changed, 4769 insertions(+), 4645 deletions(-)
 mode change 100755 => 100644 board/Canaan/dsi_logo/bsp/controler/video/mipi/dsi/cnds_dsi_test.c
 mode change 100755 => 100644 board/Canaan/dsi_logo/test/log/vo/vo_app.c

diff --git a/board/Canaan/dsi_logo/bsp/controler/video/mipi/dsi/cnds_dsi_test.c b/board/Canaan/dsi_logo/bsp/controler/video/mipi/dsi/cnds_dsi_test.c
old mode 100755
new mode 100644
index 1cc6d998..b2510e4f
--- a/board/Canaan/dsi_logo/bsp/controler/video/mipi/dsi/cnds_dsi_test.c
+++ b/board/Canaan/dsi_logo/bsp/controler/video/mipi/dsi/cnds_dsi_test.c
@@ -41,790 +41,891 @@
 
 void wait_phy_pll_locked()
 {
-    while (1)
-	 {
-         if ((DsiRegRd(MCTL_MAIN_STS_OFFSET) & 0x01) == 0x01)
-          {     break;}
-	 }
+	while (1)
+	{
+		if ((DsiRegRd(MCTL_MAIN_STS_OFFSET) & 0x01) == 0x01)
+		{     break;}
+	}
 }
 
- void wait_cklane_rdy()
+void wait_cklane_rdy()
 {
-    while (1)
-	 {
-         if ((DsiRegRd(MCTL_MAIN_STS_OFFSET) & 0x02) == 0x02)
-          {     break;}
-    }
- }
+	while (1)
+	{
+		if ((DsiRegRd(MCTL_MAIN_STS_OFFSET) & 0x02) == 0x02)
+		{     break;}
+	}
+}
 
 
 
 
- void wait_dat1_rdy()
- {
-    while (1)
-	 {
-         if ((DsiRegRd(MCTL_MAIN_STS_OFFSET) & 0x04) == 0x04)
-          {     break;}
-    }
-  }
+void wait_dat1_rdy()
+{
+	while (1)
+	{
+		if ((DsiRegRd(MCTL_MAIN_STS_OFFSET) & 0x04) == 0x04)
+		{     break;}
+	}
+}
 
 
 
- void wait_dat2_rdy()
- {
-    while (1)
-	 {
-         if ((DsiRegRd(MCTL_MAIN_STS_OFFSET) & 0x08) == 0x08)
-          {     break;}
-    }
- }
+void wait_dat2_rdy()
+{
+	while (1)
+	{
+		if ((DsiRegRd(MCTL_MAIN_STS_OFFSET) & 0x08) == 0x08)
+		{     break;}
+	}
+}
 
 
 
 
- void wait_dat3_rdy()
- {
-    while (1)
-	 {
-         if ((DsiRegRd(MCTL_MAIN_STS_OFFSET) & 0x10) == 0x10)
-          {     break;}
-    }
- }
+void wait_dat3_rdy()
+{
+	while (1)
+	{
+		if ((DsiRegRd(MCTL_MAIN_STS_OFFSET) & 0x10) == 0x10)
+		{     break;}
+	}
+}
 
 
 
 
- void wait_dat4_rdy()
- {
-     while (1)
-	 {
-         if ((DsiRegRd(MCTL_MAIN_STS_OFFSET) & 0x20) == 0x20)
-          {     break;}
-    }
- }
+void wait_dat4_rdy()
+{
+	while (1)
+	{
+		if ((DsiRegRd(MCTL_MAIN_STS_OFFSET) & 0x20) == 0x20)
+		{     break;}
+	}
+}
 
 
 void  dsc_cmd_send(int par, int data1, int data2)
 {
-        int cmd_sts =0;
-        if(par == 0)
-        {
-//                DsiRegWr(DIRECT_CMD_STS_CTL_OFFSET,0x02) //[1]enable  write_completed_en
-                DsiRegWr(DIRECT_CMD_MAIN_SETTINGS_OFFSET,0x01020500); //[24] cmd_lp_en  =1
-                                                                                //[23:14] cmd_size  =cmd_size. 1 or 2           2
-                                                                                //[13:8] cmd_head  =0x39
-                                                                                //[3 ] cmd_longnotshort  =0x1
-                                                                                //[2:0] cmd_nat : 3'b000:write command
-                                                                                //                3'b001:read command
-                                                                                //                3'b100:TE request
-                                                                                //                3'b101:trigger request
-                                                                                //                3'b110:BTA request
-                DsiRegWr(DIRECT_CMD_WRDAT_OFFSET,data1);// DATA
-                DsiRegWr(DIRECT_CMD_SEND_OFFSET,0x00000); // cmd send
-                while((cmd_sts & 0x02 )!= 0x02)
-                {
-                        cmd_sts = DsiRegRd(DIRECT_CMD_STS_OFFSET);
-                }
-                DsiRegWr(DIRECT_CMD_STS_CLR_OFFSET,0x02); // clear write_completed
-         }
-        else  if(par == 1)
-        {
-                //DsiRegWr(DIRECT_CMD_STS_CTL_OFFSET,0x02) //[1]enable  write_completed_en
-                DsiRegWr(DIRECT_CMD_MAIN_SETTINGS_OFFSET,0x01011500); //[24] cmd_lp_en  =1
-                                                                        //[23:14] cmd_size  =cmd_size. 1 or 2
-                                                                        //[13:8] cmd_head  =0x39
-                                                                        //[3 ] cmd_longnotshort  =0x1
-                                                                        //[2:0] cmd_nat : 3'b000:write command
-                                                                        //                3'b001:read command
-                                                                        //                3'b100:TE request
-                                                                        //                3'b101:trigger request
-                                                                        //                3'b110:BTA request
-                DsiRegWr(DIRECT_CMD_WRDAT_OFFSET,((data2<<8)+data1));// DATA
-                DsiRegWr(DIRECT_CMD_SEND_OFFSET,0x00000); // cmd send
-                while((cmd_sts & 0x02) != 0x02)
-                { 
-                        cmd_sts = DsiRegRd(DIRECT_CMD_STS_OFFSET);
-                }
-                DsiRegWr(DIRECT_CMD_STS_CLR_OFFSET,0x02); // clear write_completed
-        }
-        else if(par == 2)
-        {
-                DsiRegWr(DIRECT_CMD_MAIN_SETTINGS_OFFSET,0x01023908); //[24] cmd_lp_en  =1              0x01023908
-                                                                        //[23:14] cmd_size  =cmd_size. 1 or 2
-                                                                        //[13:8] cmd_head  =0x39
-                                                                        //[3 ] cmd_longnotshort  =0x1
-                                                                        //[2:0] cmd_nat : 3'b000:write command
-                                                                        //                3'b001:read command
-                                                                        //                3'b100:TE request
-                                                                        //                3'b101:trigger request
-                                                                        //                3'b110:BTA request
-                DsiRegWr(DIRECT_CMD_WRDAT_OFFSET,((data2<<8)+data1));// DATA
-                DsiRegWr(DIRECT_CMD_SEND_OFFSET,0x00000); // cmd send
-                while((cmd_sts & 0x02 )!= 0x02)
-                {  
-                        cmd_sts = DsiRegRd(DIRECT_CMD_STS_OFFSET);              
-                }
-                DsiRegWr(DIRECT_CMD_STS_CLR_OFFSET,0x02); // clear write_completed
-
-        }
+	int cmd_sts =0;
+	if(par == 0)
+	{
+		//                DsiRegWr(DIRECT_CMD_STS_CTL_OFFSET,0x02) //[1]enable  write_completed_en
+		DsiRegWr(DIRECT_CMD_MAIN_SETTINGS_OFFSET,0x01020500); //[24] cmd_lp_en  =1
+		//[23:14] cmd_size  =cmd_size. 1 or 2           2
+		//[13:8] cmd_head  =0x39
+		//[3 ] cmd_longnotshort  =0x1
+		//[2:0] cmd_nat : 3'b000:write command
+		//                3'b001:read command
+		//                3'b100:TE request
+		//                3'b101:trigger request
+		//                3'b110:BTA request
+		DsiRegWr(DIRECT_CMD_WRDAT_OFFSET,data1);// DATA
+		DsiRegWr(DIRECT_CMD_SEND_OFFSET,0x00000); // cmd send
+		while((cmd_sts & 0x02 )!= 0x02)
+		{
+			cmd_sts = DsiRegRd(DIRECT_CMD_STS_OFFSET);
+		}
+		DsiRegWr(DIRECT_CMD_STS_CLR_OFFSET,0x02); // clear write_completed
+	}
+	else  if(par == 1)
+	{
+		//DsiRegWr(DIRECT_CMD_STS_CTL_OFFSET,0x02) //[1]enable  write_completed_en
+		DsiRegWr(DIRECT_CMD_MAIN_SETTINGS_OFFSET,0x01011500); //[24] cmd_lp_en  =1
+		//[23:14] cmd_size  =cmd_size. 1 or 2
+		//[13:8] cmd_head  =0x39
+		//[3 ] cmd_longnotshort  =0x1
+		//[2:0] cmd_nat : 3'b000:write command
+		//                3'b001:read command
+		//                3'b100:TE request
+		//                3'b101:trigger request
+		//                3'b110:BTA request
+		DsiRegWr(DIRECT_CMD_WRDAT_OFFSET,((data2<<8)+data1));// DATA
+		DsiRegWr(DIRECT_CMD_SEND_OFFSET,0x00000); // cmd send
+		while((cmd_sts & 0x02) != 0x02)
+		{
+			cmd_sts = DsiRegRd(DIRECT_CMD_STS_OFFSET);
+		}
+		DsiRegWr(DIRECT_CMD_STS_CLR_OFFSET,0x02); // clear write_completed
+	}
+	else if(par == 2)
+	{
+		DsiRegWr(DIRECT_CMD_MAIN_SETTINGS_OFFSET,0x01023908); //[24] cmd_lp_en  =1              0x01023908
+		//[23:14] cmd_size  =cmd_size. 1 or 2
+		//[13:8] cmd_head  =0x39
+		//[3 ] cmd_longnotshort  =0x1
+		//[2:0] cmd_nat : 3'b000:write command
+		//                3'b001:read command
+		//                3'b100:TE request
+		//                3'b101:trigger request
+		//                3'b110:BTA request
+		DsiRegWr(DIRECT_CMD_WRDAT_OFFSET,((data2<<8)+data1));// DATA
+		DsiRegWr(DIRECT_CMD_SEND_OFFSET,0x00000); // cmd send
+		while((cmd_sts & 0x02 )!= 0x02)
+		{
+			cmd_sts = DsiRegRd(DIRECT_CMD_STS_OFFSET);
+		}
+		DsiRegWr(DIRECT_CMD_STS_CLR_OFFSET,0x02); // clear write_completed
 
+	}
 }
 
+void  dsc_cmd_hs_send(int par, int data1, int data2)
+{
+	int cmd_sts =0;
+	if(par == 0)
+	{
+		//                DsiRegWr(DIRECT_CMD_STS_CTL_OFFSET,0x02) //[1]enable  write_completed_en
+		DsiRegWr(DIRECT_CMD_MAIN_SETTINGS_OFFSET,0x00020500); //[24] cmd_lp_en  =1
+		//[23:14] cmd_size  =cmd_size. 1 or 2           2
+		//[13:8] cmd_head  =0x39
+		//[3 ] cmd_longnotshort  =0x1
+		//[2:0] cmd_nat : 3'b000:write command
+		//                3'b001:read command
+		//                3'b100:TE request
+		//                3'b101:trigger request
+		//                3'b110:BTA request
+		DsiRegWr(DIRECT_CMD_WRDAT_OFFSET,data1);// DATA
+		DsiRegWr(DIRECT_CMD_SEND_OFFSET,0x00000); // cmd send
+		while((cmd_sts & 0x02 )!= 0x02)
+		{
+			cmd_sts = DsiRegRd(DIRECT_CMD_STS_OFFSET);
+		}
+		DsiRegWr(DIRECT_CMD_STS_CLR_OFFSET,0x02); // clear write_completed
+	}
+	else  if(par == 1)
+	{
+		//DsiRegWr(DIRECT_CMD_STS_CTL_OFFSET,0x02) //[1]enable  write_completed_en
+		DsiRegWr(DIRECT_CMD_MAIN_SETTINGS_OFFSET,0x00011500); //[24] cmd_lp_en  =1
+		//[23:14] cmd_size  =cmd_size. 1 or 2
+		//[13:8] cmd_head  =0x39
+		//[3 ] cmd_longnotshort  =0x1
+		//[2:0] cmd_nat : 3'b000:write command
+		//                3'b001:read command
+		//                3'b100:TE request
+		//                3'b101:trigger request
+		//                3'b110:BTA request
+		DsiRegWr(DIRECT_CMD_WRDAT_OFFSET,((data2<<8)+data1));// DATA
+		DsiRegWr(DIRECT_CMD_SEND_OFFSET,0x00000); // cmd send
+		while((cmd_sts & 0x02) != 0x02)
+		{
+			cmd_sts = DsiRegRd(DIRECT_CMD_STS_OFFSET);
+		}
+		DsiRegWr(DIRECT_CMD_STS_CLR_OFFSET,0x02); // clear write_completed
+	}
+	else if(par == 2)
+	{
+		DsiRegWr(DIRECT_CMD_MAIN_SETTINGS_OFFSET,0x00023908); //[24] cmd_lp_en  =1              0x01023908
+		//[23:14] cmd_size  =cmd_size. 1 or 2
+		//[13:8] cmd_head  =0x39
+		//[3 ] cmd_longnotshort  =0x1
+		//[2:0] cmd_nat : 3'b000:write command
+		//                3'b001:read command
+		//                3'b100:TE request
+		//                3'b101:trigger request
+		//                3'b110:BTA request
+		DsiRegWr(DIRECT_CMD_WRDAT_OFFSET,((data2<<8)+data1));// DATA
+		DsiRegWr(DIRECT_CMD_SEND_OFFSET,0x00000); // cmd send
+		while((cmd_sts & 0x02 )!= 0x02)
+		{
+			cmd_sts = DsiRegRd(DIRECT_CMD_STS_OFFSET);
+		}
+		DsiRegWr(DIRECT_CMD_STS_CLR_OFFSET,0x02); // clear write_completed
+
+	}
+}
 
 void dsc_cmd_read(int addr)
 {
-        int cmd_sts =0;
-        int data = 0;
-        int size;
-        int err;
-        int reg = 0;
-
-        DsiRegWr(DIRECT_CMD_STS_CLR_OFFSET,0xffffffff);
-        DsiRegWr(DIRECT_CMD_RD_STS_CLR_OFFSET, 0xffffffff);
-
-        DsiRegWr(DIRECT_CMD_MAIN_SETTINGS_OFFSET,0x01010601);           //[24] cmd_lp_en  =1            0x01010601        
-                                                                        //[23:16] cmd_size  =cmd_size. 1 or 2                   
-                                                                        //[14:15] cmd_type  0 write  1 read                     1           
-                                                                        //[13:8] cmd_head  =0x5                                 6            
-                                                                        //[3 ] cmd_longnotshort  =0x1                           1
-                                                                        //[2:0] cmd_nat : 3'b000:write command                  01
-                                                                        //                3'b001:read command
-                                                                        //                3'b100:TE request
-                                                                        //                3'b101:trigger request
-                                                                        //                3'b110:BTA request   
-        
-        DsiRegWr(DIRECT_CMD_WRDAT_OFFSET, addr);
-
-        DsiRegWr(DIRECT_CMD_SEND_OFFSET,0xffffffff); // cmd send   
-
-
-        while((cmd_sts & 0x08 )!= 0x08)                                 //wait read success
-        {  
-                cmd_sts = DsiRegRd(DIRECT_CMD_STS_OFFSET);              
-        }
-
-        err = DsiRegRd(DIRECT_CMD_RD_STS_OFFSET);                   //read err
-        size = DsiRegRd(DIRECT_CMD_RD_PROPERTY_OFFSET);             // read size [16 - 23]   
-        data = DsiRegRd(DIRECT_CMD_RDDAT_OFFSET);                   //read data ;
-
-        k510_logci("err is 0x%8x, size is 0x%8x, data is 0x%8x \n", err, size, data);
+	int cmd_sts =0;
+	int data = 0;
+	int size;
+	int err;
+	int reg = 0;
+
+	DsiRegWr(DIRECT_CMD_STS_CLR_OFFSET,0xffffffff);
+	DsiRegWr(DIRECT_CMD_RD_STS_CLR_OFFSET, 0xffffffff);
+
+	DsiRegWr(DIRECT_CMD_MAIN_SETTINGS_OFFSET,0x01010601);           //[24] cmd_lp_en  =1            0x01010601
+	//[23:16] cmd_size  =cmd_size. 1 or 2
+	//[14:15] cmd_type  0 write  1 read                     1
+	//[13:8] cmd_head  =0x5                                 6
+	//[3 ] cmd_longnotshort  =0x1                           1
+	//[2:0] cmd_nat : 3'b000:write command                  01
+	//                3'b001:read command
+	//                3'b100:TE request
+	//                3'b101:trigger request
+	//                3'b110:BTA request
+
+	DsiRegWr(DIRECT_CMD_WRDAT_OFFSET, addr);
 
+	DsiRegWr(DIRECT_CMD_SEND_OFFSET,0xffffffff); // cmd send
+
+
+	while((cmd_sts & 0x08 )!= 0x08)                                 //wait read success
+	{
+		cmd_sts = DsiRegRd(DIRECT_CMD_STS_OFFSET);
+	}
+
+	err = DsiRegRd(DIRECT_CMD_RD_STS_OFFSET);                   //read err
+	size = DsiRegRd(DIRECT_CMD_RD_PROPERTY_OFFSET);             // read size [16 - 23]
+	data = DsiRegRd(DIRECT_CMD_RDDAT_OFFSET);                   //read data ;
+
+	k510_logci("err is 0x%8x, size is 0x%8x, data is 0x%8x \n", err, size, data);
 }
 
-      void  aml_lcd_init()
-      {
-        DsiRegWr(DIRECT_CMD_STS_CTL_OFFSET,0);//0x02); //[1]enable  write_completed_en
-        k510_logci("lcd init 1\n");
-
-        dsc_cmd_send(2,0xFF,0x01);       
-        
- //       dsc_cmd_read(0x0d);
-
-        k510_logci("lcd init 2\n");
-        
-        dsc_cmd_send(2,0xFB,0x01);
-        
-        k510_logci("lcd init 3\n");
-
-        dsc_cmd_send(2,0xFF,0x02);
-        k510_logci("lcd init 4\n");
-
-        dsc_cmd_send(2,0xFB,0x01);
-        k510_logci("lcd init 5\n");
-
-        
-        dsc_cmd_send(2,0xFF,0x03);
-
-        k510_logci("lcd init 6\n");
-        dsc_cmd_send(2,0xFB,0x01);
-        k510_logci("lcd init 7\n");
-
-        dsc_cmd_send(2,0xFF,0x04);
-        dsc_cmd_send(2,0xFB,0x01);
-        dsc_cmd_send(2,0xFF,0x05);
-        dsc_cmd_send(2,0xFB,0x01);
-        dsc_cmd_send(2,0xD7,0x31);
-        dsc_cmd_send(2,0xD8,0x7E);
-        //Delay(100);
-#ifndef _SIMU        
-        msleep(100);
+void dsc_cmd_hs_read(int addr)
+{
+	int cmd_sts =0;
+	int data = 0;
+	int size;
+	int err;
+	int reg = 0;
+
+	DsiRegWr(DIRECT_CMD_STS_CLR_OFFSET,0xffffffff);
+	DsiRegWr(DIRECT_CMD_RD_STS_CLR_OFFSET, 0xffffffff);
+
+	DsiRegWr(DIRECT_CMD_MAIN_SETTINGS_OFFSET,0x00010601);           //[24] cmd_lp_en  =1            0x01010601
+	//[23:16] cmd_size  =cmd_size. 1 or 2
+	//[14:15] cmd_type  0 write  1 read                     1
+	//[13:8] cmd_head  =0x5                                 6
+	//[3 ] cmd_longnotshort  =0x1                           1
+	//[2:0] cmd_nat : 3'b000:write command                  01
+	//                3'b001:read command
+	//                3'b100:TE request
+	//                3'b101:trigger request
+	//                3'b110:BTA request
+
+	DsiRegWr(DIRECT_CMD_WRDAT_OFFSET, addr);
+
+	DsiRegWr(DIRECT_CMD_SEND_OFFSET,0xffffffff); // cmd send
+
+
+	while((cmd_sts & 0x08 )!= 0x08)                                 //wait read success
+	{
+		cmd_sts = DsiRegRd(DIRECT_CMD_STS_OFFSET);
+	}
+
+	err = DsiRegRd(DIRECT_CMD_RD_STS_OFFSET);                   //read err
+	size = DsiRegRd(DIRECT_CMD_RD_PROPERTY_OFFSET);             // read size [16 - 23]
+	data = DsiRegRd(DIRECT_CMD_RDDAT_OFFSET);                   //read data ;
+
+	k510_logci("err is 0x%8x, size is 0x%8x, data is 0x%8x \n", err, size, data);
+}
+
+void  aml_lcd_init()
+{
+	DsiRegWr(DIRECT_CMD_STS_CTL_OFFSET,0);//0x02); //[1]enable  write_completed_en
+	k510_logci("lcd init 1\n");
+
+	dsc_cmd_send(2,0xFF,0x01);
+
+	//       dsc_cmd_read(0x0d);
+
+	k510_logci("lcd init 2\n");
+
+	dsc_cmd_send(2,0xFB,0x01);
+
+	k510_logci("lcd init 3\n");
+
+	dsc_cmd_send(2,0xFF,0x02);
+	k510_logci("lcd init 4\n");
+
+	dsc_cmd_send(2,0xFB,0x01);
+	k510_logci("lcd init 5\n");
+
+
+	dsc_cmd_send(2,0xFF,0x03);
+
+	k510_logci("lcd init 6\n");
+	dsc_cmd_send(2,0xFB,0x01);
+	k510_logci("lcd init 7\n");
+
+	dsc_cmd_send(2,0xFF,0x04);
+	dsc_cmd_send(2,0xFB,0x01);
+	dsc_cmd_send(2,0xFF,0x05);
+	dsc_cmd_send(2,0xFB,0x01);
+	dsc_cmd_send(2,0xD7,0x31);
+	dsc_cmd_send(2,0xD8,0x7E);
+	//Delay(100);
+#ifndef _SIMU
+	msleep(100);
 #endif
-        dsc_cmd_send(2,0xFF,0x00);
-        dsc_cmd_send(2,0xFB,0x01);
-        dsc_cmd_send(2,0xBA,0x03);
-        dsc_cmd_send(2,0x36,0x00);
-        dsc_cmd_send(2,0xB0,0x00);
-        dsc_cmd_send(2,0xD3,0x08);
-        dsc_cmd_send(2,0xD4,0x0E);
-        dsc_cmd_send(2,0xD5,0x0F);
-        dsc_cmd_send(2,0xD6,0x48);
-        dsc_cmd_send(2,0xD7,0x00);
-        dsc_cmd_send(2,0xD9,0x00);
-        dsc_cmd_send(2,0xFB,0x01);
-        dsc_cmd_send(2,0xFF,0xEE);
-        dsc_cmd_send(2,0x40,0x00);
-        dsc_cmd_send(2,0x41,0x00);
-        dsc_cmd_send(2,0x42,0x00);
-        dsc_cmd_send(2,0xFB,0x01);
-        dsc_cmd_send(2,0xFF,0x01);
-        dsc_cmd_send(2,0xFB,0x01);
-        dsc_cmd_send(2,0x01,0x55);
-        dsc_cmd_send(2,0x04,0x0C);
-        dsc_cmd_send(2,0x05,0x3A);
-        dsc_cmd_send(2,0x06,0x50);
-        dsc_cmd_send(2,0x07,0xD0);
-        dsc_cmd_send(2,0x0A,0x0F);
-        dsc_cmd_send(2,0x0C,0x06);
-        dsc_cmd_send(2,0x0D,0x7F);
-        dsc_cmd_send(2,0x0E,0x7F);
-        dsc_cmd_send(2,0x0F,0x70);
-        dsc_cmd_send(2,0x10,0x63);
-        dsc_cmd_send(2,0x11,0x3C);
-        dsc_cmd_send(2,0x12,0x5C);
-        dsc_cmd_send(2,0x13,0x5A);
-        dsc_cmd_send(2,0x14,0x5A);
-        dsc_cmd_send(2,0x15,0x60);
-        dsc_cmd_send(2,0x16,0x15);
-        dsc_cmd_send(2,0x17,0x15);
-        dsc_cmd_send(2,0x23,0x00);
-        dsc_cmd_send(2,0x24,0x00);
-        dsc_cmd_send(2,0x25,0x00);
-        dsc_cmd_send(2,0x26,0x00);
-        dsc_cmd_send(2,0x27,0x00);
-        dsc_cmd_send(2,0x28,0x00);
-        dsc_cmd_send(2,0x44,0x00);
-        dsc_cmd_send(2,0x45,0x00);
-        dsc_cmd_send(2,0x46,0x00);
-        dsc_cmd_send(2,0x5B,0xCA);
-        dsc_cmd_send(2,0x5C,0x00);
-        dsc_cmd_send(2,0x5D,0x00);
-        dsc_cmd_send(2,0x5E,0x2D);
-        dsc_cmd_send(2,0x5F,0x1B);
-        dsc_cmd_send(2,0x60,0xD5);
-        dsc_cmd_send(2,0x61,0xF7);
-        dsc_cmd_send(2,0x6C,0xAB);
-        dsc_cmd_send(2,0x6D,0x44);
-        //dsc_cmd_send(2,0x6E,0x80);
-        dsc_cmd_send(2,0xFF,0x05);
-        dsc_cmd_send(2,0xFB,0x01);
-        dsc_cmd_send(2,0x00,0x3F);
-        dsc_cmd_send(2,0x01,0x3F);
-        dsc_cmd_send(2,0x02,0x3F);
-        dsc_cmd_send(2,0x03,0x3F);
-        dsc_cmd_send(2,0x04,0x38);
-        dsc_cmd_send(2,0x05,0x3F);
-        dsc_cmd_send(2,0x06,0x3F);
-        dsc_cmd_send(2,0x07,0x19);
-        dsc_cmd_send(2,0x08,0x1D);
-        dsc_cmd_send(2,0x09,0x3F);
-        dsc_cmd_send(2,0x0A,0x3F);
-        dsc_cmd_send(2,0x0B,0x1B);
-        dsc_cmd_send(2,0x0C,0x17);
-        dsc_cmd_send(2,0x0D,0x3F);
-        dsc_cmd_send(2,0x0E,0x3F);
-        dsc_cmd_send(2,0x0F,0x08);
-        dsc_cmd_send(2,0x10,0x3F);
-        dsc_cmd_send(2,0x11,0x10);
-        dsc_cmd_send(2,0x12,0x3F);
-        dsc_cmd_send(2,0x13,0x3F);
-        dsc_cmd_send(2,0x14,0x3F);
-        dsc_cmd_send(2,0x15,0x3F);
-        dsc_cmd_send(2,0x16,0x3F);
-        dsc_cmd_send(2,0x17,0x3F);
-        dsc_cmd_send(2,0x18,0x38);
-        dsc_cmd_send(2,0x19,0x18);
-        dsc_cmd_send(2,0x1A,0x1C);
-        dsc_cmd_send(2,0x1B,0x3F);
-        dsc_cmd_send(2,0x1C,0x3F);
-        dsc_cmd_send(2,0x1D,0x1A);
-        dsc_cmd_send(2,0x1E,0x16);
-        dsc_cmd_send(2,0x1F,0x3F);
-        dsc_cmd_send(2,0x20,0x3F);
-        dsc_cmd_send(2,0x21,0x3F);
-        dsc_cmd_send(2,0x22,0x3F);
-        dsc_cmd_send(2,0x23,0x06);
-        dsc_cmd_send(2,0x24,0x3F);
-        dsc_cmd_send(2,0x25,0x0E);
-        dsc_cmd_send(2,0x26,0x3F);
-        dsc_cmd_send(2,0x27,0x3F);
-        dsc_cmd_send(2,0x54,0x06);
-        dsc_cmd_send(2,0x55,0x05);
-        dsc_cmd_send(2,0x56,0x04);
-        dsc_cmd_send(2,0x58,0x03);
-        dsc_cmd_send(2,0x59,0x1B);
-        dsc_cmd_send(2,0x5A,0x1B);
-        dsc_cmd_send(2,0x5B,0x01);
-        dsc_cmd_send(2,0x5C,0x32);
-        dsc_cmd_send(2,0x5E,0x18);
-        dsc_cmd_send(2,0x5F,0x20);
-        dsc_cmd_send(2,0x60,0x2B);
-        dsc_cmd_send(2,0x61,0x2C);
-        dsc_cmd_send(2,0x62,0x18);
-        dsc_cmd_send(2,0x63,0x01);
-        dsc_cmd_send(2,0x64,0x32);
-        dsc_cmd_send(2,0x65,0x00);
-        dsc_cmd_send(2,0x66,0x44);
-        dsc_cmd_send(2,0x67,0x11);
-        dsc_cmd_send(2,0x68,0x01);
-        dsc_cmd_send(2,0x69,0x01);
-        dsc_cmd_send(2,0x6A,0x04);
-        dsc_cmd_send(2,0x6B,0x2C);
-        dsc_cmd_send(2,0x6C,0x08);
-        dsc_cmd_send(2,0x6D,0x08);
-        dsc_cmd_send(2,0x78,0x00);
-        dsc_cmd_send(2,0x79,0x00);
-        dsc_cmd_send(2,0x7E,0x00);
-        dsc_cmd_send(2,0x7F,0x00);
-        dsc_cmd_send(2,0x80,0x00);
-        dsc_cmd_send(2,0x81,0x00);
-        dsc_cmd_send(2,0x8D,0x00);
-        dsc_cmd_send(2,0x8E,0x00);
-        dsc_cmd_send(2,0x8F,0xC0);
-        dsc_cmd_send(2,0x90,0x73);
-        dsc_cmd_send(2,0x91,0x10);
-        dsc_cmd_send(2,0x92,0x07);
-        dsc_cmd_send(2,0x96,0x11);
-        dsc_cmd_send(2,0x97,0x14);
-        dsc_cmd_send(2,0x98,0x00);
-        dsc_cmd_send(2,0x99,0x00);
-        dsc_cmd_send(2,0x9A,0x00);
-        dsc_cmd_send(2,0x9B,0x61);
-        dsc_cmd_send(2,0x9C,0x15);
-        dsc_cmd_send(2,0x9D,0x30);
-        dsc_cmd_send(2,0x9F,0x0F);
-        dsc_cmd_send(2,0xA2,0xB0);
-        dsc_cmd_send(2,0xA7,0x0A);
-        dsc_cmd_send(2,0xA9,0x00);
-        dsc_cmd_send(2,0xAA,0x70);
-        dsc_cmd_send(2,0xAB,0xDA);
-        dsc_cmd_send(2,0xAC,0xFF);
-        dsc_cmd_send(2,0xAE,0xF4);
-        dsc_cmd_send(2,0xAF,0x40);
-        dsc_cmd_send(2,0xB0,0x7F);
-        dsc_cmd_send(2,0xB1,0x16);
-        dsc_cmd_send(2,0xB2,0x53);
-        dsc_cmd_send(2,0xB3,0x00);
-        dsc_cmd_send(2,0xB4,0x2A);
-        dsc_cmd_send(2,0xB5,0x3A);
-        dsc_cmd_send(2,0xB6,0xF0);
-        dsc_cmd_send(2,0xBC,0x85);
-        dsc_cmd_send(2,0xBD,0xF4);
-        dsc_cmd_send(2,0xBE,0x33);
-        dsc_cmd_send(2,0xBF,0x13);
-        dsc_cmd_send(2,0xC0,0x77);
-        dsc_cmd_send(2,0xC1,0x77);
-        dsc_cmd_send(2,0xC2,0x77);
-        dsc_cmd_send(2,0xC3,0x77);
-        dsc_cmd_send(2,0xC4,0x77);
-        dsc_cmd_send(2,0xC5,0x77);
-        dsc_cmd_send(2,0xC6,0x77);
-        dsc_cmd_send(2,0xC7,0x77);
-        dsc_cmd_send(2,0xC8,0xAA);
-        dsc_cmd_send(2,0xC9,0x2A);
-        dsc_cmd_send(2,0xCA,0x00);
-        dsc_cmd_send(2,0xCB,0xAA);
-        dsc_cmd_send(2,0xCC,0x92);
-        dsc_cmd_send(2,0xCD,0x00);
-        dsc_cmd_send(2,0xCE,0x18);
-        dsc_cmd_send(2,0xCF,0x88);
-        dsc_cmd_send(2,0xD0,0xAA);
-        dsc_cmd_send(2,0xD1,0x00);
-        dsc_cmd_send(2,0xD2,0x00);
-        dsc_cmd_send(2,0xD3,0x00);
-        dsc_cmd_send(2,0xD6,0x02);
-        dsc_cmd_send(2,0xED,0x00);
-        dsc_cmd_send(2,0xEE,0x00);
-        dsc_cmd_send(2,0xEF,0x70);
-        dsc_cmd_send(2,0xFA,0x03);
-        dsc_cmd_send(2,0xFF,0x00);
-
-        ////page selection cmd start
-        dsc_cmd_send(2,0xFF,0x01);
-        dsc_cmd_send(2,0xFB,0x01);
-        ////page selection cmd end
-        ////R(+) MCR cmd
-        dsc_cmd_send(2,0x75,0x00);
-        dsc_cmd_send(2,0x76,0x00);
-        dsc_cmd_send(2,0x77,0x00);
-        dsc_cmd_send(2,0x78,0x2C);
-        dsc_cmd_send(2,0x79,0x00);
-        dsc_cmd_send(2,0x7A,0x4F);
-        dsc_cmd_send(2,0x7B,0x00);
-        dsc_cmd_send(2,0x7C,0x69);
-        dsc_cmd_send(2,0x7D,0x00);
-        dsc_cmd_send(2,0x7E,0x7F);
-        dsc_cmd_send(2,0x7F,0x00);
-        dsc_cmd_send(2,0x80,0x92);
-        dsc_cmd_send(2,0x81,0x00);
-        dsc_cmd_send(2,0x82,0xA3);
-        dsc_cmd_send(2,0x83,0x00);
-        dsc_cmd_send(2,0x84,0xB3);
-        dsc_cmd_send(2,0x85,0x00);
-        dsc_cmd_send(2,0x86,0xC1);
-        dsc_cmd_send(2,0x87,0x00);
-        dsc_cmd_send(2,0x88,0xF3);
-        dsc_cmd_send(2,0x89,0x01);
-        dsc_cmd_send(2,0x8A,0x1B);
-        dsc_cmd_send(2,0x8B,0x01);
-        dsc_cmd_send(2,0x8C,0x5A);
-        dsc_cmd_send(2,0x8D,0x01);
-        dsc_cmd_send(2,0x8E,0x8B);
-        dsc_cmd_send(2,0x8F,0x01);
-        dsc_cmd_send(2,0x90,0xD9);
-        dsc_cmd_send(2,0x91,0x02);
-        dsc_cmd_send(2,0x92,0x16);
-        dsc_cmd_send(2,0x93,0x02);
-        dsc_cmd_send(2,0x94,0x18);
-        dsc_cmd_send(2,0x95,0x02);
-        dsc_cmd_send(2,0x96,0x4E);
-        dsc_cmd_send(2,0x97,0x02);
-        dsc_cmd_send(2,0x98,0x88);
-        dsc_cmd_send(2,0x99,0x02);
-        dsc_cmd_send(2,0x9A,0xAC);
-        dsc_cmd_send(2,0x9B,0x02);
-        dsc_cmd_send(2,0x9C,0xDD);
-        dsc_cmd_send(2,0x9D,0x03);
-        dsc_cmd_send(2,0x9E,0x01);
-        dsc_cmd_send(2,0x9F,0x03);
-        dsc_cmd_send(2,0xA0,0x2E);
-        dsc_cmd_send(2,0xA2,0x03);
-        dsc_cmd_send(2,0xA3,0x3C);
-        dsc_cmd_send(2,0xA4,0x03);
-        dsc_cmd_send(2,0xA5,0x4C);
-        dsc_cmd_send(2,0xA6,0x03);
-        dsc_cmd_send(2,0xA7,0x5D);
-        dsc_cmd_send(2,0xA9,0x03);
-        dsc_cmd_send(2,0xAA,0x70);
-        dsc_cmd_send(2,0xAB,0x03);
-        dsc_cmd_send(2,0xAC,0x88);
-        dsc_cmd_send(2,0xAD,0x03);
-        dsc_cmd_send(2,0xAE,0xA8);
-        dsc_cmd_send(2,0xAF,0x03);
-        dsc_cmd_send(2,0xB0,0xC8);
-        dsc_cmd_send(2,0xB1,0x03);
-        dsc_cmd_send(2,0xB2,0xFF);
-        ////R(-) MCR cmd
-        dsc_cmd_send(2,0xB3,0x00);
-        dsc_cmd_send(2,0xB4,0x00);
-        dsc_cmd_send(2,0xB5,0x00);
-        dsc_cmd_send(2,0xB6,0x2C);
-        dsc_cmd_send(2,0xB7,0x00);
-        dsc_cmd_send(2,0xB8,0x4F);
-        dsc_cmd_send(2,0xB9,0x00);
-        dsc_cmd_send(2,0xBA,0x69);
-        dsc_cmd_send(2,0xBB,0x00);
-        dsc_cmd_send(2,0xBC,0x7F);
-        dsc_cmd_send(2,0xBD,0x00);
-        dsc_cmd_send(2,0xBE,0x92);
-        dsc_cmd_send(2,0xBF,0x00);
-        dsc_cmd_send(2,0xC0,0xA3);
-        dsc_cmd_send(2,0xC1,0x00);
-        dsc_cmd_send(2,0xC2,0xB3);
-        dsc_cmd_send(2,0xC3,0x00);
-        dsc_cmd_send(2,0xC4,0xC1);
-        dsc_cmd_send(2,0xC5,0x00);
-        dsc_cmd_send(2,0xC6,0xF3);
-        dsc_cmd_send(2,0xC7,0x01);
-        dsc_cmd_send(2,0xC8,0x1B);
-        dsc_cmd_send(2,0xC9,0x01);
-        dsc_cmd_send(2,0xCA,0x5A);
-        dsc_cmd_send(2,0xCB,0x01);
-        dsc_cmd_send(2,0xCC,0x8B);
-        dsc_cmd_send(2,0xCD,0x01);
-        dsc_cmd_send(2,0xCE,0xD9);
-        dsc_cmd_send(2,0xCF,0x02);
-        dsc_cmd_send(2,0xD0,0x16);
-        dsc_cmd_send(2,0xD1,0x02);
-        dsc_cmd_send(2,0xD2,0x18);
-        dsc_cmd_send(2,0xD3,0x02);
-        dsc_cmd_send(2,0xD4,0x4E);
-        dsc_cmd_send(2,0xD5,0x02);
-        dsc_cmd_send(2,0xD6,0x88);
-        dsc_cmd_send(2,0xD7,0x02);
-        dsc_cmd_send(2,0xD8,0xAC);
-        dsc_cmd_send(2,0xD9,0x02);
-        dsc_cmd_send(2,0xDA,0xDD);
-        dsc_cmd_send(2,0xDB,0x03);
-        dsc_cmd_send(2,0xDC,0x01);
-        dsc_cmd_send(2,0xDD,0x03);
-        dsc_cmd_send(2,0xDE,0x2E);
-        dsc_cmd_send(2,0xDF,0x03);
-        dsc_cmd_send(2,0xE0,0x3C);
-        dsc_cmd_send(2,0xE1,0x03);
-        dsc_cmd_send(2,0xE2,0x4C);
-        dsc_cmd_send(2,0xE3,0x03);
-        dsc_cmd_send(2,0xE4,0x5D);
-        dsc_cmd_send(2,0xE5,0x03);
-        dsc_cmd_send(2,0xE6,0x70);
-        dsc_cmd_send(2,0xE7,0x03);
-        dsc_cmd_send(2,0xE8,0x88);
-        dsc_cmd_send(2,0xE9,0x03);
-        dsc_cmd_send(2,0xEA,0xA8);
-        dsc_cmd_send(2,0xEB,0x03);
-        dsc_cmd_send(2,0xEC,0xC8);
-        dsc_cmd_send(2,0xED,0x03);
-        dsc_cmd_send(2,0xEE,0xFF);
-        ////G(+) MCR cmd
-        dsc_cmd_send(2,0xEF,0x00);
-        dsc_cmd_send(2,0xF0,0x00);
-        dsc_cmd_send(2,0xF1,0x00);
-        dsc_cmd_send(2,0xF2,0x2C);
-        dsc_cmd_send(2,0xF3,0x00);
-        dsc_cmd_send(2,0xF4,0x4F);
-        dsc_cmd_send(2,0xF5,0x00);
-        dsc_cmd_send(2,0xF6,0x69);
-        dsc_cmd_send(2,0xF7,0x00);
-        dsc_cmd_send(2,0xF8,0x7F);
-        dsc_cmd_send(2,0xF9,0x00);
-        dsc_cmd_send(2,0xFA,0x92);
-        ////page selection cmd start
-        dsc_cmd_send(2,0xFF,0x02);
-        dsc_cmd_send(2,0xFB,0x01);
-        ////page selection cmd end
-        dsc_cmd_send(2,0x00,0x00);
-        dsc_cmd_send(2,0x01,0xA3);
-        dsc_cmd_send(2,0x02,0x00);
-        dsc_cmd_send(2,0x03,0xB3);
-        dsc_cmd_send(2,0x04,0x00);
-        dsc_cmd_send(2,0x05,0xC1);
-        dsc_cmd_send(2,0x06,0x00);
-        dsc_cmd_send(2,0x07,0xF3);
-        dsc_cmd_send(2,0x08,0x01);
-        dsc_cmd_send(2,0x09,0x1B);
-        dsc_cmd_send(2,0x0A,0x01);
-        dsc_cmd_send(2,0x0B,0x5A);
-        dsc_cmd_send(2,0x0C,0x01);
-        dsc_cmd_send(2,0x0D,0x8B);
-        dsc_cmd_send(2,0x0E,0x01);
-        dsc_cmd_send(2,0x0F,0xD9);
-        dsc_cmd_send(2,0x10,0x02);
-        dsc_cmd_send(2,0x11,0x16);
-        dsc_cmd_send(2,0x12,0x02);
-        dsc_cmd_send(2,0x13,0x18);
-        dsc_cmd_send(2,0x14,0x02);
-        dsc_cmd_send(2,0x15,0x4E);
-        dsc_cmd_send(2,0x16,0x02);
-        dsc_cmd_send(2,0x17,0x88);
-        dsc_cmd_send(2,0x18,0x02);
-        dsc_cmd_send(2,0x19,0xAC);
-        dsc_cmd_send(2,0x1A,0x02);
-        dsc_cmd_send(2,0x1B,0xDD);
-        dsc_cmd_send(2,0x1C,0x03);
-        dsc_cmd_send(2,0x1D,0x01);
-        dsc_cmd_send(2,0x1E,0x03);
-        dsc_cmd_send(2,0x1F,0x2E);
-        dsc_cmd_send(2,0x20,0x03);
-        dsc_cmd_send(2,0x21,0x3C);
-        dsc_cmd_send(2,0x22,0x03);
-        dsc_cmd_send(2,0x23,0x4C);
-        dsc_cmd_send(2,0x24,0x03);
-        dsc_cmd_send(2,0x25,0x5D);
-        dsc_cmd_send(2,0x26,0x03);
-        dsc_cmd_send(2,0x27,0x70);
-        dsc_cmd_send(2,0x28,0x03);
-        dsc_cmd_send(2,0x29,0x88);
-        dsc_cmd_send(2,0x2A,0x03);
-        dsc_cmd_send(2,0x2B,0xA8);
-        dsc_cmd_send(2,0x2D,0x03);
-        dsc_cmd_send(2,0x2F,0xC8);
-        dsc_cmd_send(2,0x30,0x03);
-        dsc_cmd_send(2,0x31,0xFF);
-        ////G(-) MCR cmd
-        dsc_cmd_send(2,0x32,0x00);
-        dsc_cmd_send(2,0x33,0x00);
-        dsc_cmd_send(2,0x34,0x00);
-        dsc_cmd_send(2,0x35,0x2C);
-        dsc_cmd_send(2,0x36,0x00);
-        dsc_cmd_send(2,0x37,0x4F);
-        dsc_cmd_send(2,0x38,0x00);
-        dsc_cmd_send(2,0x39,0x69);
-        dsc_cmd_send(2,0x3A,0x00);
-        dsc_cmd_send(2,0x3B,0x7F);
-        dsc_cmd_send(2,0x3D,0x00);
-        dsc_cmd_send(2,0x3F,0x92);
-        dsc_cmd_send(2,0x40,0x00);
-        dsc_cmd_send(2,0x41,0xA3);
-        dsc_cmd_send(2,0x42,0x00);
-        dsc_cmd_send(2,0x43,0xB3);
-        dsc_cmd_send(2,0x44,0x00);
-        dsc_cmd_send(2,0x45,0xC1);
-        dsc_cmd_send(2,0x46,0x00);
-        dsc_cmd_send(2,0x47,0xF3);
-        dsc_cmd_send(2,0x48,0x01);
-        dsc_cmd_send(2,0x49,0x1B);
-        dsc_cmd_send(2,0x4A,0x01);
-        dsc_cmd_send(2,0x4B,0x5A);
-        dsc_cmd_send(2,0x4C,0x01);
-        dsc_cmd_send(2,0x4D,0x8B);
-        dsc_cmd_send(2,0x4E,0x01);
-        dsc_cmd_send(2,0x4F,0xD9);
-        dsc_cmd_send(2,0x50,0x02);
-        dsc_cmd_send(2,0x51,0x16);
-        dsc_cmd_send(2,0x52,0x02);
-        dsc_cmd_send(2,0x53,0x18);
-        dsc_cmd_send(2,0x54,0x02);
-        dsc_cmd_send(2,0x55,0x4E);
-        dsc_cmd_send(2,0x56,0x02);
-        dsc_cmd_send(2,0x58,0x88);
-        dsc_cmd_send(2,0x59,0x02);
-        dsc_cmd_send(2,0x5A,0xAC);
-        dsc_cmd_send(2,0x5B,0x02);
-        dsc_cmd_send(2,0x5C,0xDD);
-        dsc_cmd_send(2,0x5D,0x03);
-        dsc_cmd_send(2,0x5E,0x01);
-        dsc_cmd_send(2,0x5F,0x03);
-        dsc_cmd_send(2,0x60,0x2E);
-        dsc_cmd_send(2,0x61,0x03);
-        dsc_cmd_send(2,0x62,0x3C);
-        dsc_cmd_send(2,0x63,0x03);
-        dsc_cmd_send(2,0x64,0x4C);
-        dsc_cmd_send(2,0x65,0x03);
-        dsc_cmd_send(2,0x66,0x5D);
-        dsc_cmd_send(2,0x67,0x03);
-        dsc_cmd_send(2,0x68,0x70);
-        dsc_cmd_send(2,0x69,0x03);
-        dsc_cmd_send(2,0x6A,0x88);
-        dsc_cmd_send(2,0x6B,0x03);
-        dsc_cmd_send(2,0x6C,0xA8);
-        dsc_cmd_send(2,0x6D,0x03);
-        dsc_cmd_send(2,0x6E,0xC8);
-        dsc_cmd_send(2,0x6F,0x03);
-        dsc_cmd_send(2,0x70,0xFF);
-        ////B(+) MCR cmd
-        dsc_cmd_send(2,0x71,0x00);
-        dsc_cmd_send(2,0x72,0x00);
-        dsc_cmd_send(2,0x73,0x00);
-        dsc_cmd_send(2,0x74,0x2C);
-        dsc_cmd_send(2,0x75,0x00);
-        dsc_cmd_send(2,0x76,0x4F);
-        dsc_cmd_send(2,0x77,0x00);
-        dsc_cmd_send(2,0x78,0x69);
-        dsc_cmd_send(2,0x79,0x00);
-        dsc_cmd_send(2,0x7A,0x7F);
-        dsc_cmd_send(2,0x7B,0x00);
-        dsc_cmd_send(2,0x7C,0x92);
-        dsc_cmd_send(2,0x7D,0x00);
-        dsc_cmd_send(2,0x7E,0xA3);
-        dsc_cmd_send(2,0x7F,0x00);
-        dsc_cmd_send(2,0x80,0xB3);
-        dsc_cmd_send(2,0x81,0x00);
-        dsc_cmd_send(2,0x82,0xC1);
-        dsc_cmd_send(2,0x83,0x00);
-        dsc_cmd_send(2,0x84,0xF3);
-        dsc_cmd_send(2,0x85,0x01);
-        dsc_cmd_send(2,0x86,0x1B);
-        dsc_cmd_send(2,0x87,0x01);
-        dsc_cmd_send(2,0x88,0x5A);
-        dsc_cmd_send(2,0x89,0x01);
-        dsc_cmd_send(2,0x8A,0x8B);
-        dsc_cmd_send(2,0x8B,0x01);
-        dsc_cmd_send(2,0x8C,0xD9);
-        dsc_cmd_send(2,0x8D,0x02);
-        dsc_cmd_send(2,0x8E,0x16);
-        dsc_cmd_send(2,0x8F,0x02);
-        dsc_cmd_send(2,0x90,0x18);
-        dsc_cmd_send(2,0x91,0x02);
-        dsc_cmd_send(2,0x92,0x4E);
-        dsc_cmd_send(2,0x93,0x02);
-        dsc_cmd_send(2,0x94,0x88);
-        dsc_cmd_send(2,0x95,0x02);
-        dsc_cmd_send(2,0x96,0xAC);
-        dsc_cmd_send(2,0x97,0x02);
-        dsc_cmd_send(2,0x98,0xDD);
-        dsc_cmd_send(2,0x99,0x03);
-        dsc_cmd_send(2,0x9A,0x01);
-        dsc_cmd_send(2,0x9B,0x03);
-        dsc_cmd_send(2,0x9C,0x2E);
-        dsc_cmd_send(2,0x9D,0x03);
-        dsc_cmd_send(2,0x9E,0x3C);
-        dsc_cmd_send(2,0x9F,0x03);
-        dsc_cmd_send(2,0xA0,0x4C);
-        dsc_cmd_send(2,0xA2,0x03);
-        dsc_cmd_send(2,0xA3,0x5D);
-        dsc_cmd_send(2,0xA4,0x03);
-        dsc_cmd_send(2,0xA5,0x70);
-        dsc_cmd_send(2,0xA6,0x03);
-        dsc_cmd_send(2,0xA7,0x88);
-        dsc_cmd_send(2,0xA9,0x03);
-        dsc_cmd_send(2,0xAA,0xA8);
-        dsc_cmd_send(2,0xAB,0x03);
-        dsc_cmd_send(2,0xAC,0xC8);
-        dsc_cmd_send(2,0xAD,0x03);
-        dsc_cmd_send(2,0xAE,0xFF);
-        ////B(-) MCR cmd
-        dsc_cmd_send(2,0xAF,0x00);
-        dsc_cmd_send(2,0xB0,0x00);
-        dsc_cmd_send(2,0xB1,0x00);
-        dsc_cmd_send(2,0xB2,0x2C);
-        dsc_cmd_send(2,0xB3,0x00);
-        dsc_cmd_send(2,0xB4,0x4F);
-        dsc_cmd_send(2,0xB5,0x00);
-        dsc_cmd_send(2,0xB6,0x69);
-        dsc_cmd_send(2,0xB7,0x00);
-        dsc_cmd_send(2,0xB8,0x7F);
-        dsc_cmd_send(2,0xB9,0x00);
-        dsc_cmd_send(2,0xBA,0x92);
-        dsc_cmd_send(2,0xBB,0x00);
-        dsc_cmd_send(2,0xBC,0xA3);
-        dsc_cmd_send(2,0xBD,0x00);
-        dsc_cmd_send(2,0xBE,0xB3);
-        dsc_cmd_send(2,0xBF,0x00);
-        dsc_cmd_send(2,0xC0,0xC1);
-        dsc_cmd_send(2,0xC1,0x00);
-        dsc_cmd_send(2,0xC2,0xF3);
-        dsc_cmd_send(2,0xC3,0x01);
-        dsc_cmd_send(2,0xC4,0x1B);
-        dsc_cmd_send(2,0xC5,0x01);
-        dsc_cmd_send(2,0xC6,0x5A);
-        dsc_cmd_send(2,0xC7,0x01);
-        dsc_cmd_send(2,0xC8,0x8B);
-        dsc_cmd_send(2,0xC9,0x01);
-        dsc_cmd_send(2,0xCA,0xD9);
-        dsc_cmd_send(2,0xCB,0x02);
-        dsc_cmd_send(2,0xCC,0x16);
-        dsc_cmd_send(2,0xCD,0x02);
-        dsc_cmd_send(2,0xCE,0x18);
-        dsc_cmd_send(2,0xCF,0x02);
-        dsc_cmd_send(2,0xD0,0x4E);
-        dsc_cmd_send(2,0xD1,0x02);
-        dsc_cmd_send(2,0xD2,0x88);
-        dsc_cmd_send(2,0xD3,0x02);
-        dsc_cmd_send(2,0xD4,0xAC);
-        dsc_cmd_send(2,0xD5,0x02);
-        dsc_cmd_send(2,0xD6,0xDD);
-        dsc_cmd_send(2,0xD7,0x03);
-        dsc_cmd_send(2,0xD8,0x01);
-        dsc_cmd_send(2,0xD9,0x03);
-        dsc_cmd_send(2,0xDA,0x2E);
-        dsc_cmd_send(2,0xDB,0x03);
-        dsc_cmd_send(2,0xDC,0x3C);
-        dsc_cmd_send(2,0xDD,0x03);
-        dsc_cmd_send(2,0xDE,0x4C);
-        dsc_cmd_send(2,0xDF,0x03);
-        dsc_cmd_send(2,0xE0,0x5D);
-        dsc_cmd_send(2,0xE1,0x03);
-        dsc_cmd_send(2,0xE2,0x70);
-        dsc_cmd_send(2,0xE3,0x03);
-        dsc_cmd_send(2,0xE4,0x88);
-        dsc_cmd_send(2,0xE5,0x03);
-        dsc_cmd_send(2,0xE6,0xA8);
-        dsc_cmd_send(2,0xE7,0x03);
-        dsc_cmd_send(2,0xE8,0xC8);
-        dsc_cmd_send(2,0xE9,0x03);
-        dsc_cmd_send(2,0xEA,0xFF);
-
-        dsc_cmd_send(2,0xFF,0x00);
-        dsc_cmd_send(2,0xFB,0x01);
-
-        dsc_cmd_send(2,0x11,0x00);
-
-#ifndef _SIMU        
-        msleep(100);
+	dsc_cmd_send(2,0xFF,0x00);
+	dsc_cmd_send(2,0xFB,0x01);
+	dsc_cmd_send(2,0xBA,0x03);
+	dsc_cmd_send(2,0x36,0x00);
+	dsc_cmd_send(2,0xB0,0x00);
+	dsc_cmd_send(2,0xD3,0x08);
+	dsc_cmd_send(2,0xD4,0x0E);
+	dsc_cmd_send(2,0xD5,0x0F);
+	dsc_cmd_send(2,0xD6,0x48);
+	dsc_cmd_send(2,0xD7,0x00);
+	dsc_cmd_send(2,0xD9,0x00);
+	dsc_cmd_send(2,0xFB,0x01);
+	dsc_cmd_send(2,0xFF,0xEE);
+	dsc_cmd_send(2,0x40,0x00);
+	dsc_cmd_send(2,0x41,0x00);
+	dsc_cmd_send(2,0x42,0x00);
+	dsc_cmd_send(2,0xFB,0x01);
+	dsc_cmd_send(2,0xFF,0x01);
+	dsc_cmd_send(2,0xFB,0x01);
+	dsc_cmd_send(2,0x01,0x55);
+	dsc_cmd_send(2,0x04,0x0C);
+	dsc_cmd_send(2,0x05,0x3A);
+	dsc_cmd_send(2,0x06,0x50);
+	dsc_cmd_send(2,0x07,0xD0);
+	dsc_cmd_send(2,0x0A,0x0F);
+	dsc_cmd_send(2,0x0C,0x06);
+	dsc_cmd_send(2,0x0D,0x7F);
+	dsc_cmd_send(2,0x0E,0x7F);
+	dsc_cmd_send(2,0x0F,0x70);
+	dsc_cmd_send(2,0x10,0x63);
+	dsc_cmd_send(2,0x11,0x3C);
+	dsc_cmd_send(2,0x12,0x5C);
+	dsc_cmd_send(2,0x13,0x5A);
+	dsc_cmd_send(2,0x14,0x5A);
+	dsc_cmd_send(2,0x15,0x60);
+	dsc_cmd_send(2,0x16,0x15);
+	dsc_cmd_send(2,0x17,0x15);
+	dsc_cmd_send(2,0x23,0x00);
+	dsc_cmd_send(2,0x24,0x00);
+	dsc_cmd_send(2,0x25,0x00);
+	dsc_cmd_send(2,0x26,0x00);
+	dsc_cmd_send(2,0x27,0x00);
+	dsc_cmd_send(2,0x28,0x00);
+	dsc_cmd_send(2,0x44,0x00);
+	dsc_cmd_send(2,0x45,0x00);
+	dsc_cmd_send(2,0x46,0x00);
+	dsc_cmd_send(2,0x5B,0xCA);
+	dsc_cmd_send(2,0x5C,0x00);
+	dsc_cmd_send(2,0x5D,0x00);
+	dsc_cmd_send(2,0x5E,0x2D);
+	dsc_cmd_send(2,0x5F,0x1B);
+	dsc_cmd_send(2,0x60,0xD5);
+	dsc_cmd_send(2,0x61,0xF7);
+	dsc_cmd_send(2,0x6C,0xAB);
+	dsc_cmd_send(2,0x6D,0x44);
+	//dsc_cmd_send(2,0x6E,0x80);
+	dsc_cmd_send(2,0xFF,0x05);
+	dsc_cmd_send(2,0xFB,0x01);
+	dsc_cmd_send(2,0x00,0x3F);
+	dsc_cmd_send(2,0x01,0x3F);
+	dsc_cmd_send(2,0x02,0x3F);
+	dsc_cmd_send(2,0x03,0x3F);
+	dsc_cmd_send(2,0x04,0x38);
+	dsc_cmd_send(2,0x05,0x3F);
+	dsc_cmd_send(2,0x06,0x3F);
+	dsc_cmd_send(2,0x07,0x19);
+	dsc_cmd_send(2,0x08,0x1D);
+	dsc_cmd_send(2,0x09,0x3F);
+	dsc_cmd_send(2,0x0A,0x3F);
+	dsc_cmd_send(2,0x0B,0x1B);
+	dsc_cmd_send(2,0x0C,0x17);
+	dsc_cmd_send(2,0x0D,0x3F);
+	dsc_cmd_send(2,0x0E,0x3F);
+	dsc_cmd_send(2,0x0F,0x08);
+	dsc_cmd_send(2,0x10,0x3F);
+	dsc_cmd_send(2,0x11,0x10);
+	dsc_cmd_send(2,0x12,0x3F);
+	dsc_cmd_send(2,0x13,0x3F);
+	dsc_cmd_send(2,0x14,0x3F);
+	dsc_cmd_send(2,0x15,0x3F);
+	dsc_cmd_send(2,0x16,0x3F);
+	dsc_cmd_send(2,0x17,0x3F);
+	dsc_cmd_send(2,0x18,0x38);
+	dsc_cmd_send(2,0x19,0x18);
+	dsc_cmd_send(2,0x1A,0x1C);
+	dsc_cmd_send(2,0x1B,0x3F);
+	dsc_cmd_send(2,0x1C,0x3F);
+	dsc_cmd_send(2,0x1D,0x1A);
+	dsc_cmd_send(2,0x1E,0x16);
+	dsc_cmd_send(2,0x1F,0x3F);
+	dsc_cmd_send(2,0x20,0x3F);
+	dsc_cmd_send(2,0x21,0x3F);
+	dsc_cmd_send(2,0x22,0x3F);
+	dsc_cmd_send(2,0x23,0x06);
+	dsc_cmd_send(2,0x24,0x3F);
+	dsc_cmd_send(2,0x25,0x0E);
+	dsc_cmd_send(2,0x26,0x3F);
+	dsc_cmd_send(2,0x27,0x3F);
+	dsc_cmd_send(2,0x54,0x06);
+	dsc_cmd_send(2,0x55,0x05);
+	dsc_cmd_send(2,0x56,0x04);
+	dsc_cmd_send(2,0x58,0x03);
+	dsc_cmd_send(2,0x59,0x1B);
+	dsc_cmd_send(2,0x5A,0x1B);
+	dsc_cmd_send(2,0x5B,0x01);
+	dsc_cmd_send(2,0x5C,0x32);
+	dsc_cmd_send(2,0x5E,0x18);
+	dsc_cmd_send(2,0x5F,0x20);
+	dsc_cmd_send(2,0x60,0x2B);
+	dsc_cmd_send(2,0x61,0x2C);
+	dsc_cmd_send(2,0x62,0x18);
+	dsc_cmd_send(2,0x63,0x01);
+	dsc_cmd_send(2,0x64,0x32);
+	dsc_cmd_send(2,0x65,0x00);
+	dsc_cmd_send(2,0x66,0x44);
+	dsc_cmd_send(2,0x67,0x11);
+	dsc_cmd_send(2,0x68,0x01);
+	dsc_cmd_send(2,0x69,0x01);
+	dsc_cmd_send(2,0x6A,0x04);
+	dsc_cmd_send(2,0x6B,0x2C);
+	dsc_cmd_send(2,0x6C,0x08);
+	dsc_cmd_send(2,0x6D,0x08);
+	dsc_cmd_send(2,0x78,0x00);
+	dsc_cmd_send(2,0x79,0x00);
+	dsc_cmd_send(2,0x7E,0x00);
+	dsc_cmd_send(2,0x7F,0x00);
+	dsc_cmd_send(2,0x80,0x00);
+	dsc_cmd_send(2,0x81,0x00);
+	dsc_cmd_send(2,0x8D,0x00);
+	dsc_cmd_send(2,0x8E,0x00);
+	dsc_cmd_send(2,0x8F,0xC0);
+	dsc_cmd_send(2,0x90,0x73);
+	dsc_cmd_send(2,0x91,0x10);
+	dsc_cmd_send(2,0x92,0x07);
+	dsc_cmd_send(2,0x96,0x11);
+	dsc_cmd_send(2,0x97,0x14);
+	dsc_cmd_send(2,0x98,0x00);
+	dsc_cmd_send(2,0x99,0x00);
+	dsc_cmd_send(2,0x9A,0x00);
+	dsc_cmd_send(2,0x9B,0x61);
+	dsc_cmd_send(2,0x9C,0x15);
+	dsc_cmd_send(2,0x9D,0x30);
+	dsc_cmd_send(2,0x9F,0x0F);
+	dsc_cmd_send(2,0xA2,0xB0);
+	dsc_cmd_send(2,0xA7,0x0A);
+	dsc_cmd_send(2,0xA9,0x00);
+	dsc_cmd_send(2,0xAA,0x70);
+	dsc_cmd_send(2,0xAB,0xDA);
+	dsc_cmd_send(2,0xAC,0xFF);
+	dsc_cmd_send(2,0xAE,0xF4);
+	dsc_cmd_send(2,0xAF,0x40);
+	dsc_cmd_send(2,0xB0,0x7F);
+	dsc_cmd_send(2,0xB1,0x16);
+	dsc_cmd_send(2,0xB2,0x53);
+	dsc_cmd_send(2,0xB3,0x00);
+	dsc_cmd_send(2,0xB4,0x2A);
+	dsc_cmd_send(2,0xB5,0x3A);
+	dsc_cmd_send(2,0xB6,0xF0);
+	dsc_cmd_send(2,0xBC,0x85);
+	dsc_cmd_send(2,0xBD,0xF4);
+	dsc_cmd_send(2,0xBE,0x33);
+	dsc_cmd_send(2,0xBF,0x13);
+	dsc_cmd_send(2,0xC0,0x77);
+	dsc_cmd_send(2,0xC1,0x77);
+	dsc_cmd_send(2,0xC2,0x77);
+	dsc_cmd_send(2,0xC3,0x77);
+	dsc_cmd_send(2,0xC4,0x77);
+	dsc_cmd_send(2,0xC5,0x77);
+	dsc_cmd_send(2,0xC6,0x77);
+	dsc_cmd_send(2,0xC7,0x77);
+	dsc_cmd_send(2,0xC8,0xAA);
+	dsc_cmd_send(2,0xC9,0x2A);
+	dsc_cmd_send(2,0xCA,0x00);
+	dsc_cmd_send(2,0xCB,0xAA);
+	dsc_cmd_send(2,0xCC,0x92);
+	dsc_cmd_send(2,0xCD,0x00);
+	dsc_cmd_send(2,0xCE,0x18);
+	dsc_cmd_send(2,0xCF,0x88);
+	dsc_cmd_send(2,0xD0,0xAA);
+	dsc_cmd_send(2,0xD1,0x00);
+	dsc_cmd_send(2,0xD2,0x00);
+	dsc_cmd_send(2,0xD3,0x00);
+	dsc_cmd_send(2,0xD6,0x02);
+	dsc_cmd_send(2,0xED,0x00);
+	dsc_cmd_send(2,0xEE,0x00);
+	dsc_cmd_send(2,0xEF,0x70);
+	dsc_cmd_send(2,0xFA,0x03);
+	dsc_cmd_send(2,0xFF,0x00);
+
+	////page selection cmd start
+	dsc_cmd_send(2,0xFF,0x01);
+	dsc_cmd_send(2,0xFB,0x01);
+	////page selection cmd end
+	////R(+) MCR cmd
+	dsc_cmd_send(2,0x75,0x00);
+	dsc_cmd_send(2,0x76,0x00);
+	dsc_cmd_send(2,0x77,0x00);
+	dsc_cmd_send(2,0x78,0x2C);
+	dsc_cmd_send(2,0x79,0x00);
+	dsc_cmd_send(2,0x7A,0x4F);
+	dsc_cmd_send(2,0x7B,0x00);
+	dsc_cmd_send(2,0x7C,0x69);
+	dsc_cmd_send(2,0x7D,0x00);
+	dsc_cmd_send(2,0x7E,0x7F);
+	dsc_cmd_send(2,0x7F,0x00);
+	dsc_cmd_send(2,0x80,0x92);
+	dsc_cmd_send(2,0x81,0x00);
+	dsc_cmd_send(2,0x82,0xA3);
+	dsc_cmd_send(2,0x83,0x00);
+	dsc_cmd_send(2,0x84,0xB3);
+	dsc_cmd_send(2,0x85,0x00);
+	dsc_cmd_send(2,0x86,0xC1);
+	dsc_cmd_send(2,0x87,0x00);
+	dsc_cmd_send(2,0x88,0xF3);
+	dsc_cmd_send(2,0x89,0x01);
+	dsc_cmd_send(2,0x8A,0x1B);
+	dsc_cmd_send(2,0x8B,0x01);
+	dsc_cmd_send(2,0x8C,0x5A);
+	dsc_cmd_send(2,0x8D,0x01);
+	dsc_cmd_send(2,0x8E,0x8B);
+	dsc_cmd_send(2,0x8F,0x01);
+	dsc_cmd_send(2,0x90,0xD9);
+	dsc_cmd_send(2,0x91,0x02);
+	dsc_cmd_send(2,0x92,0x16);
+	dsc_cmd_send(2,0x93,0x02);
+	dsc_cmd_send(2,0x94,0x18);
+	dsc_cmd_send(2,0x95,0x02);
+	dsc_cmd_send(2,0x96,0x4E);
+	dsc_cmd_send(2,0x97,0x02);
+	dsc_cmd_send(2,0x98,0x88);
+	dsc_cmd_send(2,0x99,0x02);
+	dsc_cmd_send(2,0x9A,0xAC);
+	dsc_cmd_send(2,0x9B,0x02);
+	dsc_cmd_send(2,0x9C,0xDD);
+	dsc_cmd_send(2,0x9D,0x03);
+	dsc_cmd_send(2,0x9E,0x01);
+	dsc_cmd_send(2,0x9F,0x03);
+	dsc_cmd_send(2,0xA0,0x2E);
+	dsc_cmd_send(2,0xA2,0x03);
+	dsc_cmd_send(2,0xA3,0x3C);
+	dsc_cmd_send(2,0xA4,0x03);
+	dsc_cmd_send(2,0xA5,0x4C);
+	dsc_cmd_send(2,0xA6,0x03);
+	dsc_cmd_send(2,0xA7,0x5D);
+	dsc_cmd_send(2,0xA9,0x03);
+	dsc_cmd_send(2,0xAA,0x70);
+	dsc_cmd_send(2,0xAB,0x03);
+	dsc_cmd_send(2,0xAC,0x88);
+	dsc_cmd_send(2,0xAD,0x03);
+	dsc_cmd_send(2,0xAE,0xA8);
+	dsc_cmd_send(2,0xAF,0x03);
+	dsc_cmd_send(2,0xB0,0xC8);
+	dsc_cmd_send(2,0xB1,0x03);
+	dsc_cmd_send(2,0xB2,0xFF);
+	////R(-) MCR cmd
+	dsc_cmd_send(2,0xB3,0x00);
+	dsc_cmd_send(2,0xB4,0x00);
+	dsc_cmd_send(2,0xB5,0x00);
+	dsc_cmd_send(2,0xB6,0x2C);
+	dsc_cmd_send(2,0xB7,0x00);
+	dsc_cmd_send(2,0xB8,0x4F);
+	dsc_cmd_send(2,0xB9,0x00);
+	dsc_cmd_send(2,0xBA,0x69);
+	dsc_cmd_send(2,0xBB,0x00);
+	dsc_cmd_send(2,0xBC,0x7F);
+	dsc_cmd_send(2,0xBD,0x00);
+	dsc_cmd_send(2,0xBE,0x92);
+	dsc_cmd_send(2,0xBF,0x00);
+	dsc_cmd_send(2,0xC0,0xA3);
+	dsc_cmd_send(2,0xC1,0x00);
+	dsc_cmd_send(2,0xC2,0xB3);
+	dsc_cmd_send(2,0xC3,0x00);
+	dsc_cmd_send(2,0xC4,0xC1);
+	dsc_cmd_send(2,0xC5,0x00);
+	dsc_cmd_send(2,0xC6,0xF3);
+	dsc_cmd_send(2,0xC7,0x01);
+	dsc_cmd_send(2,0xC8,0x1B);
+	dsc_cmd_send(2,0xC9,0x01);
+	dsc_cmd_send(2,0xCA,0x5A);
+	dsc_cmd_send(2,0xCB,0x01);
+	dsc_cmd_send(2,0xCC,0x8B);
+	dsc_cmd_send(2,0xCD,0x01);
+	dsc_cmd_send(2,0xCE,0xD9);
+	dsc_cmd_send(2,0xCF,0x02);
+	dsc_cmd_send(2,0xD0,0x16);
+	dsc_cmd_send(2,0xD1,0x02);
+	dsc_cmd_send(2,0xD2,0x18);
+	dsc_cmd_send(2,0xD3,0x02);
+	dsc_cmd_send(2,0xD4,0x4E);
+	dsc_cmd_send(2,0xD5,0x02);
+	dsc_cmd_send(2,0xD6,0x88);
+	dsc_cmd_send(2,0xD7,0x02);
+	dsc_cmd_send(2,0xD8,0xAC);
+	dsc_cmd_send(2,0xD9,0x02);
+	dsc_cmd_send(2,0xDA,0xDD);
+	dsc_cmd_send(2,0xDB,0x03);
+	dsc_cmd_send(2,0xDC,0x01);
+	dsc_cmd_send(2,0xDD,0x03);
+	dsc_cmd_send(2,0xDE,0x2E);
+	dsc_cmd_send(2,0xDF,0x03);
+	dsc_cmd_send(2,0xE0,0x3C);
+	dsc_cmd_send(2,0xE1,0x03);
+	dsc_cmd_send(2,0xE2,0x4C);
+	dsc_cmd_send(2,0xE3,0x03);
+	dsc_cmd_send(2,0xE4,0x5D);
+	dsc_cmd_send(2,0xE5,0x03);
+	dsc_cmd_send(2,0xE6,0x70);
+	dsc_cmd_send(2,0xE7,0x03);
+	dsc_cmd_send(2,0xE8,0x88);
+	dsc_cmd_send(2,0xE9,0x03);
+	dsc_cmd_send(2,0xEA,0xA8);
+	dsc_cmd_send(2,0xEB,0x03);
+	dsc_cmd_send(2,0xEC,0xC8);
+	dsc_cmd_send(2,0xED,0x03);
+	dsc_cmd_send(2,0xEE,0xFF);
+	////G(+) MCR cmd
+	dsc_cmd_send(2,0xEF,0x00);
+	dsc_cmd_send(2,0xF0,0x00);
+	dsc_cmd_send(2,0xF1,0x00);
+	dsc_cmd_send(2,0xF2,0x2C);
+	dsc_cmd_send(2,0xF3,0x00);
+	dsc_cmd_send(2,0xF4,0x4F);
+	dsc_cmd_send(2,0xF5,0x00);
+	dsc_cmd_send(2,0xF6,0x69);
+	dsc_cmd_send(2,0xF7,0x00);
+	dsc_cmd_send(2,0xF8,0x7F);
+	dsc_cmd_send(2,0xF9,0x00);
+	dsc_cmd_send(2,0xFA,0x92);
+	////page selection cmd start
+	dsc_cmd_send(2,0xFF,0x02);
+	dsc_cmd_send(2,0xFB,0x01);
+	////page selection cmd end
+	dsc_cmd_send(2,0x00,0x00);
+	dsc_cmd_send(2,0x01,0xA3);
+	dsc_cmd_send(2,0x02,0x00);
+	dsc_cmd_send(2,0x03,0xB3);
+	dsc_cmd_send(2,0x04,0x00);
+	dsc_cmd_send(2,0x05,0xC1);
+	dsc_cmd_send(2,0x06,0x00);
+	dsc_cmd_send(2,0x07,0xF3);
+	dsc_cmd_send(2,0x08,0x01);
+	dsc_cmd_send(2,0x09,0x1B);
+	dsc_cmd_send(2,0x0A,0x01);
+	dsc_cmd_send(2,0x0B,0x5A);
+	dsc_cmd_send(2,0x0C,0x01);
+	dsc_cmd_send(2,0x0D,0x8B);
+	dsc_cmd_send(2,0x0E,0x01);
+	dsc_cmd_send(2,0x0F,0xD9);
+	dsc_cmd_send(2,0x10,0x02);
+	dsc_cmd_send(2,0x11,0x16);
+	dsc_cmd_send(2,0x12,0x02);
+	dsc_cmd_send(2,0x13,0x18);
+	dsc_cmd_send(2,0x14,0x02);
+	dsc_cmd_send(2,0x15,0x4E);
+	dsc_cmd_send(2,0x16,0x02);
+	dsc_cmd_send(2,0x17,0x88);
+	dsc_cmd_send(2,0x18,0x02);
+	dsc_cmd_send(2,0x19,0xAC);
+	dsc_cmd_send(2,0x1A,0x02);
+	dsc_cmd_send(2,0x1B,0xDD);
+	dsc_cmd_send(2,0x1C,0x03);
+	dsc_cmd_send(2,0x1D,0x01);
+	dsc_cmd_send(2,0x1E,0x03);
+	dsc_cmd_send(2,0x1F,0x2E);
+	dsc_cmd_send(2,0x20,0x03);
+	dsc_cmd_send(2,0x21,0x3C);
+	dsc_cmd_send(2,0x22,0x03);
+	dsc_cmd_send(2,0x23,0x4C);
+	dsc_cmd_send(2,0x24,0x03);
+	dsc_cmd_send(2,0x25,0x5D);
+	dsc_cmd_send(2,0x26,0x03);
+	dsc_cmd_send(2,0x27,0x70);
+	dsc_cmd_send(2,0x28,0x03);
+	dsc_cmd_send(2,0x29,0x88);
+	dsc_cmd_send(2,0x2A,0x03);
+	dsc_cmd_send(2,0x2B,0xA8);
+	dsc_cmd_send(2,0x2D,0x03);
+	dsc_cmd_send(2,0x2F,0xC8);
+	dsc_cmd_send(2,0x30,0x03);
+	dsc_cmd_send(2,0x31,0xFF);
+	////G(-) MCR cmd
+	dsc_cmd_send(2,0x32,0x00);
+	dsc_cmd_send(2,0x33,0x00);
+	dsc_cmd_send(2,0x34,0x00);
+	dsc_cmd_send(2,0x35,0x2C);
+	dsc_cmd_send(2,0x36,0x00);
+	dsc_cmd_send(2,0x37,0x4F);
+	dsc_cmd_send(2,0x38,0x00);
+	dsc_cmd_send(2,0x39,0x69);
+	dsc_cmd_send(2,0x3A,0x00);
+	dsc_cmd_send(2,0x3B,0x7F);
+	dsc_cmd_send(2,0x3D,0x00);
+	dsc_cmd_send(2,0x3F,0x92);
+	dsc_cmd_send(2,0x40,0x00);
+	dsc_cmd_send(2,0x41,0xA3);
+	dsc_cmd_send(2,0x42,0x00);
+	dsc_cmd_send(2,0x43,0xB3);
+	dsc_cmd_send(2,0x44,0x00);
+	dsc_cmd_send(2,0x45,0xC1);
+	dsc_cmd_send(2,0x46,0x00);
+	dsc_cmd_send(2,0x47,0xF3);
+	dsc_cmd_send(2,0x48,0x01);
+	dsc_cmd_send(2,0x49,0x1B);
+	dsc_cmd_send(2,0x4A,0x01);
+	dsc_cmd_send(2,0x4B,0x5A);
+	dsc_cmd_send(2,0x4C,0x01);
+	dsc_cmd_send(2,0x4D,0x8B);
+	dsc_cmd_send(2,0x4E,0x01);
+	dsc_cmd_send(2,0x4F,0xD9);
+	dsc_cmd_send(2,0x50,0x02);
+	dsc_cmd_send(2,0x51,0x16);
+	dsc_cmd_send(2,0x52,0x02);
+	dsc_cmd_send(2,0x53,0x18);
+	dsc_cmd_send(2,0x54,0x02);
+	dsc_cmd_send(2,0x55,0x4E);
+	dsc_cmd_send(2,0x56,0x02);
+	dsc_cmd_send(2,0x58,0x88);
+	dsc_cmd_send(2,0x59,0x02);
+	dsc_cmd_send(2,0x5A,0xAC);
+	dsc_cmd_send(2,0x5B,0x02);
+	dsc_cmd_send(2,0x5C,0xDD);
+	dsc_cmd_send(2,0x5D,0x03);
+	dsc_cmd_send(2,0x5E,0x01);
+	dsc_cmd_send(2,0x5F,0x03);
+	dsc_cmd_send(2,0x60,0x2E);
+	dsc_cmd_send(2,0x61,0x03);
+	dsc_cmd_send(2,0x62,0x3C);
+	dsc_cmd_send(2,0x63,0x03);
+	dsc_cmd_send(2,0x64,0x4C);
+	dsc_cmd_send(2,0x65,0x03);
+	dsc_cmd_send(2,0x66,0x5D);
+	dsc_cmd_send(2,0x67,0x03);
+	dsc_cmd_send(2,0x68,0x70);
+	dsc_cmd_send(2,0x69,0x03);
+	dsc_cmd_send(2,0x6A,0x88);
+	dsc_cmd_send(2,0x6B,0x03);
+	dsc_cmd_send(2,0x6C,0xA8);
+	dsc_cmd_send(2,0x6D,0x03);
+	dsc_cmd_send(2,0x6E,0xC8);
+	dsc_cmd_send(2,0x6F,0x03);
+	dsc_cmd_send(2,0x70,0xFF);
+	////B(+) MCR cmd
+	dsc_cmd_send(2,0x71,0x00);
+	dsc_cmd_send(2,0x72,0x00);
+	dsc_cmd_send(2,0x73,0x00);
+	dsc_cmd_send(2,0x74,0x2C);
+	dsc_cmd_send(2,0x75,0x00);
+	dsc_cmd_send(2,0x76,0x4F);
+	dsc_cmd_send(2,0x77,0x00);
+	dsc_cmd_send(2,0x78,0x69);
+	dsc_cmd_send(2,0x79,0x00);
+	dsc_cmd_send(2,0x7A,0x7F);
+	dsc_cmd_send(2,0x7B,0x00);
+	dsc_cmd_send(2,0x7C,0x92);
+	dsc_cmd_send(2,0x7D,0x00);
+	dsc_cmd_send(2,0x7E,0xA3);
+	dsc_cmd_send(2,0x7F,0x00);
+	dsc_cmd_send(2,0x80,0xB3);
+	dsc_cmd_send(2,0x81,0x00);
+	dsc_cmd_send(2,0x82,0xC1);
+	dsc_cmd_send(2,0x83,0x00);
+	dsc_cmd_send(2,0x84,0xF3);
+	dsc_cmd_send(2,0x85,0x01);
+	dsc_cmd_send(2,0x86,0x1B);
+	dsc_cmd_send(2,0x87,0x01);
+	dsc_cmd_send(2,0x88,0x5A);
+	dsc_cmd_send(2,0x89,0x01);
+	dsc_cmd_send(2,0x8A,0x8B);
+	dsc_cmd_send(2,0x8B,0x01);
+	dsc_cmd_send(2,0x8C,0xD9);
+	dsc_cmd_send(2,0x8D,0x02);
+	dsc_cmd_send(2,0x8E,0x16);
+	dsc_cmd_send(2,0x8F,0x02);
+	dsc_cmd_send(2,0x90,0x18);
+	dsc_cmd_send(2,0x91,0x02);
+	dsc_cmd_send(2,0x92,0x4E);
+	dsc_cmd_send(2,0x93,0x02);
+	dsc_cmd_send(2,0x94,0x88);
+	dsc_cmd_send(2,0x95,0x02);
+	dsc_cmd_send(2,0x96,0xAC);
+	dsc_cmd_send(2,0x97,0x02);
+	dsc_cmd_send(2,0x98,0xDD);
+	dsc_cmd_send(2,0x99,0x03);
+	dsc_cmd_send(2,0x9A,0x01);
+	dsc_cmd_send(2,0x9B,0x03);
+	dsc_cmd_send(2,0x9C,0x2E);
+	dsc_cmd_send(2,0x9D,0x03);
+	dsc_cmd_send(2,0x9E,0x3C);
+	dsc_cmd_send(2,0x9F,0x03);
+	dsc_cmd_send(2,0xA0,0x4C);
+	dsc_cmd_send(2,0xA2,0x03);
+	dsc_cmd_send(2,0xA3,0x5D);
+	dsc_cmd_send(2,0xA4,0x03);
+	dsc_cmd_send(2,0xA5,0x70);
+	dsc_cmd_send(2,0xA6,0x03);
+	dsc_cmd_send(2,0xA7,0x88);
+	dsc_cmd_send(2,0xA9,0x03);
+	dsc_cmd_send(2,0xAA,0xA8);
+	dsc_cmd_send(2,0xAB,0x03);
+	dsc_cmd_send(2,0xAC,0xC8);
+	dsc_cmd_send(2,0xAD,0x03);
+	dsc_cmd_send(2,0xAE,0xFF);
+	////B(-) MCR cmd
+	dsc_cmd_send(2,0xAF,0x00);
+	dsc_cmd_send(2,0xB0,0x00);
+	dsc_cmd_send(2,0xB1,0x00);
+	dsc_cmd_send(2,0xB2,0x2C);
+	dsc_cmd_send(2,0xB3,0x00);
+	dsc_cmd_send(2,0xB4,0x4F);
+	dsc_cmd_send(2,0xB5,0x00);
+	dsc_cmd_send(2,0xB6,0x69);
+	dsc_cmd_send(2,0xB7,0x00);
+	dsc_cmd_send(2,0xB8,0x7F);
+	dsc_cmd_send(2,0xB9,0x00);
+	dsc_cmd_send(2,0xBA,0x92);
+	dsc_cmd_send(2,0xBB,0x00);
+	dsc_cmd_send(2,0xBC,0xA3);
+	dsc_cmd_send(2,0xBD,0x00);
+	dsc_cmd_send(2,0xBE,0xB3);
+	dsc_cmd_send(2,0xBF,0x00);
+	dsc_cmd_send(2,0xC0,0xC1);
+	dsc_cmd_send(2,0xC1,0x00);
+	dsc_cmd_send(2,0xC2,0xF3);
+	dsc_cmd_send(2,0xC3,0x01);
+	dsc_cmd_send(2,0xC4,0x1B);
+	dsc_cmd_send(2,0xC5,0x01);
+	dsc_cmd_send(2,0xC6,0x5A);
+	dsc_cmd_send(2,0xC7,0x01);
+	dsc_cmd_send(2,0xC8,0x8B);
+	dsc_cmd_send(2,0xC9,0x01);
+	dsc_cmd_send(2,0xCA,0xD9);
+	dsc_cmd_send(2,0xCB,0x02);
+	dsc_cmd_send(2,0xCC,0x16);
+	dsc_cmd_send(2,0xCD,0x02);
+	dsc_cmd_send(2,0xCE,0x18);
+	dsc_cmd_send(2,0xCF,0x02);
+	dsc_cmd_send(2,0xD0,0x4E);
+	dsc_cmd_send(2,0xD1,0x02);
+	dsc_cmd_send(2,0xD2,0x88);
+	dsc_cmd_send(2,0xD3,0x02);
+	dsc_cmd_send(2,0xD4,0xAC);
+	dsc_cmd_send(2,0xD5,0x02);
+	dsc_cmd_send(2,0xD6,0xDD);
+	dsc_cmd_send(2,0xD7,0x03);
+	dsc_cmd_send(2,0xD8,0x01);
+	dsc_cmd_send(2,0xD9,0x03);
+	dsc_cmd_send(2,0xDA,0x2E);
+	dsc_cmd_send(2,0xDB,0x03);
+	dsc_cmd_send(2,0xDC,0x3C);
+	dsc_cmd_send(2,0xDD,0x03);
+	dsc_cmd_send(2,0xDE,0x4C);
+	dsc_cmd_send(2,0xDF,0x03);
+	dsc_cmd_send(2,0xE0,0x5D);
+	dsc_cmd_send(2,0xE1,0x03);
+	dsc_cmd_send(2,0xE2,0x70);
+	dsc_cmd_send(2,0xE3,0x03);
+	dsc_cmd_send(2,0xE4,0x88);
+	dsc_cmd_send(2,0xE5,0x03);
+	dsc_cmd_send(2,0xE6,0xA8);
+	dsc_cmd_send(2,0xE7,0x03);
+	dsc_cmd_send(2,0xE8,0xC8);
+	dsc_cmd_send(2,0xE9,0x03);
+	dsc_cmd_send(2,0xEA,0xFF);
+
+	dsc_cmd_send(2,0xFF,0x00);
+	dsc_cmd_send(2,0xFB,0x01);
+
+	dsc_cmd_send(2,0x11,0x00);
+
+#ifndef _SIMU
+	msleep(100);
 #endif
-        dsc_cmd_send(2,0x29,0x00);
+	dsc_cmd_send(2,0x29,0x00);
 #ifndef _SIMU
-        msleep(100) ;
+	msleep(100) ;
 #endif
 };
 
@@ -834,19 +935,19 @@ void  dsc_cmd_send_4(int data1, int data2, int data3,int data4)
 {
 	int cmd_sts =0;
 	DsiRegWr(DIRECT_CMD_MAIN_SETTINGS_OFFSET,0x01043908); //[24] cmd_lp_en  =1    0x01043908
-															//[23:14] cmd_size  =cmd_size. 1 or 2   //write 4
-															//[13:8] cmd_head  =0x39
-															//[3 ] cmd_longnotshort  =0x1
-															//[2:0] cmd_nat : 3'b000:write command
-															//                3'b001:read command
-															//                3'b100:TE request
-															//                3'b101:trigger request
-															//                3'b110:BTA request
-															
+	//[23:14] cmd_size  =cmd_size. 1 or 2   //write 4
+	//[13:8] cmd_head  =0x39
+	//[3 ] cmd_longnotshort  =0x1
+	//[2:0] cmd_nat : 3'b000:write command
+	//                3'b001:read command
+	//                3'b100:TE request
+	//                3'b101:trigger request
+	//                3'b110:BTA request
+
 	DsiRegWr(DIRECT_CMD_WRDAT_OFFSET,((data4<<24) + (data3<<16) + (data2<<8) + data1));// DATA
 	DsiRegWr(DIRECT_CMD_SEND_OFFSET,0x00000); // cmd send
 	while((cmd_sts & 0x02 )!= 0x02)
-	{  
+	{
 		cmd_sts = DsiRegRd(DIRECT_CMD_STS_OFFSET);
 	}
 	DsiRegWr(DIRECT_CMD_STS_CLR_OFFSET,0x02); // clear write_completed
@@ -855,50 +956,50 @@ void  dsc_cmd_send_4(int data1, int data2, int data3,int data4)
 
 void dis_get_err_status(void)
 {
-        uint32_t dsi_err;
-        uint32_t dphy_err;
+	uint32_t dsi_err;
+	uint32_t dphy_err;
 
-        dsi_err = readl(CNDS_DSI_REG_START + 0x28);
-        k510_logci(" mctl_dphy_err is %x \n", dsi_err);
-/*
-        dsi_err = readl(CNDS_DSI_REG_START + 0x2c);
-        k510_logci(" mctl_lane_sts is %x \n", dsi_err);
+	dsi_err = readl(CNDS_DSI_REG_START + 0x28);
+	k510_logci(" mctl_dphy_err is %x \n", dsi_err);
+	/*
+	   dsi_err = readl(CNDS_DSI_REG_START + 0x2c);
+	   k510_logci(" mctl_lane_sts is %x \n", dsi_err);
 
-        dsi_err = readl(CNDS_DSI_REG_START + 0x24);
-        k510_logci(" mctl_main_sts is %x \n", dsi_err);
+	   dsi_err = readl(CNDS_DSI_REG_START + 0x24);
+	   k510_logci(" mctl_main_sts is %x \n", dsi_err);
 
-        dsi_err = readl(CNDS_DSI_REG_START + 0x78);
-        k510_logci(" cmd_mode_sts is %x \n", dsi_err);
+	   dsi_err = readl(CNDS_DSI_REG_START + 0x78);
+	   k510_logci(" cmd_mode_sts is %x \n", dsi_err);
 
-        dsi_err = readl(CNDS_DSI_REG_START + 0x04);
-        k510_logci("  mctl_main_data_ctl is %x \n", dsi_err);
+	   dsi_err = readl(CNDS_DSI_REG_START + 0x04);
+	   k510_logci("  mctl_main_data_ctl is %x \n", dsi_err);
 
-        dsi_err = readl(CNDS_DSI_REG_START + 0x88);
-        k510_logci("  direct_cmd_sts is %x \n", dsi_err);
+	   dsi_err = readl(CNDS_DSI_REG_START + 0x88);
+	   k510_logci("  direct_cmd_sts is %x \n", dsi_err);
 
-        dsi_err = readl(CNDS_DSI_REG_START + 0xa8);
-        k510_logci("  direct_cmd_rd_sts is %x \n", dsi_err);
+	   dsi_err = readl(CNDS_DSI_REG_START + 0xa8);
+	   k510_logci("  direct_cmd_rd_sts is %x \n", dsi_err);
 
-        dsi_err = readl(CNDS_DSI_REG_START + 0xf0);
-        k510_logci("  vid_mode_sts is %x \n", dsi_err);
- */
+	   dsi_err = readl(CNDS_DSI_REG_START + 0xf0);
+	   k510_logci("  vid_mode_sts is %x \n", dsi_err);
+	 */
 }
 
 
 void mipi_select_lan1()
 {
 
-    uint32_t wdata, rdata;
+	uint32_t wdata, rdata;
 
-    rdata = readl(VIDEO_TXDPHY_BASE_ADDR + 0x8);
-    //power-down mipi pll and reset pll
-    wdata = (rdata & 0xffe00000)
-                  | (1 << 19) /*lane0_sel */
-                  | (0 << 17) /*lane1_sel */
-                  | (2 << 15) /*lane2_sel */
-                  | (3 << 13) /*lane3_sel */;
-                    
-    writel(wdata, VIDEO_TXDPHY_BASE_ADDR + 0x8);
+	rdata = readl(VIDEO_TXDPHY_BASE_ADDR + 0x8);
+	//power-down mipi pll and reset pll
+	wdata = (rdata & 0xffe00000)
+		| (1 << 19) /*lane0_sel */
+		| (0 << 17) /*lane1_sel */
+		| (2 << 15) /*lane2_sel */
+		| (3 << 13) /*lane3_sel */;
+
+	writel(wdata, VIDEO_TXDPHY_BASE_ADDR + 0x8);
 
 }
 
@@ -906,53 +1007,53 @@ void mipi_select_lan1()
 void mipi_select_lan2()
 {
 
-    uint32_t wdata, rdata;
-    
-    rdata = readl(VIDEO_TXDPHY_BASE_ADDR + 0x8);
-    //power-down mipi pll and reset pll
-    wdata = (rdata & 0xffe00000)
-                  | (2 << 19) /*lane0_sel */
-                  | (1 << 17) /*lane1_sel */
-                  | (0 << 15) /*lane2_sel */
-                  | (3 << 13) /*lane3_sel */;
-                    
-    writel(wdata, VIDEO_TXDPHY_BASE_ADDR + 0x8);
+	uint32_t wdata, rdata;
+
+	rdata = readl(VIDEO_TXDPHY_BASE_ADDR + 0x8);
+	//power-down mipi pll and reset pll
+	wdata = (rdata & 0xffe00000)
+		| (2 << 19) /*lane0_sel */
+		| (1 << 17) /*lane1_sel */
+		| (0 << 15) /*lane2_sel */
+		| (3 << 13) /*lane3_sel */;
+
+	writel(wdata, VIDEO_TXDPHY_BASE_ADDR + 0x8);
 
 }
 
 void mipi_select_lan3()
 {
 
-    uint32_t wdata, rdata;
+	uint32_t wdata, rdata;
 
-    rdata = readl(VIDEO_TXDPHY_BASE_ADDR + 0x8);
-    //power-down mipi pll and reset pll
-    wdata = (rdata & 0xffe00000)
-                  | (3 << 19) /*lane0_sel */
-                  | (1 << 17) /*lane1_sel */
-                  | (2 << 15) /*lane2_sel */
-                  | (0 << 13) /*lane3_sel */;
-                    
-    writel(wdata, VIDEO_TXDPHY_BASE_ADDR + 0x8);
+	rdata = readl(VIDEO_TXDPHY_BASE_ADDR + 0x8);
+	//power-down mipi pll and reset pll
+	wdata = (rdata & 0xffe00000)
+		| (3 << 19) /*lane0_sel */
+		| (1 << 17) /*lane1_sel */
+		| (2 << 15) /*lane2_sel */
+		| (0 << 13) /*lane3_sel */;
+
+	writel(wdata, VIDEO_TXDPHY_BASE_ADDR + 0x8);
 
 }
 
 void ILI7807_lcd_init(void)
 {
-	dsc_cmd_send_4(0xFF, 0x78, 0x07, 0x01);			// write page 1	
-//        mipi_select_lan1();
+	dsc_cmd_send_4(0xFF, 0x78, 0x07, 0x01);			// write page 1
+	//        mipi_select_lan1();
 	dsc_cmd_send(2, 0x42, 0x11);
-//        mipi_select_lan2();
-//        while(1)
-//        {
- //               dis_get_err_status();
- //       }
-        
+	//        mipi_select_lan2();
+	//        while(1)
+	//        {
+	//               dis_get_err_status();
+	//       }
+
 
 
 	dsc_cmd_send(2, 0x43, 0xB2);		//VGH_CLP = 11.0V
- //       mipi_select_lan3();
- //       dsc_cmd_read(0x43);
+	//       mipi_select_lan3();
+	//       dsc_cmd_read(0x43);
 	dsc_cmd_send(2, 0x44, 0x94);		//VGL_CLP = -7.0V
 	dsc_cmd_send(2, 0x4A, 0x15);
 	dsc_cmd_send(2, 0x4B, 0x15);
@@ -964,7 +1065,7 @@ void ILI7807_lcd_init(void)
 	dsc_cmd_send(2, 0xA3, 0x22);		//VCOM1 = - 0.35V
 	dsc_cmd_send(2, 0xB3, 0x60);
 	dsc_cmd_send(2, 0xB4, 0x60);
-	
+
 	dsc_cmd_send_4(0xFF, 0x78, 0x07, 0x01);			// write page 1
 	dsc_cmd_send(2, 0x22, 0x06);
 	dsc_cmd_send(2, 0x36, 0x00);
@@ -972,15 +1073,15 @@ void ILI7807_lcd_init(void)
 	dsc_cmd_send(2, 0x64, 0x08);
 	dsc_cmd_send(2, 0x6C, 0x45);		//PRC & PRCB
 	dsc_cmd_send(2, 0x35, 0x22);
-	
+
 	dsc_cmd_send_4(0xFF, 0x78, 0x07, 0x07);			// write page 7
 	dsc_cmd_send(2, 0x37, 0x00);
 	dsc_cmd_send(2, 0x12, 0x22);
-	
+
 	dsc_cmd_send_4(0xFF, 0x78, 0x07, 0x08);			// write page 8 for GIP
 
 	dsc_cmd_send(2, 0x09, 0x0e);
-	
+
 	dsc_cmd_send_4(0xFF, 0x78, 0x07, 0x06);			// write page 8 for GIP
 	dsc_cmd_send(2, 0x00, 0x42);
 	dsc_cmd_send(2, 0x01, 0x04);
@@ -1051,7 +1152,7 @@ void ILI7807_lcd_init(void)
 	dsc_cmd_send(2, 0x6d, 0x29);
 	dsc_cmd_send(2, 0x6e, 0x2a);
 	dsc_cmd_send(2, 0x6f, 0x07);
-	
+
 	dsc_cmd_send(2, 0x70, 0x07);
 	dsc_cmd_send(2, 0x71, 0x22);
 	dsc_cmd_send(2, 0x72, 0x27);
@@ -1069,22 +1170,22 @@ void ILI7807_lcd_init(void)
 	dsc_cmd_send(2, 0x7e, 0x2a);
 	dsc_cmd_send(2, 0x7f, 0x07);
 	dsc_cmd_send(2, 0x80, 0x07);
-	
+
 	dsc_cmd_send(2, 0xd0, 0x01);
-	
+
 	dsc_cmd_send(2, 0xdb, 0x40);
 	dsc_cmd_send(2, 0xdc, 0x04);
 	dsc_cmd_send(2, 0xdd, 0x00);
-	
+
 	dsc_cmd_send(2, 0xa0, 0x13);
 	dsc_cmd_send(2, 0xa1, 0x00);
 	dsc_cmd_send(2, 0xa2, 0x05);
 	dsc_cmd_send(2, 0xa3, 0x20);
 	dsc_cmd_send(2, 0xa6, 0x00);
 	dsc_cmd_send(2, 0xa7, 0x00);
-	
+
 	dsc_cmd_send(2, 0x97, 0x22);
-	
+
 	dsc_cmd_send(2, 0xD1, 0x01);
 	dsc_cmd_send(2, 0xD2, 0x00);
 	dsc_cmd_send(2, 0xDF, 0x00);
@@ -1095,10 +1196,10 @@ void ILI7807_lcd_init(void)
 	dsc_cmd_send(2, 0xD8, 0x14);
 	dsc_cmd_send(2, 0xD9, 0x00);
 	dsc_cmd_send(2, 0xDA, 0x00);
-	
+
 	dsc_cmd_send(2, 0xB2, 0x00);
 	dsc_cmd_send(2, 0xB3, 0x00);
-	
+
 	dsc_cmd_send_4(0xFF, 0x78, 0x07, 0x02);	 //page 02
 	dsc_cmd_send(2, 0x00, 0x00);
 	dsc_cmd_send(2, 0x01, 0x30);
@@ -1160,7 +1261,7 @@ void ILI7807_lcd_init(void)
 	dsc_cmd_send(2, 0x39, 0xC4);
 	dsc_cmd_send(2, 0x3A, 0x03);
 	dsc_cmd_send(2, 0x3B, 0xD1);
-	
+
 	dsc_cmd_send(2, 0x3C, 0x00);
 	dsc_cmd_send(2, 0x3D, 0x30);
 	dsc_cmd_send(2, 0x3E, 0x00);
@@ -1221,12 +1322,12 @@ void ILI7807_lcd_init(void)
 	dsc_cmd_send(2, 0x75, 0xC4);
 	dsc_cmd_send(2, 0x76, 0x03);
 	dsc_cmd_send(2, 0x77, 0xD1);
-	
+
 	dsc_cmd_send(2, 0x78, 0x01);
 	dsc_cmd_send(2, 0x79, 0x01);
-	
-	dsc_cmd_send_4(0xFF, 0x78, 0x07, 0x03);	// page3 
-	dsc_cmd_send(2, 0x00, 0x00);	
+
+	dsc_cmd_send_4(0xFF, 0x78, 0x07, 0x03);	// page3
+	dsc_cmd_send(2, 0x00, 0x00);
 	dsc_cmd_send(2, 0x01, 0x30);
 	dsc_cmd_send(2, 0x02, 0x00);
 	dsc_cmd_send(2, 0x03, 0x4A);
@@ -1286,7 +1387,7 @@ void ILI7807_lcd_init(void)
 	dsc_cmd_send(2, 0x39, 0xC4);
 	dsc_cmd_send(2, 0x3A, 0x03);
 	dsc_cmd_send(2, 0x3B, 0xD1);
-	
+
 	dsc_cmd_send(2, 0x3C, 0x00);
 	dsc_cmd_send(2, 0x3D, 0x30);
 	dsc_cmd_send(2, 0x3E, 0x00);
@@ -1347,10 +1448,10 @@ void ILI7807_lcd_init(void)
 	dsc_cmd_send(2, 0x75, 0xC4);
 	dsc_cmd_send(2, 0x76, 0x03);
 	dsc_cmd_send(2, 0x77, 0xD1);
-	
+
 	dsc_cmd_send(2, 0x78, 0x01);
 	dsc_cmd_send(2, 0x79, 0x01);
-	
+
 	dsc_cmd_send_4(0xFF, 0x78, 0x07, 0x04); // pagetr for 04
 	dsc_cmd_send(2, 0x00, 0x00);
 	dsc_cmd_send(2, 0x01, 0x30);
@@ -1412,7 +1513,7 @@ void ILI7807_lcd_init(void)
 	dsc_cmd_send(2, 0x39, 0xC4);
 	dsc_cmd_send(2, 0x3A, 0x03);
 	dsc_cmd_send(2, 0x3B, 0xD1);
-	
+
 	dsc_cmd_send(2, 0x3C, 0x00);
 	dsc_cmd_send(2, 0x3D, 0x30);
 	dsc_cmd_send(2, 0x3E, 0x00);
@@ -1473,17 +1574,17 @@ void ILI7807_lcd_init(void)
 	dsc_cmd_send(2, 0x75, 0xC4);
 	dsc_cmd_send(2, 0x76, 0x03);
 	dsc_cmd_send(2, 0x77, 0xD1);
-	
+
 	dsc_cmd_send(2, 0x78, 0x01);
 	dsc_cmd_send(2, 0x79, 0x01);
-	
+
 	dsc_cmd_send_4(0xFF, 0x78, 0x07, 0x00);
-	
+
 	dsc_cmd_send(2, 0x11, 0x00);
 	msleep(150);
 	dsc_cmd_send(2, 0x29, 0x00);
 	msleep(50);
-		
+
 }
 #endif
 
@@ -1495,19 +1596,19 @@ void  dsc_cmd_send_3(int data1, int data2, int data3)
 {
 	int cmd_sts =0;
 	DsiRegWr(DIRECT_CMD_MAIN_SETTINGS_OFFSET,0x01033908); //[24] cmd_lp_en  =1                   0x01033908
-															//[23:14] cmd_size  =cmd_size. 1 or 2   //write 4
-															//[13:8] cmd_head  =0x39
-															//[3 ] cmd_longnotshort  =0x1
-															//[2:0] cmd_nat : 3'b000:write command
-															//                3'b001:read command
-															//                3'b100:TE request
-															//                3'b101:trigger request
-															//                3'b110:BTA request
-															
+	//[23:14] cmd_size  =cmd_size. 1 or 2   //write 4
+	//[13:8] cmd_head  =0x39
+	//[3 ] cmd_longnotshort  =0x1
+	//[2:0] cmd_nat : 3'b000:write command
+	//                3'b001:read command
+	//                3'b100:TE request
+	//                3'b101:trigger request
+	//                3'b110:BTA request
+
 	DsiRegWr(DIRECT_CMD_WRDAT_OFFSET,((data3<<16) + (data2<<8) + data1));// DATA
 	DsiRegWr(DIRECT_CMD_SEND_OFFSET,0x00000); // cmd send
 	while((cmd_sts & 0x02 )!= 0x02)
-	{  
+	{
 		cmd_sts = DsiRegRd(DIRECT_CMD_STS_OFFSET);
 	}
 	DsiRegWr(DIRECT_CMD_STS_CLR_OFFSET,0x02); // clear write_completed
@@ -1516,36 +1617,36 @@ void  dsc_cmd_send_3(int data1, int data2, int data3)
 #if 1
 void dsc_cmd_send_buff(uint8_t *buff, uint32_t len)
 {
-        uint32_t reg, val, val2;
-        int cmd_sts;
-        uint8_t i = 0;
-
-        reg = 0x01003908 | (len << 16);                 //0x01003908
-        DsiRegWr(DIRECT_CMD_MAIN_SETTINGS_OFFSET,reg); //[24] cmd_lp_en  =1    0x01043908
-                                                        //[23:14] cmd_size  cmd_size = len
-                                                        //[13:8] cmd_head  =0x39
-                                                        //[3 ] cmd_longnotshort  =0x1
-                                                        //[2:0] cmd_nat : 3'b000:write command
-                                                        //                3'b001:read command
-                                                        //                3'b100:TE request
-                                                        //                3'b101:trigger request
-                                                        //                3'b110:BTA request
-        val = len / 4;       
-        for(i = 0; i < val; i++)
-        {
-                DsiRegWr(DIRECT_CMD_WRDAT_OFFSET,((buff[(4 * i) + 3]<<24) + (buff[(4 * i) + 2]<<16) + (buff[(4 * i) + 1]<<8) + buff[(4 * i)]));// DATA  
-        }
-        val2 = len % 4;
-        if(val2 == 1)
-                DsiRegWr(DIRECT_CMD_WRDAT_OFFSET,buff[(4 * val)]);// DATA
-        else if(val2 == 2)
-                DsiRegWr(DIRECT_CMD_WRDAT_OFFSET,((buff[(4 * val) + 1]<<8) + buff[(4 * val)]));// DATA
-        else if(val2 == 3)
-                DsiRegWr(DIRECT_CMD_WRDAT_OFFSET,((buff[(4 * val) + 2]<<16) + (buff[(4 * val) + 1]<<8) + buff[(4 * val)]));// DATA
-
-        DsiRegWr(DIRECT_CMD_SEND_OFFSET,0x00000); // cmd send
+	uint32_t reg, val, val2;
+	int cmd_sts;
+	uint8_t i = 0;
+
+	reg = 0x01003908 | (len << 16);                 //0x01003908
+	DsiRegWr(DIRECT_CMD_MAIN_SETTINGS_OFFSET,reg); //[24] cmd_lp_en  =1    0x01043908
+	//[23:14] cmd_size  cmd_size = len
+	//[13:8] cmd_head  =0x39
+	//[3 ] cmd_longnotshort  =0x1
+	//[2:0] cmd_nat : 3'b000:write command
+	//                3'b001:read command
+	//                3'b100:TE request
+	//                3'b101:trigger request
+	//                3'b110:BTA request
+	val = len / 4;
+	for(i = 0; i < val; i++)
+	{
+		DsiRegWr(DIRECT_CMD_WRDAT_OFFSET,((buff[(4 * i) + 3]<<24) + (buff[(4 * i) + 2]<<16) + (buff[(4 * i) + 1]<<8) + buff[(4 * i)]));// DATA
+	}
+	val2 = len % 4;
+	if(val2 == 1)
+		DsiRegWr(DIRECT_CMD_WRDAT_OFFSET,buff[(4 * val)]);// DATA
+	else if(val2 == 2)
+		DsiRegWr(DIRECT_CMD_WRDAT_OFFSET,((buff[(4 * val) + 1]<<8) + buff[(4 * val)]));// DATA
+	else if(val2 == 3)
+		DsiRegWr(DIRECT_CMD_WRDAT_OFFSET,((buff[(4 * val) + 2]<<16) + (buff[(4 * val) + 1]<<8) + buff[(4 * val)]));// DATA
+
+	DsiRegWr(DIRECT_CMD_SEND_OFFSET,0x00000); // cmd send
 	while((cmd_sts & 0x02 )!= 0x02)
-	{  
+	{
 		cmd_sts = DsiRegRd(DIRECT_CMD_STS_OFFSET);
 	}
 	DsiRegWr(DIRECT_CMD_STS_CLR_OFFSET,0x02); // clear write_completed
@@ -1553,182 +1654,207 @@ void dsc_cmd_send_buff(uint8_t *buff, uint32_t len)
 #else
 void dsc_cmd_send_buff(uint8_t *buff, uint32_t len)
 {
-        uint32_t reg, val, val2;
-        int cmd_sts;
-        uint8_t i = 0;
-
-        reg = 0x01003908 | (len << 16);
-        DsiRegWr(DIRECT_CMD_MAIN_SETTINGS_OFFSET,reg); //[24] cmd_lp_en  =1    0x01043908
-                                                        //[23:14] cmd_size  cmd_size = len
-                                                        //[13:8] cmd_head  =0x39
-                                                        //[3 ] cmd_longnotshort  =0x1
-                                                        //[2:0] cmd_nat : 3'b000:write command
-                                                        //                3'b001:read command
-                                                        //                3'b100:TE request
-                                                        //                3'b101:trigger request
-                                                        //                3'b110:BTA request
-        val = len / 4;       
-        for(i = 0; i < val; i++)
-        {
-                DsiRegWr(DIRECT_CMD_WRDAT_OFFSET,((buff[(4 * i) ]<<24) + (buff[(4 * i) + 1]<<16) + (buff[(4 * i) + 2]<<8) + buff[(4 * i) + 3]));// DATA  
-        }
-        val2 = len % 4;
-        if(val2 == 1)
-                DsiRegWr(DIRECT_CMD_WRDAT_OFFSET,buff[(4 * val) + 1]);// DATA
-        else if(val2 == 2)
-                DsiRegWr(DIRECT_CMD_WRDAT_OFFSET,((buff[(4 * val) + 1]<<8) + buff[(4 * val) + 2]));// DATA
-        else if(val2 == 3)
-                DsiRegWr(DIRECT_CMD_WRDAT_OFFSET,((buff[(4 * val) +1]<<16) + (buff[(4 * val) + 2]<<8) + buff[(4 * val) + 3]));// DATA
-
-        DsiRegWr(DIRECT_CMD_SEND_OFFSET,0x00000); // cmd send
+	uint32_t reg, val, val2;
+	int cmd_sts;
+	uint8_t i = 0;
+
+	reg = 0x01003908 | (len << 16);
+	DsiRegWr(DIRECT_CMD_MAIN_SETTINGS_OFFSET,reg); //[24] cmd_lp_en  =1    0x01043908
+	//[23:14] cmd_size  cmd_size = len
+	//[13:8] cmd_head  =0x39
+	//[3 ] cmd_longnotshort  =0x1
+	//[2:0] cmd_nat : 3'b000:write command
+	//                3'b001:read command
+	//                3'b100:TE request
+	//                3'b101:trigger request
+	//                3'b110:BTA request
+	val = len / 4;
+	for(i = 0; i < val; i++)
+	{
+		DsiRegWr(DIRECT_CMD_WRDAT_OFFSET,((buff[(4 * i) ]<<24) + (buff[(4 * i) + 1]<<16) + (buff[(4 * i) + 2]<<8) + buff[(4 * i) + 3]));// DATA
+	}
+	val2 = len % 4;
+	if(val2 == 1)
+		DsiRegWr(DIRECT_CMD_WRDAT_OFFSET,buff[(4 * val) + 1]);// DATA
+	else if(val2 == 2)
+		DsiRegWr(DIRECT_CMD_WRDAT_OFFSET,((buff[(4 * val) + 1]<<8) + buff[(4 * val) + 2]));// DATA
+	else if(val2 == 3)
+		DsiRegWr(DIRECT_CMD_WRDAT_OFFSET,((buff[(4 * val) +1]<<16) + (buff[(4 * val) + 2]<<8) + buff[(4 * val) + 3]));// DATA
+
+	DsiRegWr(DIRECT_CMD_SEND_OFFSET,0x00000); // cmd send
 	while((cmd_sts & 0x02 )!= 0x02)
-	{  
-		cmd_sts = DsiRegRd(DIRECT_CMD_STS_OFFSET); 
+	{
+		cmd_sts = DsiRegRd(DIRECT_CMD_STS_OFFSET);
 	}
 	DsiRegWr(DIRECT_CMD_STS_CLR_OFFSET,0x02); // clear write_completed
-}        
+}
 #endif
 void dsc_cmd_send_short_pag(uint8_t val)
 {
-        uint8_t reg = 0;
-        int cmd_sts;
-
-       // reg = 0x01000500 | (val << 16);
-        DsiRegWr(DIRECT_CMD_MAIN_SETTINGS_OFFSET,0x01010500); //[24] cmd_lp_en  =1    0x01010500
-															//[23:14] cmd_size  =cmd_size. 1 or 2   //write 4
-															//[13:8] cmd_head  =0x39
-															//[3 ] cmd_longnotshort  =0x0  short pkg
-															//[2:0] cmd_nat : 3'b000:write command
-															//                3'b001:read command
-															//                3'b100:TE request
-															//                3'b101:trigger request
-															//                3'b110:BTA request
-        DsiRegWr(DIRECT_CMD_WRDAT_OFFSET,val);                         // DATA            ???                                    
-        
-        DsiRegWr(DIRECT_CMD_SEND_OFFSET,0x00000); // cmd send
+	uint8_t reg = 0;
+	int cmd_sts;
+
+	// reg = 0x01000500 | (val << 16);
+	DsiRegWr(DIRECT_CMD_MAIN_SETTINGS_OFFSET,0x01010500); //[24] cmd_lp_en  =1    0x01010500
+	//[23:14] cmd_size  =cmd_size. 1 or 2   //write 4
+	//[13:8] cmd_head  =0x39
+	//[3 ] cmd_longnotshort  =0x0  short pkg
+	//[2:0] cmd_nat : 3'b000:write command
+	//                3'b001:read command
+	//                3'b100:TE request
+	//                3'b101:trigger request
+	//                3'b110:BTA request
+	DsiRegWr(DIRECT_CMD_WRDAT_OFFSET,val);                         // DATA            ???
+
+	DsiRegWr(DIRECT_CMD_SEND_OFFSET,0x00000); // cmd send
 
 	while((cmd_sts & 0x02 )!= 0x02)
-	{  
+	{
 		cmd_sts = DsiRegRd(DIRECT_CMD_STS_OFFSET);
 	}
 	DsiRegWr(DIRECT_CMD_STS_CLR_OFFSET,0x02); // clear write_completed
 }
 
+void dsc_cmd_hs_send_short_pag(uint8_t val)
+{
+	uint8_t reg = 0;
+	int cmd_sts;
+
+	// reg = 0x01000500 | (val << 16);
+	DsiRegWr(DIRECT_CMD_MAIN_SETTINGS_OFFSET,0x00010500); //[24] cmd_lp_en  =1    0x01010500
+	//[23:14] cmd_size  =cmd_size. 1 or 2   //write 4
+	//[13:8] cmd_head  =0x39
+	//[3 ] cmd_longnotshort  =0x0  short pkg
+	//[2:0] cmd_nat : 3'b000:write command
+	//                3'b001:read command
+	//                3'b100:TE request
+	//                3'b101:trigger request
+	//                3'b110:BTA request
+	DsiRegWr(DIRECT_CMD_WRDAT_OFFSET,val);                         // DATA            ???
+
+	DsiRegWr(DIRECT_CMD_SEND_OFFSET,0x00000); // cmd send
+
+	while((cmd_sts & 0x02 )!= 0x02)
+	{
+		cmd_sts = DsiRegRd(DIRECT_CMD_STS_OFFSET);
+	}
+	DsiRegWr(DIRECT_CMD_STS_CLR_OFFSET,0x02); // clear write_completed
+}
 
 void  dsc_cmd_send_37(uint8_t val)
 {
-        int cmd_sts =0;
-
-
-        DsiRegWr(DIRECT_CMD_MAIN_SETTINGS_OFFSET,0x01013700); //[24] cmd_lp_en  =1              0x01023908
-                                                                //[23:14] cmd_size  =cmd_size. 1 or 2
-                                                                //[13:8] cmd_head  =0x39
-                                                                //[3 ] cmd_longnotshort  =0x1
-                                                                //[2:0] cmd_nat : 3'b000:write command
-                                                                //                3'b001:read command
-                                                                //                3'b100:TE request
-                                                                //                3'b101:trigger request
-                                                                //                3'b110:BTA request
-         DsiRegWr(DIRECT_CMD_WRDAT_OFFSET,val);                         // DATA            ???  
-        DsiRegWr(DIRECT_CMD_SEND_OFFSET,0x00000); // cmd send
-        while((cmd_sts & 0x02 )!= 0x02)
-        {  
-                cmd_sts = DsiRegRd(DIRECT_CMD_STS_OFFSET);              
-        }
-        DsiRegWr(DIRECT_CMD_STS_CLR_OFFSET,0x02); // clear write_completed
+	int cmd_sts =0;
+
+
+	DsiRegWr(DIRECT_CMD_MAIN_SETTINGS_OFFSET,0x01013700); //[24] cmd_lp_en  =1              0x01023908
+	//[23:14] cmd_size  =cmd_size. 1 or 2
+	//[13:8] cmd_head  =0x39
+	//[3 ] cmd_longnotshort  =0x1
+	//[2:0] cmd_nat : 3'b000:write command
+	//                3'b001:read command
+	//                3'b100:TE request
+	//                3'b101:trigger request
+	//                3'b110:BTA request
+	DsiRegWr(DIRECT_CMD_WRDAT_OFFSET,val);                         // DATA            ???
+	DsiRegWr(DIRECT_CMD_SEND_OFFSET,0x00000); // cmd send
+	while((cmd_sts & 0x02 )!= 0x02)
+	{
+		cmd_sts = DsiRegRd(DIRECT_CMD_STS_OFFSET);
+	}
+	DsiRegWr(DIRECT_CMD_STS_CLR_OFFSET,0x02); // clear write_completed
 
 
 }
 
 void hx8399_c_read_data(uint32_t addr, uint32_t len)
 {
-        int cmd_sts =0;
-        int data = 0;
-        int size;
-        int err;
-        int reg = 0;
-        int i = 0;
-        int cut = 0;
-
-        DsiRegWr(DIRECT_CMD_STS_CLR_OFFSET,0xffffffff);
-        DsiRegWr(DIRECT_CMD_RD_STS_CLR_OFFSET, 0xffffffff);
-
-        
-
-        reg = 0x01000601 | (1 << 16);
-        DsiRegWr(DIRECT_CMD_MAIN_SETTINGS_OFFSET,reg);                   //[24] cmd_lp_en  =1            0x01010601          0x01020501
-                                                                        //[23:16] cmd_size  =cmd_size. 1 or 2                   
-                                                                        //[14:15] cmd_type  0 write  1 read                     1           
-                                                                        //[13:8] cmd_head  =0x5                                 6            
-                                                                        //[3 ] cmd_longnotshort  =0x1                           1
-                                                                        //[2:0] cmd_nat : 3'b000:write command                  01
-                                                                        //                3'b001:read command
-                                                                        //                3'b100:TE request
-                                                                        //                3'b101:trigger request
-                                                                        //                3'b110:BTA request   
-        
-        DsiRegWr(DIRECT_CMD_WRDAT_OFFSET, addr);
-        DsiRegWr(DIRECT_CMD_SEND_OFFSET,0xffffffff); // cmd send   
-
-        while((cmd_sts & 0x08 )!= 0x08)                                 //wait read success
-        {  
-                cmd_sts = DsiRegRd(DIRECT_CMD_STS_OFFSET);              
-        }
-
-        err = DsiRegRd(DIRECT_CMD_RD_STS_OFFSET);                   //read err
-        size = DsiRegRd(DIRECT_CMD_RD_PROPERTY_OFFSET);             // read size [16 - 23]   
-//        data = DsiRegRd(DIRECT_CMD_RDDAT_OFFSET);                   //read data 
-
-        k510_logci("addr is %x err is 0x%8x, size is 0x%8x, \n", addr, err, size);
-
-        for(i = 0; i < len / 4; i++)
-        {
-                data = DsiRegRd(DIRECT_CMD_RDDAT_OFFSET);                   //read data 
-                k510_logci("i is %d addr is %x ,  data is 0x%8x \n" ,i, addr, data);
-        }
-        if((len % 4) != 0)
-        {
-                data = DsiRegRd(DIRECT_CMD_RDDAT_OFFSET);                   //read data 
-                k510_logci("addr is %x ,  data is 0x%8x \n", addr, data);
-        }
-        k510_logci("\n");
-//        k510_logci("addr is %x err is 0x%8x, size is 0x%8x, data is 0x%8x \n", addr, err, size, data);
+	int cmd_sts =0;
+	int data = 0;
+	int size;
+	int err;
+	int reg = 0;
+	int i = 0;
+	int cut = 0;
+
+	DsiRegWr(DIRECT_CMD_STS_CLR_OFFSET,0xffffffff);
+	DsiRegWr(DIRECT_CMD_RD_STS_CLR_OFFSET, 0xffffffff);
+
+
+
+	reg = 0x01000601 | (1 << 16);
+	DsiRegWr(DIRECT_CMD_MAIN_SETTINGS_OFFSET,reg);                   //[24] cmd_lp_en  =1            0x01010601          0x01020501
+	//[23:16] cmd_size  =cmd_size. 1 or 2
+	//[14:15] cmd_type  0 write  1 read                     1
+	//[13:8] cmd_head  =0x5                                 6
+	//[3 ] cmd_longnotshort  =0x1                           1
+	//[2:0] cmd_nat : 3'b000:write command                  01
+	//                3'b001:read command
+	//                3'b100:TE request
+	//                3'b101:trigger request
+	//                3'b110:BTA request
+
+	DsiRegWr(DIRECT_CMD_WRDAT_OFFSET, addr);
+	DsiRegWr(DIRECT_CMD_SEND_OFFSET,0xffffffff); // cmd send
+
+	while((cmd_sts & 0x08 )!= 0x08)                                 //wait read success
+	{
+		cmd_sts = DsiRegRd(DIRECT_CMD_STS_OFFSET);
+	}
+
+	err = DsiRegRd(DIRECT_CMD_RD_STS_OFFSET);                   //read err
+	size = DsiRegRd(DIRECT_CMD_RD_PROPERTY_OFFSET);             // read size [16 - 23]
+	//        data = DsiRegRd(DIRECT_CMD_RDDAT_OFFSET);                   //read data
+
+	k510_logci("addr is %x err is 0x%8x, size is 0x%8x, \n", addr, err, size);
+
+	for(i = 0; i < len / 4; i++)
+	{
+		data = DsiRegRd(DIRECT_CMD_RDDAT_OFFSET);                   //read data
+		k510_logci("i is %d addr is %x ,  data is 0x%8x \n" ,i, addr, data);
+	}
+	if((len % 4) != 0)
+	{
+		data = DsiRegRd(DIRECT_CMD_RDDAT_OFFSET);                   //read data
+		k510_logci("addr is %x ,  data is 0x%8x \n", addr, data);
+	}
+	k510_logci("\n");
+	//        k510_logci("addr is %x err is 0x%8x, size is 0x%8x, data is 0x%8x \n", addr, err, size, data);
 }
 
 int32_t hx8399_read_id(void)
 {
-        int32_t reg;
-        int32_t cmd_sts = 0;
-        int32_t err;
-        int32_t size;
-        int32_t id;
-        int32_t retry = 5;
-
-        dsc_cmd_send_37(3);
-
-        DsiRegWr(DIRECT_CMD_STS_CLR_OFFSET, 0xffffffff);
-        DsiRegWr(DIRECT_CMD_RD_STS_CLR_OFFSET, 0xffffffff);
-        DsiRegWr(DIRECT_CMD_FIFO_RST_OFFSET, 0xffffffff);
-
-        reg = 0x01000601 | (1 << 16);
-        DsiRegWr(DIRECT_CMD_MAIN_SETTINGS_OFFSET, reg);
-        DsiRegWr(DIRECT_CMD_WRDAT_OFFSET, 0x04);
-        DsiRegWr(DIRECT_CMD_SEND_OFFSET, 0xffffffff);
-
-        while ((cmd_sts & 0x08) != 0x08) {
-            usleep(1000);
-            retry--;
-            cmd_sts = DsiRegRd(DIRECT_CMD_STS_OFFSET);
-            if (retry == 0)
-                return -1;
-        }
-
-        err = DsiRegRd(DIRECT_CMD_RD_STS_OFFSET);
-        size = DsiRegRd(DIRECT_CMD_RD_PROPERTY_OFFSET);
-        id = DsiRegRd(DIRECT_CMD_RDDAT_OFFSET);
-        printf("lcd_id [%02x]\n", id);
-
-        return id;
+	int32_t reg;
+	int32_t cmd_sts = 0;
+	int32_t err;
+	int32_t size;
+	int32_t id;
+	int32_t retry = 5;
+
+	dsc_cmd_send_37(3);
+
+	DsiRegWr(DIRECT_CMD_STS_CLR_OFFSET, 0xffffffff);
+	DsiRegWr(DIRECT_CMD_RD_STS_CLR_OFFSET, 0xffffffff);
+	DsiRegWr(DIRECT_CMD_FIFO_RST_OFFSET, 0xffffffff);
+
+	reg = 0x01000601 | (1 << 16);
+	DsiRegWr(DIRECT_CMD_MAIN_SETTINGS_OFFSET, reg);
+	DsiRegWr(DIRECT_CMD_WRDAT_OFFSET, 0x04);
+	DsiRegWr(DIRECT_CMD_SEND_OFFSET, 0xffffffff);
+
+	while ((cmd_sts & 0x08) != 0x08) {
+		usleep(1000);
+		retry--;
+		cmd_sts = DsiRegRd(DIRECT_CMD_STS_OFFSET);
+		if (retry == 0)
+			return -1;
+	}
+
+	err = DsiRegRd(DIRECT_CMD_RD_STS_OFFSET);
+	size = DsiRegRd(DIRECT_CMD_RD_PROPERTY_OFFSET);
+	id = DsiRegRd(DIRECT_CMD_RDDAT_OFFSET);
+	printf("lcd_id [%02x]\n", id);
+
+	return id;
 }
 
 void hx8399_v2_init(void)
@@ -1788,168 +1914,168 @@ void hx8399_v2_init(void)
 	dsc_cmd_send_buff(param22, sizeof(param22));
 	msleep(2);
 
-        dsc_cmd_send_short_pag(0x11);
-        msleep(300);
-        dsc_cmd_send_short_pag(0x29);
-        msleep(100);
+	dsc_cmd_send_short_pag(0x11);
+	msleep(300);
+	dsc_cmd_send_short_pag(0x29);
+	msleep(100);
 }
 
 void hx8399_c_init(void)
 {
-        uint8_t pag1[5] = {0xB9, 0xFF, 0x83, 0x99};                    
-        uint8_t pag2[20] = {0xB1, 0x02, 0x04, 0x70, 0x90, 0x01, 0x32, 0x33, 0x11, 0x11, 0x4D, 0x57, 0x56, 0x73, 0x02, 0x02};           // 0x10
-        uint8_t pag3[20] = {0xB2, 0x00, 0x80, 0x80, 0xAE, 0x05, 0x07, 0x5A, 0x11, 0x10, 0x10, 0x00};                     // 0c
-  //      uint8_t pag3[20] = {0xB2, 0x00, 0x80, 0x80, 0xAE, 0x05, 0x00, 0x5A, 0x11, 0x10, 0x10, 0x00};                     // 0c  0x3b- > 0b  03
-
-        uint8_t pag4[50] = {0xB4, 0x00, 0xFF, 0x04, 0x08, 0x0C, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x02, 0x00, 0x24, 0x02, 0x04, 0x09, 0x21, 0x03, 0x00, 0x00, 0x0A, 0x90, 0x88, 0x04, 0x08, 0x0C, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x02, 0x00, 0x24, 0x02, 0x04, 0x08, 0x00, 0x00, 0x02, 0x88, 0x00, 0x08};
-        uint8_t pag5[50] = {0xD3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x32, 0x10, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x00, 0x05, 0x05, 0x13, 0x00, 0x00, 0x00, 0x05, 0x40, 0x00, 0x00, 0x00, 0x05, 0x20, 0x80};
-        uint8_t pag6[50] = {0xD5, 0x00, 0x00, 0x21, 0x20, 0x19, 0x19, 0x18, 0x18, 0x00, 0x00, 0x01, 0x00, 0x18, 0x18, 0x03, 0x02, 0x19, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x31, 0x30, 0x30, 0x2F, 0x2F};
-        uint8_t pag7[50] = {0xD6, 0x40, 0x40, 0x20, 0x21, 0x18, 0x18, 0x19, 0x19, 0x40, 0x40, 0x02, 0x03, 0x18, 0x18, 0x00, 0x01, 0x19, 0x19, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x31, 0x31, 0x30, 0x30, 0x2F, 0x2F};
-        uint8_t pag8[20] = {0xD8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
-        uint8_t pag9[5] = {0xBD, 0x01};
-        uint8_t pag10[20] = {0xD8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
-        uint8_t pag11[5] = {0xBD, 0x02};
-        uint8_t pag12[20] = {0xD8, 0xAA, 0xAE, 0xEA, 0xAA, 0xAA, 0xAE, 0xEA, 0xAA};
-        uint8_t pag13[5] = {0xBD, 0x00};
-        uint8_t pag14[60] = {0xE0, 0x01, 0x15, 0x22, 0x1E, 0x46, 0x51, 0x5E, 0x5A, 0x63, 0x6A, 0x71, 0x76, 0x7B, 0x82, 0x88, 0x8D, 0x92, 0x9C, 0xA0, 0xAB, 0xA2, 0xB5, 0xBD, 0x63, 0x61, 0x6E, 0x7A, 0x01, 0x15, 0x22, 0x1E, 0x46, 0x51, 0x5E, 0x5A, 0x63, 0x6A, 0x71, 0x76, 0x7B, 0x82, 0x89, 0x8E, 0x92, 0x9C, 0xA0, 0xAB, 0xA2, 0xB5, 0xBD, 0x63, 0x61, 0x6E, 0x7A};
-        uint8_t pag15[5] = {0xC0, 0x25, 0x5A};
-        uint8_t pag16[5] = {0xB6, 0x91, 0x91};
-        uint8_t pag17[50] = {0xD2, 0x66};
-        uint8_t pag18[50] = {0xCC, 0x08};
-        uint8_t pag19[50] = {0x36, 0x08};
-
- //       uint8_t pag20[50] = {0xB2, 0x0b, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44};               // 蓝色
- //       uint8_t pag20[50] = {0xB2, 0x0b, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33};               // green  ok
- //       uint8_t pag20[50] = {0xB2, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};               //白色   ok
-
-//       uint8_t pag20[50] = {0xB2, 0x0b, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77};               // Color Bar  ok
-
-        uint8_t pag20[50] = {0xB2, 0x0b, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22};                // red
-
- //       uint8_t pag20[50] = {0xB2, 0x0b, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb};               // Cross-Talk: black square in white pattern
- //       uint8_t pag20[50] = {0xB2, 0x0b, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa};               // ross-Talk: white square in black pattern
-
- //        uint8_t pag20[50] = {0xB2, 0x0b, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88};               // H-Grayscale Gradation
- //        uint8_t pag20[50] = {0xB2, 0x0b, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99};               // V-Grayscale Gradation
-
-//        uint8_t pag20[50] = {0xB2, 0x0b, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc};               // Dot Checker: 2x2
-//        uint8_t pag20[50] = {0xB2, 0x0b, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd};               // Dot Checker: 1 * 1
-//        uint8_t pag20[50] = {0xB2, 0x0b, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11};               // heisie
-
-        // liange short pag
-        //05 11 00 XX
-        // 05 29 00 XX
-
-
-        dsc_cmd_send_buff(pag1, 4);                             // access the extension commands.
-        msleep(2);
-        dsc_cmd_send_buff(pag2, 16);          //Set power related register
-        msleep(2);
-        dsc_cmd_send_buff(pag3, 12);          // Set display related register
-        msleep(2);
-        dsc_cmd_send_buff(pag4, 46);
-        msleep(2);
-        dsc_cmd_send_buff(pag5, 40);     
-        msleep(2);                            
-        dsc_cmd_send_buff(pag6, 33);
-        msleep(2);
-        dsc_cmd_send_buff(pag7, 33);
-        msleep(2);
-        dsc_cmd_send_buff(pag8, 17);        
-        msleep(2);            
-        dsc_cmd_send(2, 0xBD, 0x01);
-
-//        dsc_cmd_send(2, 0xb2, 0xc8);
-//        dsc_cmd_send_buff(pag20, 10);                   // test  mode
-
-        dsc_cmd_send_buff(pag10, 17);
-        msleep(2);
-        dsc_cmd_send(2, 0xBD, 0x02);
-        msleep(2);
-        dsc_cmd_send_buff(pag12, 9);
-        msleep(2);
-        dsc_cmd_send(2, 0xBD, 0x00);
-        msleep(2);
-        dsc_cmd_send_buff(pag14, 55);
-        msleep(2);
-//        dsc_cmd_send_3(0xC0, 0x25, 0x5A);
-        dsc_cmd_send_buff(pag15, 3);
-        msleep(2);
-        dsc_cmd_send_buff(pag16, 3);
-//        dsc_cmd_send_3(0xB6, 0x91, 0x91);
-        msleep(2);
-//        dsc_cmd_send_3(0xB6, 0x61, 0x03);                       // set 2 lan
-
-        dsc_cmd_send(2, 0xD2, 0x66);
-        msleep(2);
-        dsc_cmd_send(2, 0xCC, 0x00);
-        msleep(2);            
-        dsc_cmd_send(2, 0x36, 0x01);
-        msleep(2);
-
-        dsc_cmd_send_short_pag(0x11);
-        msleep(300);
-        dsc_cmd_send_short_pag(0x29);
-        msleep(100);
+	uint8_t pag1[5] = {0xB9, 0xFF, 0x83, 0x99};
+	uint8_t pag2[20] = {0xB1, 0x02, 0x04, 0x70, 0x90, 0x01, 0x32, 0x33, 0x11, 0x11, 0x4D, 0x57, 0x56, 0x73, 0x02, 0x02};           // 0x10
+	uint8_t pag3[20] = {0xB2, 0x00, 0x80, 0x80, 0xAE, 0x05, 0x07, 0x5A, 0x11, 0x10, 0x10, 0x00};                     // 0c
+	//      uint8_t pag3[20] = {0xB2, 0x00, 0x80, 0x80, 0xAE, 0x05, 0x00, 0x5A, 0x11, 0x10, 0x10, 0x00};                     // 0c  0x3b- > 0b  03
+
+	uint8_t pag4[50] = {0xB4, 0x00, 0xFF, 0x04, 0x08, 0x0C, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x02, 0x00, 0x24, 0x02, 0x04, 0x09, 0x21, 0x03, 0x00, 0x00, 0x0A, 0x90, 0x88, 0x04, 0x08, 0x0C, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x02, 0x00, 0x24, 0x02, 0x04, 0x08, 0x00, 0x00, 0x02, 0x88, 0x00, 0x08};
+	uint8_t pag5[50] = {0xD3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x32, 0x10, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x00, 0x05, 0x05, 0x13, 0x00, 0x00, 0x00, 0x05, 0x40, 0x00, 0x00, 0x00, 0x05, 0x20, 0x80};
+	uint8_t pag6[50] = {0xD5, 0x00, 0x00, 0x21, 0x20, 0x19, 0x19, 0x18, 0x18, 0x00, 0x00, 0x01, 0x00, 0x18, 0x18, 0x03, 0x02, 0x19, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x31, 0x30, 0x30, 0x2F, 0x2F};
+	uint8_t pag7[50] = {0xD6, 0x40, 0x40, 0x20, 0x21, 0x18, 0x18, 0x19, 0x19, 0x40, 0x40, 0x02, 0x03, 0x18, 0x18, 0x00, 0x01, 0x19, 0x19, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x31, 0x31, 0x30, 0x30, 0x2F, 0x2F};
+	uint8_t pag8[20] = {0xD8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
+	uint8_t pag9[5] = {0xBD, 0x01};
+	uint8_t pag10[20] = {0xD8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
+	uint8_t pag11[5] = {0xBD, 0x02};
+	uint8_t pag12[20] = {0xD8, 0xAA, 0xAE, 0xEA, 0xAA, 0xAA, 0xAE, 0xEA, 0xAA};
+	uint8_t pag13[5] = {0xBD, 0x00};
+	uint8_t pag14[60] = {0xE0, 0x01, 0x15, 0x22, 0x1E, 0x46, 0x51, 0x5E, 0x5A, 0x63, 0x6A, 0x71, 0x76, 0x7B, 0x82, 0x88, 0x8D, 0x92, 0x9C, 0xA0, 0xAB, 0xA2, 0xB5, 0xBD, 0x63, 0x61, 0x6E, 0x7A, 0x01, 0x15, 0x22, 0x1E, 0x46, 0x51, 0x5E, 0x5A, 0x63, 0x6A, 0x71, 0x76, 0x7B, 0x82, 0x89, 0x8E, 0x92, 0x9C, 0xA0, 0xAB, 0xA2, 0xB5, 0xBD, 0x63, 0x61, 0x6E, 0x7A};
+	uint8_t pag15[5] = {0xC0, 0x25, 0x5A};
+	uint8_t pag16[5] = {0xB6, 0x91, 0x91};
+	uint8_t pag17[50] = {0xD2, 0x66};
+	uint8_t pag18[50] = {0xCC, 0x08};
+	uint8_t pag19[50] = {0x36, 0x08};
+
+	//       uint8_t pag20[50] = {0xB2, 0x0b, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44};               // 蓝色
+	//       uint8_t pag20[50] = {0xB2, 0x0b, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33};               // green  ok
+	//       uint8_t pag20[50] = {0xB2, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};               //白色   ok
+
+	//       uint8_t pag20[50] = {0xB2, 0x0b, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77};               // Color Bar  ok
+
+	uint8_t pag20[50] = {0xB2, 0x0b, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22};                // red
+
+	//       uint8_t pag20[50] = {0xB2, 0x0b, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb};               // Cross-Talk: black square in white pattern
+	//       uint8_t pag20[50] = {0xB2, 0x0b, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa};               // ross-Talk: white square in black pattern
+
+	//        uint8_t pag20[50] = {0xB2, 0x0b, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88};               // H-Grayscale Gradation
+	//        uint8_t pag20[50] = {0xB2, 0x0b, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99};               // V-Grayscale Gradation
+
+	//        uint8_t pag20[50] = {0xB2, 0x0b, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc};               // Dot Checker: 2x2
+	//        uint8_t pag20[50] = {0xB2, 0x0b, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd};               // Dot Checker: 1 * 1
+	//        uint8_t pag20[50] = {0xB2, 0x0b, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11};               // heisie
+
+	// liange short pag
+	//05 11 00 XX
+	// 05 29 00 XX
+
+
+	dsc_cmd_send_buff(pag1, 4);                             // access the extension commands.
+	msleep(2);
+	dsc_cmd_send_buff(pag2, 16);          //Set power related register
+	msleep(2);
+	dsc_cmd_send_buff(pag3, 12);          // Set display related register
+	msleep(2);
+	dsc_cmd_send_buff(pag4, 46);
+	msleep(2);
+	dsc_cmd_send_buff(pag5, 40);
+	msleep(2);
+	dsc_cmd_send_buff(pag6, 33);
+	msleep(2);
+	dsc_cmd_send_buff(pag7, 33);
+	msleep(2);
+	dsc_cmd_send_buff(pag8, 17);
+	msleep(2);
+	dsc_cmd_send(2, 0xBD, 0x01);
 
-/*
-        hx8399_c_read_data(0x06, 1);
-        hx8399_c_read_data(0x07, 1);
-        hx8399_c_read_data(0x08, 1);
-        hx8399_c_read_data(0x09, 1);
-        hx8399_c_read_data(0x0a, 1);
-        hx8399_c_read_data(0x0b, 1);
-        hx8399_c_read_data(0x0f, 1);
-        hx8399_c_read_data(0x0d, 1);
-        hx8399_c_read_data(0x0c, 1);
-*/
-
-#if 0     
-        dsc_cmd_send_37(4);                            // set read data len     
-        hx8399_c_read_data(0xB9, 4);
-        
-        dsc_cmd_send_37(16);                            // set read data len 
-        hx8399_c_read_data(0xB1, 16);
-
-        dsc_cmd_send_37(12);                            // set read data len           多个1f
-        hx8399_c_read_data(0xB2, 11);
- #endif
+	//        dsc_cmd_send(2, 0xb2, 0xc8);
+	//        dsc_cmd_send_buff(pag20, 10);                   // test  mode
 
-/*
-        dsc_cmd_send_37(46);                            // set read data len 
-        hx8399_c_read_data(0xB4, 46);
+	dsc_cmd_send_buff(pag10, 17);
+	msleep(2);
+	dsc_cmd_send(2, 0xBD, 0x02);
+	msleep(2);
+	dsc_cmd_send_buff(pag12, 9);
+	msleep(2);
+	dsc_cmd_send(2, 0xBD, 0x00);
+	msleep(2);
+	dsc_cmd_send_buff(pag14, 55);
+	msleep(2);
+	//        dsc_cmd_send_3(0xC0, 0x25, 0x5A);
+	dsc_cmd_send_buff(pag15, 3);
+	msleep(2);
+	dsc_cmd_send_buff(pag16, 3);
+	//        dsc_cmd_send_3(0xB6, 0x91, 0x91);
+	msleep(2);
+	//        dsc_cmd_send_3(0xB6, 0x61, 0x03);                       // set 2 lan
 
-        dsc_cmd_send_37(40);                            // set read data len 
-        hx8399_c_read_data(0xd3, 40);
+	dsc_cmd_send(2, 0xD2, 0x66);
+	msleep(2);
+	dsc_cmd_send(2, 0xCC, 0x00);
+	msleep(2);
+	dsc_cmd_send(2, 0x36, 0x01);
+	msleep(2);
 
-        dsc_cmd_send_37(33);                            // set read data len 
-        hx8399_c_read_data(0xd5, 33);
+	dsc_cmd_send_short_pag(0x11);
+	msleep(300);
+	dsc_cmd_send_short_pag(0x29);
+	msleep(100);
+
+	/*
+	   hx8399_c_read_data(0x06, 1);
+	   hx8399_c_read_data(0x07, 1);
+	   hx8399_c_read_data(0x08, 1);
+	   hx8399_c_read_data(0x09, 1);
+	   hx8399_c_read_data(0x0a, 1);
+	   hx8399_c_read_data(0x0b, 1);
+	   hx8399_c_read_data(0x0f, 1);
+	   hx8399_c_read_data(0x0d, 1);
+	   hx8399_c_read_data(0x0c, 1);
+	 */
 
-        dsc_cmd_send_37(33);                            // set read data len 
-        hx8399_c_read_data(0xd6, 33);
+#if 0
+	dsc_cmd_send_37(4);                            // set read data len
+	hx8399_c_read_data(0xB9, 4);
 
-        dsc_cmd_send_37(17);                            // set read data len 
-        hx8399_c_read_data(0xd8, 17);
-*/
-/*
-        dsc_cmd_send_37(55);                            // set read data len 
-        hx8399_c_read_data(0xe0, 55);
+	dsc_cmd_send_37(16);                            // set read data len
+	hx8399_c_read_data(0xB1, 16);
+
+	dsc_cmd_send_37(12);                            // set read data len           多个1f
+	hx8399_c_read_data(0xB2, 11);
+#endif
+
+	/*
+	   dsc_cmd_send_37(46);                            // set read data len
+	   hx8399_c_read_data(0xB4, 46);
+
+	   dsc_cmd_send_37(40);                            // set read data len
+	   hx8399_c_read_data(0xd3, 40);
+
+	   dsc_cmd_send_37(33);                            // set read data len
+	   hx8399_c_read_data(0xd5, 33);
+
+	   dsc_cmd_send_37(33);                            // set read data len
+	   hx8399_c_read_data(0xd6, 33);
 
-        dsc_cmd_send_37(4);                            // set read data len 
-        hx8399_c_read_data(0xc0, 3);
+	   dsc_cmd_send_37(17);                            // set read data len
+	   hx8399_c_read_data(0xd8, 17);
+	 */
+	/*
+	   dsc_cmd_send_37(55);                            // set read data len
+	   hx8399_c_read_data(0xe0, 55);
 
-        dsc_cmd_send_37(4);                            // set read data len 
-        hx8399_c_read_data(0xb6, 3);
+	   dsc_cmd_send_37(4);                            // set read data len
+	   hx8399_c_read_data(0xc0, 3);
 
-        dsc_cmd_send_37(4);                            // set read data len 
-        hx8399_c_read_data(0xd2, 2);
+	   dsc_cmd_send_37(4);                            // set read data len
+	   hx8399_c_read_data(0xb6, 3);
 
-        dsc_cmd_send_37(4);                            // set read data len 
-        hx8399_c_read_data(0xcc, 2);
+	   dsc_cmd_send_37(4);                            // set read data len
+	   hx8399_c_read_data(0xd2, 2);
 
-        dsc_cmd_send_37(4);                            // set read data len 
-        hx8399_c_read_data(0x36, 2);
-*/
+	   dsc_cmd_send_37(4);                            // set read data len
+	   hx8399_c_read_data(0xcc, 2);
+
+	   dsc_cmd_send_37(4);                            // set read data len
+	   hx8399_c_read_data(0x36, 2);
+	 */
 }
 
 #endif
@@ -1957,787 +2083,785 @@ void hx8399_c_init(void)
 
 void test(void)
 {
-        int i = 0;
-        uint32_t reg = 0;
-        uint32_t wdata;
-        int cmd_sts =0;
+	int i = 0;
+	uint32_t reg = 0;
+	uint32_t wdata;
+	int cmd_sts =0;
 #if 1
-//        sysctl_reset(SYSCTL_RESET_DSI);
+	//        sysctl_reset(SYSCTL_RESET_DSI);
 
-        /*****************reset d-phy*****************/
+	/*****************reset d-phy*****************/
 #if 1
-        sleep(1);
-        DsiRegWr(MCTL_DPHY_CFG0_OFFSET,0xf0600);                // dsi reset dphy
+	sleep(1);
+	DsiRegWr(MCTL_DPHY_CFG0_OFFSET,0xf0600);                // dsi reset dphy
 
-        wdata = 0xda036000;                                     // set d-phy
-        writel(wdata, VIDEO_TXDPHY_BASE_ADDR + 0x8);
+	wdata = 0xda036000;                                     // set d-phy
+	writel(wdata, VIDEO_TXDPHY_BASE_ADDR + 0x8);
 
-        wdata = 0x3b01e;                                        // set d-phy
-        writel(wdata, VIDEO_TXDPHY_BASE_ADDR + 0x4);
+	wdata = 0x3b01e;                                        // set d-phy
+	writel(wdata, VIDEO_TXDPHY_BASE_ADDR + 0x4);
 
-        wdata = 0x9a036000;                                     // set d-phy
-        writel(wdata, VIDEO_TXDPHY_BASE_ADDR + 0x8);            //0x92718000
+	wdata = 0x9a036000;                                     // set d-phy
+	writel(wdata, VIDEO_TXDPHY_BASE_ADDR + 0x8);            //0x92718000
 
-#if 0        
-        while((cmd_sts & 0x9a036000 )!= 0x9a036000)                             // 读取0x88 是读取4 还是 1 
-        {
-             cmd_sts = readl(VIDEO_TXDPHY_BASE_ADDR + 0x8);
-        }
+#if 0
+	while((cmd_sts & 0x9a036000 )!= 0x9a036000)                             // 读取0x88 是读取4 还是 1
+	{
+		cmd_sts = readl(VIDEO_TXDPHY_BASE_ADDR + 0x8);
+	}
 
-        while((cmd_sts & 0x08 )!= 0x08)                             // 读取0x88 是读取4 还是 1 
-        {
-             cmd_sts = readl(VIDEO_TXDPHY_BASE_ADDR + 0x14);
-        }
+	while((cmd_sts & 0x08 )!= 0x08)                             // 读取0x88 是读取4 还是 1
+	{
+		cmd_sts = readl(VIDEO_TXDPHY_BASE_ADDR + 0x14);
+	}
 
-        while((cmd_sts & 0x08 )!= 0x00)                             // 读取0x88 是读取4 还是 1 
-        {
-             cmd_sts = readl(VIDEO_TXDPHY_BASE_ADDR + 0x14);
-        }        
+	while((cmd_sts & 0x08 )!= 0x00)                             // 读取0x88 是读取4 还是 1
+	{
+		cmd_sts = readl(VIDEO_TXDPHY_BASE_ADDR + 0x14);
+	}
 
-        while((cmd_sts & 0x04 )!= 0x04)                             // 读取0x88 是读取4 还是 1 
-        {
-             cmd_sts = readl(VIDEO_TXDPHY_BASE_ADDR + 0x14);
-        } 
+	while((cmd_sts & 0x04 )!= 0x04)                             // 读取0x88 是读取4 还是 1
+	{
+		cmd_sts = readl(VIDEO_TXDPHY_BASE_ADDR + 0x14);
+	}
 
-        while((cmd_sts & 0x04 )!= 0xf0600)                             // 读取0x88 是读取4 还是 1 
-        {
-             cmd_sts = readl(VIDEO_TXDPHY_BASE_ADDR + 0x14);
-        }
-#endif 
+	while((cmd_sts & 0x04 )!= 0xf0600)                             // 读取0x88 是读取4 还是 1
+	{
+		cmd_sts = readl(VIDEO_TXDPHY_BASE_ADDR + 0x14);
+	}
+#endif
 
-        //是不是需要读取1_8014 的状态，0x04 和 0xf0600  这两个
+	//是不是需要读取1_8014 的状态，0x04 和 0xf0600  这两个
 
-        sleep(1);
-        DsiRegWr(MCTL_DPHY_CFG0_OFFSET, 0x1f0600);              // dsi reset dphy  
+	sleep(1);
+	DsiRegWr(MCTL_DPHY_CFG0_OFFSET, 0x1f0600);              // dsi reset dphy
 #if 1
-        sleep(1);
-        #ifndef _FPGA
-        k510_logci("before SYSCTL_DRV_Init\n");
-
-//        SYSCTL_DRV_Init();
-        
-        k510_logci("SYSCTL_DRV_Init done\n");
-//        mipi_rxdphy_init(RXDPHY_SPEED_MODE_1500M, RXDPHY_CHCFG_1X4);
-        k510_logci("mipi_rxdphy_init done\n");
-
-        mipi_txdphy_init();
-//        mipi_txdphy_init_10M();
-
-        k510_logci("mipi_txdphy_init done\n");
-        #endif
-
- //       VI_DRV_Init();
-        
-        k510_logci("ISP_DRV_InitInterrupt done\n");
-        //
-/*
-        VO_DRV_Init();
-        
-        TOF_DRV_Init();
-        MFBC_DRV_Init();
-        TD_DRV_Init();
-        BT1120_DRV_Init();
-        k510_logci("BT1120_DRV_Init done\n");
-*/      
+	sleep(1);
+#ifndef _FPGA
+	k510_logci("before SYSCTL_DRV_Init\n");
+
+	//        SYSCTL_DRV_Init();
+
+	k510_logci("SYSCTL_DRV_Init done\n");
+	//        mipi_rxdphy_init(RXDPHY_SPEED_MODE_1500M, RXDPHY_CHCFG_1X4);
+	k510_logci("mipi_rxdphy_init done\n");
+
+	mipi_txdphy_init();
+	//        mipi_txdphy_init_10M();
+
+	k510_logci("mipi_txdphy_init done\n");
 #endif
 
-#endif 
+	//       VI_DRV_Init();
+
+	k510_logci("ISP_DRV_InitInterrupt done\n");
+	//
+	/*
+	   VO_DRV_Init();
+
+	   TOF_DRV_Init();
+	   MFBC_DRV_Init();
+	   TD_DRV_Init();
+	   BT1120_DRV_Init();
+	   k510_logci("BT1120_DRV_Init done\n");
+	 */
+#endif
+
+#endif
 
 #if 0
-        /**************config dsi****************************/
-
-        wdata = 0xf180000;                                     // set d-phy
-        writel(wdata, VIDEO_TXDPHY_BASE_ADDR + 0xc);
-
-        DsiRegWr(MCTL_DPHY_TIMEOUT1_OFFSET,0xafffb);                // dsi reset dphy   0x14 
-        DsiRegWr(MCTL_MAIN_PHY_CTL_OFFSET,0xbfe7);                // dsi reset dphy     0x08
-        DsiRegWr(MCTL_MAIN_EN_OFFSET,0x40f9);                // dsi reset dphy          0xc
-        DsiRegWr(MCTL_DPHY_TIMEOUT2_OFFSET,0xffff);                // dsi reset dphy    0x18
-        DsiRegWr(MCTL_ULPOUT_TIME_OFFSET,0x3ab05);                // dsi reset dphy     0x1c
-        DsiRegWr(VID_ERR_COLOR1_OFFSET,0xccaa);                // dsi reset dphy        0xe0
-        DsiRegWr(VID_ERR_COLOR2_OFFSET,0xee55);                // dsi reset dphy        0xe4
-        DsiRegWr(MCTL_DPHY_CFG0_OFFSET,0x1f0600);                // dsi reset dphy      0x10
-        DsiRegWr(MCTL_MAIN_DATA_CTL_OFFSET,0x23);                // dsi reset dphy      0x4
-
-        DsiRegWr(DIRECT_CMD_STS_CTL_OFFSET,0x80);                // dsi reset dphy      0x138
-        DsiRegWr(VID_VCA_SETTING2_OFFSET,0x17dc0000);                // dsi reset dphy  0xf8
-        DsiRegWr(VID_VSIZE1_OFFSET,0x9145);                // dsi reset dphy            0xb4
-        DsiRegWr(VID_VSIZE2_OFFSET,0x438);                // dsi reset dphy             0xb8
-        DsiRegWr(VID_HSIZE1_OFFSET,0x6c002e);                // dsi reset dphy          0xc0
-        DsiRegWr(VID_HSIZE2_OFFSET,0xea1680);                // dsi reset dphy          0xc4
-
-        DsiRegWr(VID_BLKSIZE1_OFFSET,0xb400000);                // dsi reset dphy       0xcc
-        DsiRegWr(VID_BLKSIZE2_OFFSET,0x17e2);                // dsi reset dphy          0xd0
-        DsiRegWr(VID_PCK_TIME_OFFSET,0x5a2);                // dsi reset dphy           0xd8
-        DsiRegWr(VID_DPHY_TIME_OFFSET,0x1e05fa);                // dsi reset dphy       0xdc
-        DsiRegWr(MCTL_MAIN_DATA_CTL_OFFSET,0x6e027);                // dsi reset dphy   0x4
-        DsiRegWr(VID_MAIN_CTL_OFFSET,0x8218fe00);                // dsi reset dphy      0xb0
-
-        DsiRegWr(MCTL_MAIN_DATA_CTL_OFFSET,0xe027);                // dsi reset dphy    0x4
-        DsiRegWr(VID_MAIN_CTL_OFFSET,0x8218fe00);                // dsi reset dphy      0xb0
-        DsiRegWr(MCTL_MAIN_PHY_CTL_OFFSET,0x20003fe7);                // dsi reset dphy      0x08
-
-//        DsiRegWr(MCTL_MAIN_PHY_CTL_OFFSET,0x2003fe7);          // dsi reset dphy
-        
-        wait_phy_pll_locked();
-        k510_logci("phy pll locked ");
-
-        wait_cklane_rdy();
-        k510_logci("cklane  is ready!!! ");
-        wait_dat1_rdy();
-        k510_logci("dat1  is ready!!! ");
-        wait_dat2_rdy();
-        k510_logci("dat2  is ready!!! ");
-        wait_dat3_rdy();
-        k510_logci("dat3  is ready!!! ");
-        wait_dat4_rdy();
-        k510_logci("dat4  is ready!!! ");
-
-
-        DsiRegWr(MCTL_MAIN_DATA_CTL_OFFSET,0x6e027);                // dsi reset dphy   0x4
-        DsiRegWr(DIRECT_CMD_STS_CLR_OFFSET,0xffffffff);             // dsi reset dphy   0x158   
-        DsiRegWr(DIRECT_CMD_RD_STS_CLR_OFFSET, 0xffffffff);         // dsi reset dphy   0x15c
-
-        DsiRegWr(DIRECT_CMD_MAIN_SETTINGS_OFFSET,0x3010505);        // dsi reset dphy   0x84
-        DsiRegWr(DIRECT_CMD_SEND_OFFSET,0xffffffff);                // dsi reset dphy   0x80
-
-        
-        while((cmd_sts & 0x04 )!= 0x04)                             // 读取0x88 是读取4 还是 1 
-        {
-                cmd_sts = DsiRegRd(DIRECT_CMD_STS_OFFSET);
-        }
-
-#endif 
+	/**************config dsi****************************/
+
+	wdata = 0xf180000;                                     // set d-phy
+	writel(wdata, VIDEO_TXDPHY_BASE_ADDR + 0xc);
+
+	DsiRegWr(MCTL_DPHY_TIMEOUT1_OFFSET,0xafffb);                // dsi reset dphy   0x14
+	DsiRegWr(MCTL_MAIN_PHY_CTL_OFFSET,0xbfe7);                // dsi reset dphy     0x08
+	DsiRegWr(MCTL_MAIN_EN_OFFSET,0x40f9);                // dsi reset dphy          0xc
+	DsiRegWr(MCTL_DPHY_TIMEOUT2_OFFSET,0xffff);                // dsi reset dphy    0x18
+	DsiRegWr(MCTL_ULPOUT_TIME_OFFSET,0x3ab05);                // dsi reset dphy     0x1c
+	DsiRegWr(VID_ERR_COLOR1_OFFSET,0xccaa);                // dsi reset dphy        0xe0
+	DsiRegWr(VID_ERR_COLOR2_OFFSET,0xee55);                // dsi reset dphy        0xe4
+	DsiRegWr(MCTL_DPHY_CFG0_OFFSET,0x1f0600);                // dsi reset dphy      0x10
+	DsiRegWr(MCTL_MAIN_DATA_CTL_OFFSET,0x23);                // dsi reset dphy      0x4
+
+	DsiRegWr(DIRECT_CMD_STS_CTL_OFFSET,0x80);                // dsi reset dphy      0x138
+	DsiRegWr(VID_VCA_SETTING2_OFFSET,0x17dc0000);                // dsi reset dphy  0xf8
+	DsiRegWr(VID_VSIZE1_OFFSET,0x9145);                // dsi reset dphy            0xb4
+	DsiRegWr(VID_VSIZE2_OFFSET,0x438);                // dsi reset dphy             0xb8
+	DsiRegWr(VID_HSIZE1_OFFSET,0x6c002e);                // dsi reset dphy          0xc0
+	DsiRegWr(VID_HSIZE2_OFFSET,0xea1680);                // dsi reset dphy          0xc4
+
+	DsiRegWr(VID_BLKSIZE1_OFFSET,0xb400000);                // dsi reset dphy       0xcc
+	DsiRegWr(VID_BLKSIZE2_OFFSET,0x17e2);                // dsi reset dphy          0xd0
+	DsiRegWr(VID_PCK_TIME_OFFSET,0x5a2);                // dsi reset dphy           0xd8
+	DsiRegWr(VID_DPHY_TIME_OFFSET,0x1e05fa);                // dsi reset dphy       0xdc
+	DsiRegWr(MCTL_MAIN_DATA_CTL_OFFSET,0x6e027);                // dsi reset dphy   0x4
+	DsiRegWr(VID_MAIN_CTL_OFFSET,0x8218fe00);                // dsi reset dphy      0xb0
+
+	DsiRegWr(MCTL_MAIN_DATA_CTL_OFFSET,0xe027);                // dsi reset dphy    0x4
+	DsiRegWr(VID_MAIN_CTL_OFFSET,0x8218fe00);                // dsi reset dphy      0xb0
+	DsiRegWr(MCTL_MAIN_PHY_CTL_OFFSET,0x20003fe7);                // dsi reset dphy      0x08
+
+	//        DsiRegWr(MCTL_MAIN_PHY_CTL_OFFSET,0x2003fe7);          // dsi reset dphy
+
+	wait_phy_pll_locked();
+	k510_logci("phy pll locked ");
+
+	wait_cklane_rdy();
+	k510_logci("cklane  is ready!!! ");
+	wait_dat1_rdy();
+	k510_logci("dat1  is ready!!! ");
+	wait_dat2_rdy();
+	k510_logci("dat2  is ready!!! ");
+	wait_dat3_rdy();
+	k510_logci("dat3  is ready!!! ");
+	wait_dat4_rdy();
+	k510_logci("dat4  is ready!!! ");
+
+
+	DsiRegWr(MCTL_MAIN_DATA_CTL_OFFSET,0x6e027);                // dsi reset dphy   0x4
+	DsiRegWr(DIRECT_CMD_STS_CLR_OFFSET,0xffffffff);             // dsi reset dphy   0x158
+	DsiRegWr(DIRECT_CMD_RD_STS_CLR_OFFSET, 0xffffffff);         // dsi reset dphy   0x15c
+
+	DsiRegWr(DIRECT_CMD_MAIN_SETTINGS_OFFSET,0x3010505);        // dsi reset dphy   0x84
+	DsiRegWr(DIRECT_CMD_SEND_OFFSET,0xffffffff);                // dsi reset dphy   0x80
+
+
+	while((cmd_sts & 0x04 )!= 0x04)                             // 读取0x88 是读取4 还是 1
+	{
+		cmd_sts = DsiRegRd(DIRECT_CMD_STS_OFFSET);
+	}
+
+#endif
 
 
 #endif
 
 #if 0
-        for(i = 0; i < 127; i++)
-        {
+	for(i = 0; i < 127; i++)
+	{
 
-             reg = DsiRegRd(i * 4);          
-             k510_logci("reg 0x%04x is 0x%08x \n", i * 4, reg) ;  
-        }
-#endif      
+		reg = DsiRegRd(i * 4);
+		k510_logci("reg 0x%04x is 0x%08x \n", i * 4, reg) ;
+	}
+#endif
 
 #if 0
-        k510_logci("\n\n SYSCTL_CLK_MIPI_REF out clk freq is %d \r\n\n",sysctl_clk_get_leaf_freq(SYSCTL_CLK_MIPI_REF));
-        sleep(1);
-
-        DsiRegWr(DPI_IRQ_EN_OFFSET, 0); //enable dpi overflow int
-
-        DsiRegWr(MCTL_MAIN_PHY_CTL_OFFSET,0x3C17);    //[6]  lane1_ulp_en = 1
-                                                               //[4]  clk_continuous  =1
-                                                               //[2]  lane4_en =1
-                                                               //[1]  lane3_en =1
-                                                               //[0]  lane2_en =1
-        DsiRegWr(MCTL_DPHY_TIMEOUT1_OFFSET,0xed8afffb);
-        DsiRegWr(MCTL_DPHY_TIMEOUT2_OFFSET,0xf30fffff);
-        DsiRegWr(MCTL_MAIN_DATA_CTL_OFFSET,0x2e027); //[6] tvg_sel = 1  test video generator enabled   //default 0x27
-                                                             //[5] vid_en = 1   enable the video stream generator
-                                                             //[3:2] vid_if_select =2'b00  00:sdi;01:dpi��10:DSC
-                                                             //[1] sdi_if_vid_mode = 1  select video mode
-                                                             //[0] link_en = 1; // enable link
-        DsiRegWr(MCTL_MAIN_EN_OFFSET,0x40f9);
-                                                        //[15]   if3_en: enable dsc interface
-                                                        //[14]   if2_en: enable dpi interface   =1
-                                                        //[13]   if1_en: enable sdi interface
-                                                        //[9]   lane1_ulp_req =1
-                                                        //[7]   dat4_en
-                                                        //[6]   dat3_en
-                                                        //[5]   dat2_en
-                                                        //[4]   dat1_en
-                                                        //[3]   cklane_en
-
-
-        //disable status detection
-        unsigned int data = DsiRegRd(CMD_MODE_STS_CTL_OFFSET);
-        k510_logci("CMD_MODE_STS_CTL_OFFSET data 0x%x\n",data);
-        data &= ~ (1 << 0); 
-        DsiRegWr(CMD_MODE_STS_CTL_OFFSET,data );
-                                                         
-
-          wait_phy_pll_locked();
-          k510_logci("phy pll locked ");
-
-          wait_cklane_rdy();
-          k510_logci("cklane  is ready!!! ");
-          wait_dat1_rdy();
-          k510_logci("dat1  is ready!!! ");
-          wait_dat2_rdy();
-          k510_logci("dat2  is ready!!! ");
-          wait_dat3_rdy();
-          k510_logci("dat3  is ready!!! ");
-          wait_dat4_rdy();
-          k510_logci("dat4  is ready!!! ");
-         // will init lcd
-          DsiRegWr(MCTL_ULPOUT_TIME_OFFSET,0x0003ab05);
+	k510_logci("\n\n SYSCTL_CLK_MIPI_REF out clk freq is %d \r\n\n",sysctl_clk_get_leaf_freq(SYSCTL_CLK_MIPI_REF));
+	sleep(1);
+
+	DsiRegWr(DPI_IRQ_EN_OFFSET, 0); //enable dpi overflow int
+
+	DsiRegWr(MCTL_MAIN_PHY_CTL_OFFSET,0x3C17);    //[6]  lane1_ulp_en = 1
+	//[4]  clk_continuous  =1
+	//[2]  lane4_en =1
+	//[1]  lane3_en =1
+	//[0]  lane2_en =1
+	DsiRegWr(MCTL_DPHY_TIMEOUT1_OFFSET,0xed8afffb);
+	DsiRegWr(MCTL_DPHY_TIMEOUT2_OFFSET,0xf30fffff);
+	DsiRegWr(MCTL_MAIN_DATA_CTL_OFFSET,0x2e027); //[6] tvg_sel = 1  test video generator enabled   //default 0x27
+	//[5] vid_en = 1   enable the video stream generator
+	//[3:2] vid_if_select =2'b00  00:sdi;01:dpi��10:DSC
+	//[1] sdi_if_vid_mode = 1  select video mode
+	//[0] link_en = 1; // enable link
+	DsiRegWr(MCTL_MAIN_EN_OFFSET,0x40f9);
+	//[15]   if3_en: enable dsc interface
+	//[14]   if2_en: enable dpi interface   =1
+	//[13]   if1_en: enable sdi interface
+	//[9]   lane1_ulp_req =1
+	//[7]   dat4_en
+	//[6]   dat3_en
+	//[5]   dat2_en
+	//[4]   dat1_en
+	//[3]   cklane_en
+
+
+	//disable status detection
+	unsigned int data = DsiRegRd(CMD_MODE_STS_CTL_OFFSET);
+	k510_logci("CMD_MODE_STS_CTL_OFFSET data 0x%x\n",data);
+	data &= ~ (1 << 0);
+	DsiRegWr(CMD_MODE_STS_CTL_OFFSET,data );
+
+
+	wait_phy_pll_locked();
+	k510_logci("phy pll locked ");
+
+	wait_cklane_rdy();
+	k510_logci("cklane  is ready!!! ");
+	wait_dat1_rdy();
+	k510_logci("dat1  is ready!!! ");
+	wait_dat2_rdy();
+	k510_logci("dat2  is ready!!! ");
+	wait_dat3_rdy();
+	k510_logci("dat3  is ready!!! ");
+	wait_dat4_rdy();
+	k510_logci("dat4  is ready!!! ");
+	// will init lcd
+	DsiRegWr(MCTL_ULPOUT_TIME_OFFSET,0x0003ab05);
 #if 0
-        for(i = 0; i < 127; i++)
-        {
-
-             reg = DsiRegRd(i * 4);          
-             k510_logci("reg 0x%04x is 0x%08x \n", i * 4, reg) ;  
-        }
-#endif 
-#endif 
-//        sleep(5);
- //       aml_lcd_init();
-//        ILI7807_lcd_init();
+	for(i = 0; i < 127; i++)
+	{
+
+		reg = DsiRegRd(i * 4);
+		k510_logci("reg 0x%04x is 0x%08x \n", i * 4, reg) ;
+	}
+#endif
+#endif
+	//        sleep(5);
+	//       aml_lcd_init();
+	//        ILI7807_lcd_init();
 
 }
 
 void dsi_prepare(void)
 {
-    DsiRegWr(MCTL_MAIN_PHY_CTL_OFFSET,
-            0x3C07); //[6]  lane1_ulp_en = 1   正常的   0x3C17 clk_continuous
-                    //[4]  clk_continuous  =1
-                    //[2]  lane4_en =1
-                    //[1]  lane3_en =1
-                    //[0]  lane2_en =1
-
-    //[0]  lane2_en =1
-
-    DsiRegWr(MCTL_DPHY_TIMEOUT1_OFFSET, 0xed8afffb);
-    DsiRegWr(MCTL_DPHY_TIMEOUT2_OFFSET, 0xf30fffff);
-    DsiRegWr(MCTL_MAIN_DATA_CTL_OFFSET,
-            0x2e027); //[6] tvg_sel = 1  test video generator enabled   //default
-                    //0x27                         0x2e067 [5] vid_en = 1
-                    //enable the video stream generator [3:2] vid_if_select
-                    //=2'b00  00:sdi;01:dpi��10:DSC [1] sdi_if_vid_mode = 1
-                    //select video mode [0] link_en = 1; // enable link
-
-    DsiRegWr(MCTL_MAIN_EN_OFFSET,
-            0x40f9); // 4 lan
-                    //[15]   if3_en: enable dsc interface
-                    //[14]   if2_en: enable dpi interface   =1
-                    //[13]   if1_en: enable sdi interface
-                    //[9]   lane1_ulp_req =1
-                    //[7]   dat4_en
-    //[6]   dat3_en
-    //[5]   dat2_en
-    //[4]   dat1_en
-    //[3]   cklane_en
-
-    // disable status detection
-    unsigned int data = DsiRegRd(CMD_MODE_STS_CTL_OFFSET);
-    k510_logci("CMD_MODE_STS_CTL_OFFSET data 0x%x\n", data);
-    data &= ~(1 << 0);
-    DsiRegWr(CMD_MODE_STS_CTL_OFFSET, data);
-
-    wait_phy_pll_locked();
-    k510_logci("phy pll locked ");
-
-    wait_cklane_rdy();
-    k510_logci("cklane  is ready!!! ");
-    wait_dat1_rdy();
-    k510_logci("dat1  is ready!!! ");
-    wait_dat2_rdy();
-    k510_logci("dat2  is ready!!! ");
-
-    wait_dat3_rdy();
-    k510_logci("dat3  is ready!!! ");
-    wait_dat4_rdy();
-    k510_logci("dat4  is ready!!! ");
-
-    // will init lcd
-    DsiRegWr(MCTL_ULPOUT_TIME_OFFSET, 0x0003ab05);
-    /*
-            //fork  hs_skewcal_force_en
-            reg = DsiRegRd(MCTL_MAIN_PHY_CTL_OFFSET);
-            reg = reg | (1 << 29);
-            DsiRegWr(MCTL_MAIN_PHY_CTL_OFFSET, reg);
-            reg = DsiRegRd(MCTL_MAIN_PHY_CTL_OFFSET);
-            k510_logci("reg is %x \n", reg);
-    */
+	DsiRegWr(MCTL_MAIN_PHY_CTL_OFFSET,
+			0x3C07); //[6]  lane1_ulp_en = 1   正常的   0x3C17 clk_continuous
+	//[4]  clk_continuous  =1
+	//[2]  lane4_en =1
+	//[1]  lane3_en =1
+	//[0]  lane2_en =1
+
+	//[0]  lane2_en =1
+
+	DsiRegWr(MCTL_DPHY_TIMEOUT1_OFFSET, 0xed8afffb);
+	DsiRegWr(MCTL_DPHY_TIMEOUT2_OFFSET, 0xf30fffff);
+	DsiRegWr(MCTL_MAIN_DATA_CTL_OFFSET,
+			0x2e027); //[6] tvg_sel = 1  test video generator enabled   //default
+	//0x27                         0x2e067 [5] vid_en = 1
+	//enable the video stream generator [3:2] vid_if_select
+	//=2'b00  00:sdi;01:dpi��10:DSC [1] sdi_if_vid_mode = 1
+	//select video mode [0] link_en = 1; // enable link
+
+	DsiRegWr(MCTL_MAIN_EN_OFFSET,
+			0x40f9); // 4 lan
+	//[15]   if3_en: enable dsc interface
+	//[14]   if2_en: enable dpi interface   =1
+	//[13]   if1_en: enable sdi interface
+	//[9]   lane1_ulp_req =1
+	//[7]   dat4_en
+	//[6]   dat3_en
+	//[5]   dat2_en
+	//[4]   dat1_en
+	//[3]   cklane_en
+
+	// disable status detection
+	unsigned int data = DsiRegRd(CMD_MODE_STS_CTL_OFFSET);
+	k510_logci("CMD_MODE_STS_CTL_OFFSET data 0x%x\n", data);
+	data &= ~(1 << 0);
+	DsiRegWr(CMD_MODE_STS_CTL_OFFSET, data);
+
+	wait_phy_pll_locked();
+	k510_logci("phy pll locked ");
+
+	wait_cklane_rdy();
+	k510_logci("cklane  is ready!!! ");
+	wait_dat1_rdy();
+	k510_logci("dat1  is ready!!! ");
+	wait_dat2_rdy();
+	k510_logci("dat2  is ready!!! ");
+
+	wait_dat3_rdy();
+	k510_logci("dat3  is ready!!! ");
+	wait_dat4_rdy();
+	k510_logci("dat4  is ready!!! ");
+
+	// will init lcd
+	DsiRegWr(MCTL_ULPOUT_TIME_OFFSET, 0x0003ab05);
+	/*
+	//fork  hs_skewcal_force_en
+	reg = DsiRegRd(MCTL_MAIN_PHY_CTL_OFFSET);
+	reg = reg | (1 << 29);
+	DsiRegWr(MCTL_MAIN_PHY_CTL_OFFSET, reg);
+	reg = DsiRegRd(MCTL_MAIN_PHY_CTL_OFFSET);
+	k510_logci("reg is %x \n", reg);
+	 */
 }
 
 static int32_t lcd_id = 0;
 int32_t get_lcd_id(void)
 {
-    return lcd_id;
+	return lcd_id;
 }
 
 int32_t get_panel_id(void)
 {
-    int32_t reg;
-    int32_t cmd_sts = 0;
-    int32_t err;
-    int32_t size;
-    int32_t retry = 5;
-
-    dsi_prepare();
-    DsiRegWr(DPI_IRQ_EN_OFFSET, 0); // enable dpi overflow int
-    msleep(100);
-
-    dsc_cmd_send_37(3);
-
-    DsiRegWr(DIRECT_CMD_STS_CLR_OFFSET, 0xffffffff);
-    DsiRegWr(DIRECT_CMD_RD_STS_CLR_OFFSET, 0xffffffff);
-    DsiRegWr(DIRECT_CMD_FIFO_RST_OFFSET, 0xffffffff);
-
-    reg = 0x01000601 | (1 << 16);
-    DsiRegWr(DIRECT_CMD_MAIN_SETTINGS_OFFSET, reg);
-    DsiRegWr(DIRECT_CMD_WRDAT_OFFSET, 0x04);
-    DsiRegWr(DIRECT_CMD_SEND_OFFSET, 0xffffffff);
-
-    while ((cmd_sts & 0x08) != 0x08) {
-        usleep(1000);
-        retry--;
-        cmd_sts = DsiRegRd(DIRECT_CMD_STS_OFFSET);
-        if (retry == 0) {
-            lcd_id = -1;
-            return -1;
-        }
-    }
-
-    err = DsiRegRd(DIRECT_CMD_RD_STS_OFFSET);
-    size = DsiRegRd(DIRECT_CMD_RD_PROPERTY_OFFSET);
-    lcd_id = DsiRegRd(DIRECT_CMD_RDDAT_OFFSET);
-    printf("panel_id [%02X]\n", lcd_id);
-    return lcd_id;
+	int32_t reg;
+	int32_t cmd_sts = 0;
+	int32_t err;
+	int32_t size;
+	int32_t retry = 5;
+
+	dsi_prepare();
+	DsiRegWr(DPI_IRQ_EN_OFFSET, 1); // enable dpi overflow int
+	msleep(100);
+
+	dsc_cmd_send_37(3);
+
+	DsiRegWr(DIRECT_CMD_STS_CLR_OFFSET, 0xffffffff);
+	DsiRegWr(DIRECT_CMD_RD_STS_CLR_OFFSET, 0xffffffff);
+	DsiRegWr(DIRECT_CMD_FIFO_RST_OFFSET, 0xffffffff);
+
+	reg = 0x01000601 | (1 << 16);
+	DsiRegWr(DIRECT_CMD_MAIN_SETTINGS_OFFSET, reg);
+	DsiRegWr(DIRECT_CMD_WRDAT_OFFSET, 0x04);
+	DsiRegWr(DIRECT_CMD_SEND_OFFSET, 0xffffffff);
+
+	while ((cmd_sts & 0x08) != 0x08) {
+		usleep(1000);
+		retry--;
+		cmd_sts = DsiRegRd(DIRECT_CMD_STS_OFFSET);
+		if (retry == 0) {
+			lcd_id = -1;
+			return -1;
+		}
+	}
+
+	err = DsiRegRd(DIRECT_CMD_RD_STS_OFFSET);
+	size = DsiRegRd(DIRECT_CMD_RD_PROPERTY_OFFSET);
+	lcd_id = DsiRegRd(DIRECT_CMD_RDDAT_OFFSET);
+	printf("panel_id [%02X]\n", lcd_id);
+	return lcd_id;
 }
 
 void dsi_init_1080x1920()
 {
-        int HACT = 1080;
-        int VACT = 1920;
-        int HSA = 20;
-        int HBP = 20;
-        int HFP = 134;
-
-        int VSA = 5;
-        int VBP = 8;
-        int VFP = 5;
-
-        int i = 0;
-        uint32_t reg = 0;
-        uint32_t val = 0;
-
-        if (lcd_id == -1) {
-                sysctl_reset(SYSCTL_RESET_DSI);
-                mipi_txdphy_init();
-                dsi_prepare();
-        } else if (lcd_id == 0x1C9983)
-                hx8399_v2_init();
-        else
-                hx8399_c_init();
-
-        k510_logci("lcd init  ok!!! ");
-
-        DsiRegWr(TVG_IMG_SIZE_OFFSET, (VACT << 16) + HACT * 3);
-        DsiRegWr(TVG_COLOR1_OFFSET, (0 << 12) + 255); //[23:12] col1_green
-                                                        //[11:0]  col1_red
-        DsiRegWr(TVG_COLOR1_BIS_OFFSET, 0);           //[11:0]  col1_blue
-        DsiRegWr(TVG_COLOR2_OFFSET, (0 << 12) + 0);   //[23:12] col2_green
-                                                        //[11:0]  col2_red
-        DsiRegWr(TVG_COLOR2_BIS_OFFSET, 255);         //[11:0]  col2_blue
-
-        DsiRegWr(VID_VSIZE1_OFFSET, (VFP << 12) + (VBP << 6) + VSA);
-        //[19:12] vfp_length
-        //[11:6]  vbp_length
-        //[5:0]   vsa_length
-        DsiRegWr(VID_MODE_STS_CTL_OFFSET, 0); // 0xffffffff);
-        DsiRegWr(VID_VSIZE2_OFFSET, VACT);    //[12:0] vact_length
-        DsiRegWr(VID_HSIZE1_OFFSET, ((HBP * 3 - 12) << 16) + (HSA * 3 - 14));
-        //[31:16] hbp_length  =(dpi_hbp*24/8-12)
-        //[9:0]   hsa_length  =(dpi_hsa*24/8-14)
-
-        DsiRegWr(VID_HSIZE2_OFFSET, ((HFP * 3 - 6) << 16) + (HACT * 3));
-        //[26:16] hfp_length  =(dpi_hfp*24/8-6) >hss+hsa+hse+hbp
-        //[14:0] rgb_size
-        DsiRegWr(VID_BLKSIZE2_OFFSET,
-                (HSA + HBP + HFP + HACT) * 3 - 20 - (HSA * 3 - 14));
-        //[14:0] blkline_pulse_pck =
-        //(dpi_hsa+dpi_hbp+dpi_hact+dpi_hfp)*24/8-20-((dpi_hsa*24/8)-14)=3342
-        //  (1080+20+15+72)*3-20= 3541
-        DsiRegWr(VID_DPHY_TIME_OFFSET, (0x38 << 17) +
-                                        ((HSA + HBP + HFP + HACT) * 3 / 4) -
-                                        ((HSA * 3 - 14) / 4));
-        //[16:0] reg_line_duration =(line_total_)
-        //[27:17] reg_wakeup_time
-        DsiRegWr(VID_VCA_SETTING1_OFFSET, (0x000000));
-        DsiRegWr(VID_VCA_SETTING2_OFFSET,
-                ((HSA + HBP + HFP + HACT) * 3 - 20 - (HSA * 3 - 14) - 6) << 16);
-
-        //[31:16] max_line_limit = gen_blkline_pulse_pck-6;
-        DsiRegWr(VID_MAIN_CTL_OFFSET,
-                (0x1 << 31) + (0x1 << 25) + (0x0 << 21) + (1 << 20) + (1 << 19) +
-                (3 << 14) + (0x3e << 8) +
-                0); // 0x1 << 21
-                        //[31] vid_ignore_miss_vsync =1
-                        //[26:25] recovery_mode
-                        //[24:23] reg_blkeol_mode : same as reg_blkline_mode but
-                        //using in burst mode [22:21] reg_blkline_mode : 1x: LP
-                        //                            01: blanking packet
-                        //                            00: null packet
-
-        //[20] sync_pulse_horizontal:syncs are pulse(1) or event(0)
-        //[19] sync_pulse_active :1
-        //[18] burst mode
-        //[17:14] vid_pixel_mode  0000: 16 bits RGB
-        //                        0001: 18 bits RGB
-        //                        0010: 18 bits RGB(loose)
-        //                        0011: 24 bits RGB
-        //                        0100: 30 bits RGB
-        //                        0101: 36 bits RGB
-        //                        1000: 12 bits YCbCr
-        //                        1001: 16 bits YCbCr
-        //                        1010: 20 bits YCbCr
-        //                        1011: 24 bits YCbCr
-        //                        1100: DSC Compressed
-        //[13:0] Header:  Datatype of RGB packets "0x3e  rgb24
-        //[1:0]  start mode:start_mode=0
+	int HACT = 1080;
+	int VACT = 1920;
+	int HSA = 20;
+	int HBP = 20;
+	int HFP = 134;
+
+	int VSA = 5;
+	int VBP = 8;
+	int VFP = 5;
+
+	int i = 0;
+	uint32_t reg = 0;
+	uint32_t val = 0;
+
+	if (lcd_id == -1) {
+		sysctl_reset(SYSCTL_RESET_DSI);
+		mipi_txdphy_init();
+		dsi_prepare();
+	} else if (lcd_id == 0x1C9983)
+		hx8399_v2_init();
+	else
+		hx8399_c_init();
+
+	k510_logci("lcd init  ok!!! ");
+
+	DsiRegWr(TVG_IMG_SIZE_OFFSET, (VACT << 16) + HACT * 3);
+	DsiRegWr(TVG_COLOR1_OFFSET, (0 << 12) + 255); //[23:12] col1_green
+	//[11:0]  col1_red
+	DsiRegWr(TVG_COLOR1_BIS_OFFSET, 0);           //[11:0]  col1_blue
+	DsiRegWr(TVG_COLOR2_OFFSET, (0 << 12) + 0);   //[23:12] col2_green
+	//[11:0]  col2_red
+	DsiRegWr(TVG_COLOR2_BIS_OFFSET, 255);         //[11:0]  col2_blue
+
+	DsiRegWr(VID_VSIZE1_OFFSET, (VFP << 12) + (VBP << 6) + VSA);
+	//[19:12] vfp_length
+	//[11:6]  vbp_length
+	//[5:0]   vsa_length
+	DsiRegWr(VID_MODE_STS_CTL_OFFSET, 0); // 0xffffffff);
+	DsiRegWr(VID_VSIZE2_OFFSET, VACT);    //[12:0] vact_length
+	DsiRegWr(VID_HSIZE1_OFFSET, ((HBP * 3 - 12) << 16) + (HSA * 3 - 14));
+	//[31:16] hbp_length  =(dpi_hbp*24/8-12)
+	//[9:0]   hsa_length  =(dpi_hsa*24/8-14)
+
+	DsiRegWr(VID_HSIZE2_OFFSET, ((HFP * 3 - 6) << 16) + (HACT * 3));
+	//[26:16] hfp_length  =(dpi_hfp*24/8-6) >hss+hsa+hse+hbp
+	//[14:0] rgb_size
+	DsiRegWr(VID_BLKSIZE2_OFFSET,
+			(HSA + HBP + HFP + HACT) * 3 - 20 - (HSA * 3 - 14));
+	//[14:0] blkline_pulse_pck =
+	//(dpi_hsa+dpi_hbp+dpi_hact+dpi_hfp)*24/8-20-((dpi_hsa*24/8)-14)=3342
+	//  (1080+20+15+72)*3-20= 3541
+	DsiRegWr(VID_DPHY_TIME_OFFSET, (0x38 << 17) +
+			((HSA + HBP + HFP + HACT) * 3 / 4) -
+			((HSA * 3 - 14) / 4));
+	//[16:0] reg_line_duration =(line_total_)
+	//[27:17] reg_wakeup_time
+	DsiRegWr(VID_VCA_SETTING1_OFFSET, (0x000000));
+	DsiRegWr(VID_VCA_SETTING2_OFFSET,
+			((HSA + HBP + HFP + HACT) * 3 - 20 - (HSA * 3 - 14) - 6) << 16);
+
+	//[31:16] max_line_limit = gen_blkline_pulse_pck-6;
+	DsiRegWr(VID_MAIN_CTL_OFFSET,
+			(0x1 << 31) + (0x1 << 25) + (0x0 << 21) + (1 << 20) + (1 << 19) +
+			(3 << 14) + (0x3e << 8) +
+			0); // 0x1 << 21
+	//[31] vid_ignore_miss_vsync =1
+	//[26:25] recovery_mode
+	//[24:23] reg_blkeol_mode : same as reg_blkline_mode but
+	//using in burst mode [22:21] reg_blkline_mode : 1x: LP
+	//                            01: blanking packet
+	//                            00: null packet
+
+	//[20] sync_pulse_horizontal:syncs are pulse(1) or event(0)
+	//[19] sync_pulse_active :1
+	//[18] burst mode
+	//[17:14] vid_pixel_mode  0000: 16 bits RGB
+	//                        0001: 18 bits RGB
+	//                        0010: 18 bits RGB(loose)
+	//                        0011: 24 bits RGB
+	//                        0100: 30 bits RGB
+	//                        0101: 36 bits RGB
+	//                        1000: 12 bits YCbCr
+	//                        1001: 16 bits YCbCr
+	//                        1010: 20 bits YCbCr
+	//                        1011: 24 bits YCbCr
+	//                        1100: DSC Compressed
+	//[13:0] Header:  Datatype of RGB packets "0x3e  rgb24
+	//[1:0]  start mode:start_mode=0
 }
 
-
-
 void gd9365da_800x1280(void)
 {
-    dsc_cmd_read(0x04);
-
-    dsc_cmd_send(2,0xE1,0x93);
-
-    dsc_cmd_send(2,0xE2,0x65);
-    dsc_cmd_send(2,0xE3,0xF8);
-    dsc_cmd_send(2,0x80,0x03);
-
-    dsc_cmd_send(2,0xE0,0x01);
-
- //   dsc_cmd_send(2,0x4a,0x35);      // test mode ??
-
-    dsc_cmd_send(2,0x00,0x00);
-    dsc_cmd_send(2,0x01,0x2A);
-    dsc_cmd_send(2,0x03,0x00);
-    dsc_cmd_send(2,0x04,0x30);
-    dsc_cmd_send(2,0x17,0x00);
-    dsc_cmd_send(2,0x18,0xE7);
-    dsc_cmd_send(2,0x19,0x00);
-    dsc_cmd_send(2,0x1A,0x00);
-    dsc_cmd_send(2,0x1B,0xE7);
-    dsc_cmd_send(2,0x1C,0x00);
-    dsc_cmd_send(2,0x35,0x23);
-    dsc_cmd_send(2,0x37,0x09);
-    dsc_cmd_send(2,0x38,0x04);
-    dsc_cmd_send(2,0x39,0x08);
-    dsc_cmd_send(2,0x3A,0x12);
-    dsc_cmd_send(2,0x3C,0x78);
-    dsc_cmd_send(2,0x3D,0xFF);
-    dsc_cmd_send(2,0x3E,0xFF);
-    dsc_cmd_send(2,0x3F,0xFF);
-    dsc_cmd_send(2,0x40,0x06);
-    dsc_cmd_send(2,0x41,0xA0);
-    dsc_cmd_send(2,0x43,0x14);
-    dsc_cmd_send(2,0x44,0x0F);
-    dsc_cmd_send(2,0x45,0x30);
-
-    dsc_cmd_send(2,0x4B,0x04);
-    dsc_cmd_send(2,0x55,0x02);
-    dsc_cmd_send(2,0x57,0x65);
-    dsc_cmd_send(2,0x59,0x0A);
-    dsc_cmd_send(2,0x5A,0x28);
-    dsc_cmd_send(2,0x5B,0x15);
-    dsc_cmd_send(2,0x5D,0x7C);
-    dsc_cmd_send(2,0x5E,0x5A);
-    dsc_cmd_send(2,0x5F,0x45);
-    dsc_cmd_send(2,0x60,0x36);
-    dsc_cmd_send(2,0x61,0x2F);
-    dsc_cmd_send(2,0x62,0x20);
-    dsc_cmd_send(2,0x63,0x24);
-    dsc_cmd_send(2,0x64,0x0F);
-    dsc_cmd_send(2,0x65,0x2C);
-    dsc_cmd_send(2,0x66,0x2E);
-    dsc_cmd_send(2,0x67,0x31);
-    dsc_cmd_send(2,0x68,0x52);
-    dsc_cmd_send(2,0x69,0x40);
-    dsc_cmd_send(2,0x6A,0x49);
-    dsc_cmd_send(2,0x6B,0x3E);
-    dsc_cmd_send(2,0x6C,0x3B);
-    dsc_cmd_send(2,0x6D,0x30);
-    dsc_cmd_send(2,0x6E,0x21);
-    dsc_cmd_send(2,0x6F,0x0C);
-    dsc_cmd_send(2,0x70,0x7C);
-    dsc_cmd_send(2,0x71,0x5A);
-    dsc_cmd_send(2,0x72,0x45);
-    dsc_cmd_send(2,0x73,0x36);
-    dsc_cmd_send(2,0x74,0x2F);
-    dsc_cmd_send(2,0x75,0x20);
-    dsc_cmd_send(2,0x76,0x24);
-    dsc_cmd_send(2,0x77,0x0F);
-    dsc_cmd_send(2,0x78,0x2C);
-    dsc_cmd_send(2,0x79,0x2E);
-    dsc_cmd_send(2,0x7A,0x31);
-    dsc_cmd_send(2,0x7B,0x52);
-    dsc_cmd_send(2,0x7C,0x40);
-    dsc_cmd_send(2,0x7D,0x49);
-    dsc_cmd_send(2,0x7E,0x3E);
-    dsc_cmd_send(2,0x7F,0x3B);
-    dsc_cmd_send(2,0x80,0x30);
-    dsc_cmd_send(2,0x81,0x21);
-    dsc_cmd_send(2,0x82,0x0C);
-
-    dsc_cmd_send(2,0xE0,0x02);
-    dsc_cmd_send(2,0x00,0x5F);
-    dsc_cmd_send(2,0x01,0x5F);
-    dsc_cmd_send(2,0x02,0x53);
-    dsc_cmd_send(2,0x03,0x51);
-    dsc_cmd_send(2,0x04,0x4B);
-    dsc_cmd_send(2,0x05,0x49);
-    dsc_cmd_send(2,0x06,0x47);
-    dsc_cmd_send(2,0x07,0x45);
-    dsc_cmd_send(2,0x08,0x41);
-    dsc_cmd_send(2,0x09,0x43);
-    dsc_cmd_send(2,0x0A,0x5F);
-    dsc_cmd_send(2,0x0B,0x5F);
-    dsc_cmd_send(2,0x0C,0x5F);
-    dsc_cmd_send(2,0x0D,0x5F);
-    dsc_cmd_send(2,0x0E,0x5F);
-    dsc_cmd_send(2,0x0F,0x5F);
-    dsc_cmd_send(2,0x10,0x5F);
-    dsc_cmd_send(2,0x11,0x5F);
-    dsc_cmd_send(2,0x12,0x5F);
-    dsc_cmd_send(2,0x13,0x5F);
-    dsc_cmd_send(2,0x14,0x5F);
-    dsc_cmd_send(2,0x15,0x5F);
-    dsc_cmd_send(2,0x16,0x5F);
-    dsc_cmd_send(2,0x17,0x5F);
-    dsc_cmd_send(2,0x18,0x52);
-    dsc_cmd_send(2,0x19,0x50);
-    dsc_cmd_send(2,0x1A,0x4A);
-    dsc_cmd_send(2,0x1B,0x48);
-    dsc_cmd_send(2,0x1C,0x46);
-    dsc_cmd_send(2,0x1D,0x44);
-    dsc_cmd_send(2,0x1E,0x40);
-    dsc_cmd_send(2,0x1F,0x42);
-    dsc_cmd_send(2,0x20,0x5F);
-    dsc_cmd_send(2,0x21,0x5F);
-    dsc_cmd_send(2,0x22,0x5F);
-    dsc_cmd_send(2,0x23,0x5F);
-    dsc_cmd_send(2,0x24,0x5F);
-    dsc_cmd_send(2,0x25,0x5F);
-    dsc_cmd_send(2,0x26,0x5F);
-    dsc_cmd_send(2,0x27,0x5F);
-    dsc_cmd_send(2,0x28,0x5F);
-    dsc_cmd_send(2,0x29,0x5F);
-    dsc_cmd_send(2,0x2A,0x5F);
-    dsc_cmd_send(2,0x2B,0x5F);
-    dsc_cmd_send(2,0x2C,0x1F);
-    dsc_cmd_send(2,0x2D,0x1F);
-    dsc_cmd_send(2,0x2E,0x00);
-    dsc_cmd_send(2,0x2F,0x02);
-    dsc_cmd_send(2,0x30,0x08);
-    dsc_cmd_send(2,0x31,0x0A);
-    dsc_cmd_send(2,0x32,0x04);
-    dsc_cmd_send(2,0x33,0x06);
-    dsc_cmd_send(2,0x34,0x12);
-    dsc_cmd_send(2,0x35,0x10);
-    dsc_cmd_send(2,0x36,0x1F);
-    dsc_cmd_send(2,0x37,0x1F);
-    dsc_cmd_send(2,0x38,0x1F);
-    dsc_cmd_send(2,0x39,0x1F);
-    dsc_cmd_send(2,0x3A,0x1F);
-    dsc_cmd_send(2,0x3B,0x1F);
-    dsc_cmd_send(2,0x3C,0x1F);
-    dsc_cmd_send(2,0x3D,0x1F);
-    dsc_cmd_send(2,0x3E,0x1F);
-    dsc_cmd_send(2,0x3F,0x1F);
-    dsc_cmd_send(2,0x40,0x1F);
-    dsc_cmd_send(2,0x41,0x1F);
-    dsc_cmd_send(2,0x42,0x1F);
-    dsc_cmd_send(2,0x43,0x1F);
-    dsc_cmd_send(2,0x44,0x01);
-    dsc_cmd_send(2,0x45,0x03);
-    dsc_cmd_send(2,0x46,0x09);
-    dsc_cmd_send(2,0x47,0x0B);
-    dsc_cmd_send(2,0x48,0x05);
-    dsc_cmd_send(2,0x49,0x07);
-    dsc_cmd_send(2,0x4A,0x13);
-    dsc_cmd_send(2,0x4B,0x11);
-    dsc_cmd_send(2,0x4C,0x1F);
-    dsc_cmd_send(2,0x4D,0x1F);
-    dsc_cmd_send(2,0x4E,0x1F);
-    dsc_cmd_send(2,0x4F,0x1F);
-    dsc_cmd_send(2,0x50,0x1F);
-    dsc_cmd_send(2,0x51,0x1F);
-    dsc_cmd_send(2,0x52,0x1F);
-    dsc_cmd_send(2,0x53,0x1F);
-    dsc_cmd_send(2,0x54,0x1F);
-    dsc_cmd_send(2,0x55,0x1F);
-    dsc_cmd_send(2,0x56,0x1F);
-    dsc_cmd_send(2,0x57,0x1F);
-    dsc_cmd_send(2,0x58,0x40);
-    dsc_cmd_send(2,0x59,0x00);
-    dsc_cmd_send(2,0x5A,0x00);
-    dsc_cmd_send(2,0x5B,0x30);
-    dsc_cmd_send(2,0x5C,0x09);
-    dsc_cmd_send(2,0x5D,0x30);
-    dsc_cmd_send(2,0x5E,0x01);
-    dsc_cmd_send(2,0x5F,0x02);
-    dsc_cmd_send(2,0x60,0x30);
-    dsc_cmd_send(2,0x61,0x03);
-    dsc_cmd_send(2,0x62,0x04);
-    dsc_cmd_send(2,0x63,0x1C);
-    dsc_cmd_send(2,0x64,0x6A);
-    dsc_cmd_send(2,0x65,0x75);
-    dsc_cmd_send(2,0x66,0x0D);
-    dsc_cmd_send(2,0x67,0x72);
-    dsc_cmd_send(2,0x68,0x0C);
-    dsc_cmd_send(2,0x69,0x1C);
-    dsc_cmd_send(2,0x6A,0x6A);
-    dsc_cmd_send(2,0x6B,0x08);
-    dsc_cmd_send(2,0x6C,0x00);
-    dsc_cmd_send(2,0x6D,0x00);
-    dsc_cmd_send(2,0x6E,0x00);
-    dsc_cmd_send(2,0x6F,0x88);
-    dsc_cmd_send(2,0x70,0x00);
-    dsc_cmd_send(2,0x71,0x00);
-    dsc_cmd_send(2,0x72,0x06);
-    dsc_cmd_send(2,0x73,0x7B);
-    dsc_cmd_send(2,0x74,0x00);
-    dsc_cmd_send(2,0x75,0xBB);
-    dsc_cmd_send(2,0x76,0x01);
-    dsc_cmd_send(2,0x77,0x0D);
-    dsc_cmd_send(2,0x78,0x24);
-    dsc_cmd_send(2,0x79,0x00);
-    dsc_cmd_send(2,0x7A,0x00);
-    dsc_cmd_send(2,0x7B,0x00);
-    dsc_cmd_send(2,0x7C,0x00);
-    dsc_cmd_send(2,0x7D,0x03);
-    dsc_cmd_send(2,0x7E,0x7B);
-
-    dsc_cmd_send(2,0xE0,0x04);
-    dsc_cmd_send(2,0x00,0x0E);
-    dsc_cmd_send(2,0x02,0xB3);
-    dsc_cmd_send(2,0x0E,0x4A);
-
-    dsc_cmd_send(2,0xE0,0x00);
-    dsc_cmd_send(2,0xE6,0x02);
-    dsc_cmd_send(2,0xE7,0x0C);
-
-    dsc_cmd_send_short_pag(0x11);  	// SLPOUT
-    msleep(120);
-
-    dsc_cmd_send_short_pag(0x29);  	// DSPON
-    msleep(5);
-
-    dsc_cmd_send(2,0x35,0x00);    
+	dsc_cmd_hs_read(0x04);
+
+	dsc_cmd_hs_send(2,0xE1,0x93);
+
+	dsc_cmd_hs_send(2,0xE2,0x65);
+	dsc_cmd_hs_send(2,0xE3,0xF8);
+	dsc_cmd_hs_send(2,0x80,0x03);
+
+	dsc_cmd_hs_send(2,0xE0,0x01);
+
+	//   dsc_cmd_hs_send(2,0x4a,0x35);      // test mode ??
+
+	dsc_cmd_hs_send(2,0x00,0x00);
+	dsc_cmd_hs_send(2,0x01,0x2A);
+	dsc_cmd_hs_send(2,0x03,0x00);
+	dsc_cmd_hs_send(2,0x04,0x30);
+	dsc_cmd_hs_send(2,0x17,0x00);
+	dsc_cmd_hs_send(2,0x18,0xE7);
+	dsc_cmd_hs_send(2,0x19,0x00);
+	dsc_cmd_hs_send(2,0x1A,0x00);
+	dsc_cmd_hs_send(2,0x1B,0xE7);
+	dsc_cmd_hs_send(2,0x1C,0x00);
+	dsc_cmd_hs_send(2,0x35,0x23);
+	dsc_cmd_hs_send(2,0x37,0x09);
+	dsc_cmd_hs_send(2,0x38,0x04);
+	dsc_cmd_hs_send(2,0x39,0x08);
+	dsc_cmd_hs_send(2,0x3A,0x12);
+	dsc_cmd_hs_send(2,0x3C,0x78);
+	dsc_cmd_hs_send(2,0x3D,0xFF);
+	dsc_cmd_hs_send(2,0x3E,0xFF);
+	dsc_cmd_hs_send(2,0x3F,0xFF);
+	dsc_cmd_hs_send(2,0x40,0x06);
+	dsc_cmd_hs_send(2,0x41,0xA0);
+	dsc_cmd_hs_send(2,0x43,0x14);
+	dsc_cmd_hs_send(2,0x44,0x0F);
+	dsc_cmd_hs_send(2,0x45,0x30);
+
+	dsc_cmd_hs_send(2,0x4B,0x04);
+	dsc_cmd_hs_send(2,0x55,0x02);
+	dsc_cmd_hs_send(2,0x57,0x65);
+	dsc_cmd_hs_send(2,0x59,0x0A);
+	dsc_cmd_hs_send(2,0x5A,0x28);
+	dsc_cmd_hs_send(2,0x5B,0x15);
+	dsc_cmd_hs_send(2,0x5D,0x7C);
+	dsc_cmd_hs_send(2,0x5E,0x5A);
+	dsc_cmd_hs_send(2,0x5F,0x45);
+	dsc_cmd_hs_send(2,0x60,0x36);
+	dsc_cmd_hs_send(2,0x61,0x2F);
+	dsc_cmd_hs_send(2,0x62,0x20);
+	dsc_cmd_hs_send(2,0x63,0x24);
+	dsc_cmd_hs_send(2,0x64,0x0F);
+	dsc_cmd_hs_send(2,0x65,0x2C);
+	dsc_cmd_hs_send(2,0x66,0x2E);
+	dsc_cmd_hs_send(2,0x67,0x31);
+	dsc_cmd_hs_send(2,0x68,0x52);
+	dsc_cmd_hs_send(2,0x69,0x40);
+	dsc_cmd_hs_send(2,0x6A,0x49);
+	dsc_cmd_hs_send(2,0x6B,0x3E);
+	dsc_cmd_hs_send(2,0x6C,0x3B);
+	dsc_cmd_hs_send(2,0x6D,0x30);
+	dsc_cmd_hs_send(2,0x6E,0x21);
+	dsc_cmd_hs_send(2,0x6F,0x0C);
+	dsc_cmd_hs_send(2,0x70,0x7C);
+	dsc_cmd_hs_send(2,0x71,0x5A);
+	dsc_cmd_hs_send(2,0x72,0x45);
+	dsc_cmd_hs_send(2,0x73,0x36);
+	dsc_cmd_hs_send(2,0x74,0x2F);
+	dsc_cmd_hs_send(2,0x75,0x20);
+	dsc_cmd_hs_send(2,0x76,0x24);
+	dsc_cmd_hs_send(2,0x77,0x0F);
+	dsc_cmd_hs_send(2,0x78,0x2C);
+	dsc_cmd_hs_send(2,0x79,0x2E);
+	dsc_cmd_hs_send(2,0x7A,0x31);
+	dsc_cmd_hs_send(2,0x7B,0x52);
+	dsc_cmd_hs_send(2,0x7C,0x40);
+	dsc_cmd_hs_send(2,0x7D,0x49);
+	dsc_cmd_hs_send(2,0x7E,0x3E);
+	dsc_cmd_hs_send(2,0x7F,0x3B);
+	dsc_cmd_hs_send(2,0x80,0x30);
+	dsc_cmd_hs_send(2,0x81,0x21);
+	dsc_cmd_hs_send(2,0x82,0x0C);
+
+	dsc_cmd_hs_send(2,0xE0,0x02);
+	dsc_cmd_hs_send(2,0x00,0x5F);
+	dsc_cmd_hs_send(2,0x01,0x5F);
+	dsc_cmd_hs_send(2,0x02,0x53);
+	dsc_cmd_hs_send(2,0x03,0x51);
+	dsc_cmd_hs_send(2,0x04,0x4B);
+	dsc_cmd_hs_send(2,0x05,0x49);
+	dsc_cmd_hs_send(2,0x06,0x47);
+	dsc_cmd_hs_send(2,0x07,0x45);
+	dsc_cmd_hs_send(2,0x08,0x41);
+	dsc_cmd_hs_send(2,0x09,0x43);
+	dsc_cmd_hs_send(2,0x0A,0x5F);
+	dsc_cmd_hs_send(2,0x0B,0x5F);
+	dsc_cmd_hs_send(2,0x0C,0x5F);
+	dsc_cmd_hs_send(2,0x0D,0x5F);
+	dsc_cmd_hs_send(2,0x0E,0x5F);
+	dsc_cmd_hs_send(2,0x0F,0x5F);
+	dsc_cmd_hs_send(2,0x10,0x5F);
+	dsc_cmd_hs_send(2,0x11,0x5F);
+	dsc_cmd_hs_send(2,0x12,0x5F);
+	dsc_cmd_hs_send(2,0x13,0x5F);
+	dsc_cmd_hs_send(2,0x14,0x5F);
+	dsc_cmd_hs_send(2,0x15,0x5F);
+	dsc_cmd_hs_send(2,0x16,0x5F);
+	dsc_cmd_hs_send(2,0x17,0x5F);
+	dsc_cmd_hs_send(2,0x18,0x52);
+	dsc_cmd_hs_send(2,0x19,0x50);
+	dsc_cmd_hs_send(2,0x1A,0x4A);
+	dsc_cmd_hs_send(2,0x1B,0x48);
+	dsc_cmd_hs_send(2,0x1C,0x46);
+	dsc_cmd_hs_send(2,0x1D,0x44);
+	dsc_cmd_hs_send(2,0x1E,0x40);
+	dsc_cmd_hs_send(2,0x1F,0x42);
+	dsc_cmd_hs_send(2,0x20,0x5F);
+	dsc_cmd_hs_send(2,0x21,0x5F);
+	dsc_cmd_hs_send(2,0x22,0x5F);
+	dsc_cmd_hs_send(2,0x23,0x5F);
+	dsc_cmd_hs_send(2,0x24,0x5F);
+	dsc_cmd_hs_send(2,0x25,0x5F);
+	dsc_cmd_hs_send(2,0x26,0x5F);
+	dsc_cmd_hs_send(2,0x27,0x5F);
+	dsc_cmd_hs_send(2,0x28,0x5F);
+	dsc_cmd_hs_send(2,0x29,0x5F);
+	dsc_cmd_hs_send(2,0x2A,0x5F);
+	dsc_cmd_hs_send(2,0x2B,0x5F);
+	dsc_cmd_hs_send(2,0x2C,0x1F);
+	dsc_cmd_hs_send(2,0x2D,0x1F);
+	dsc_cmd_hs_send(2,0x2E,0x00);
+	dsc_cmd_hs_send(2,0x2F,0x02);
+	dsc_cmd_hs_send(2,0x30,0x08);
+	dsc_cmd_hs_send(2,0x31,0x0A);
+	dsc_cmd_hs_send(2,0x32,0x04);
+	dsc_cmd_hs_send(2,0x33,0x06);
+	dsc_cmd_hs_send(2,0x34,0x12);
+	dsc_cmd_hs_send(2,0x35,0x10);
+	dsc_cmd_hs_send(2,0x36,0x1F);
+	dsc_cmd_hs_send(2,0x37,0x1F);
+	dsc_cmd_hs_send(2,0x38,0x1F);
+	dsc_cmd_hs_send(2,0x39,0x1F);
+	dsc_cmd_hs_send(2,0x3A,0x1F);
+	dsc_cmd_hs_send(2,0x3B,0x1F);
+	dsc_cmd_hs_send(2,0x3C,0x1F);
+	dsc_cmd_hs_send(2,0x3D,0x1F);
+	dsc_cmd_hs_send(2,0x3E,0x1F);
+	dsc_cmd_hs_send(2,0x3F,0x1F);
+	dsc_cmd_hs_send(2,0x40,0x1F);
+	dsc_cmd_hs_send(2,0x41,0x1F);
+	dsc_cmd_hs_send(2,0x42,0x1F);
+	dsc_cmd_hs_send(2,0x43,0x1F);
+	dsc_cmd_hs_send(2,0x44,0x01);
+	dsc_cmd_hs_send(2,0x45,0x03);
+	dsc_cmd_hs_send(2,0x46,0x09);
+	dsc_cmd_hs_send(2,0x47,0x0B);
+	dsc_cmd_hs_send(2,0x48,0x05);
+	dsc_cmd_hs_send(2,0x49,0x07);
+	dsc_cmd_hs_send(2,0x4A,0x13);
+	dsc_cmd_hs_send(2,0x4B,0x11);
+	dsc_cmd_hs_send(2,0x4C,0x1F);
+	dsc_cmd_hs_send(2,0x4D,0x1F);
+	dsc_cmd_hs_send(2,0x4E,0x1F);
+	dsc_cmd_hs_send(2,0x4F,0x1F);
+	dsc_cmd_hs_send(2,0x50,0x1F);
+	dsc_cmd_hs_send(2,0x51,0x1F);
+	dsc_cmd_hs_send(2,0x52,0x1F);
+	dsc_cmd_hs_send(2,0x53,0x1F);
+	dsc_cmd_hs_send(2,0x54,0x1F);
+	dsc_cmd_hs_send(2,0x55,0x1F);
+	dsc_cmd_hs_send(2,0x56,0x1F);
+	dsc_cmd_hs_send(2,0x57,0x1F);
+	dsc_cmd_hs_send(2,0x58,0x40);
+	dsc_cmd_hs_send(2,0x59,0x00);
+	dsc_cmd_hs_send(2,0x5A,0x00);
+	dsc_cmd_hs_send(2,0x5B,0x30);
+	dsc_cmd_hs_send(2,0x5C,0x09);
+	dsc_cmd_hs_send(2,0x5D,0x30);
+	dsc_cmd_hs_send(2,0x5E,0x01);
+	dsc_cmd_hs_send(2,0x5F,0x02);
+	dsc_cmd_hs_send(2,0x60,0x30);
+	dsc_cmd_hs_send(2,0x61,0x03);
+	dsc_cmd_hs_send(2,0x62,0x04);
+	dsc_cmd_hs_send(2,0x63,0x1C);
+	dsc_cmd_hs_send(2,0x64,0x6A);
+	dsc_cmd_hs_send(2,0x65,0x75);
+	dsc_cmd_hs_send(2,0x66,0x0D);
+	dsc_cmd_hs_send(2,0x67,0x72);
+	dsc_cmd_hs_send(2,0x68,0x0C);
+	dsc_cmd_hs_send(2,0x69,0x1C);
+	dsc_cmd_hs_send(2,0x6A,0x6A);
+	dsc_cmd_hs_send(2,0x6B,0x08);
+	dsc_cmd_hs_send(2,0x6C,0x00);
+	dsc_cmd_hs_send(2,0x6D,0x00);
+	dsc_cmd_hs_send(2,0x6E,0x00);
+	dsc_cmd_hs_send(2,0x6F,0x88);
+	dsc_cmd_hs_send(2,0x70,0x00);
+	dsc_cmd_hs_send(2,0x71,0x00);
+	dsc_cmd_hs_send(2,0x72,0x06);
+	dsc_cmd_hs_send(2,0x73,0x7B);
+	dsc_cmd_hs_send(2,0x74,0x00);
+	dsc_cmd_hs_send(2,0x75,0xBB);
+	dsc_cmd_hs_send(2,0x76,0x01);
+	dsc_cmd_hs_send(2,0x77,0x0D);
+	dsc_cmd_hs_send(2,0x78,0x24);
+	dsc_cmd_hs_send(2,0x79,0x00);
+	dsc_cmd_hs_send(2,0x7A,0x00);
+	dsc_cmd_hs_send(2,0x7B,0x00);
+	dsc_cmd_hs_send(2,0x7C,0x00);
+	dsc_cmd_hs_send(2,0x7D,0x03);
+	dsc_cmd_hs_send(2,0x7E,0x7B);
+
+	dsc_cmd_hs_send(2,0xE0,0x04);
+	dsc_cmd_hs_send(2,0x00,0x0E);
+	dsc_cmd_hs_send(2,0x02,0xB3);
+	dsc_cmd_hs_send(2,0x0E,0x4A);
+
+	dsc_cmd_hs_send(2,0xE0,0x00);
+	dsc_cmd_hs_send(2,0xE6,0x02);
+	dsc_cmd_hs_send(2,0xE7,0x0C);
+
+	dsc_cmd_hs_send_short_pag(0x11);  	// SLPOUT
+	msleep(120);
+
+	dsc_cmd_hs_send_short_pag(0x29);  	// DSPON
+	msleep(5);
+
+	dsc_cmd_hs_send(2,0x35,0x00);
 }
+
 //b cnds_dsi_test.c:901
 void dsi_init_800x1280()
 {
 #if 1
-    int HACT = 800;
-    int HSA = 24;
-    int HBP = 24 ;
-    int HFP = 30 ;
-
-    int VACT = 1280;
-    int VSA = 4;
-    int VBP = 12;
-    int VFP = 8;
+	int HACT = 800;
+	int HSA = 24;
+	int HBP = 24 ;
+	int HFP = 30 ;
+
+	int VACT = 1280;
+	int VSA = 4;
+	int VBP = 12;
+	int VFP = 8;
 #else
-    int  HACT=800;
-    int  VACT=1280;
-    int  HSA=20;
-    int  HBP=20;
-    int  HFP=120;//220;    //144
-
-    int  VSA=5;
-    int  VBP=8;
-    int  VFP=5;
+	int  HACT=800;
+	int  VACT=1280;
+	int  HSA=20;
+	int  HBP=20;
+	int  HFP=120;//220;    //144
+
+	int  VSA=5;
+	int  VBP=8;
+	int  VFP=5;
 #endif
-    printf("dsi for lcd init start\n");
-
-    gd9365da_800x1280();
-
-    DsiRegWr(MCTL_MAIN_DATA_CTL_OFFSET, 0x1e021);
-    DsiRegWr(MCTL_MAIN_EN_OFFSET, 0x40f9);
-    //[6] tvg_sel = 1  test video generator enabled
-    //[5] vid_en = 1   enable the video stream generator
-    //[3:2] vid_if_select =2'b00  00:sdi;01:dpi��10:DSC
-    //[1] sdi_if_vid_mode = 1  select video mode
-    //[0] link_en = 1; // enable link
-
-    DsiRegWr(TVG_IMG_SIZE_OFFSET, (VACT << 16) + HACT * 3);
-    DsiRegWr(TVG_COLOR1_OFFSET, (0xFFF << 12) + 0); //[23:12] col1_green
-                                                    //[11:0]  col1_red
-    DsiRegWr(TVG_COLOR1_BIS_OFFSET, 0);             //[11:0]  col1_blue
-    DsiRegWr(TVG_COLOR2_OFFSET, (0x000 << 12) + 0x000);     //[23:12] col2_green
-                                                    //[11:0]  col2_red
-    DsiRegWr(TVG_COLOR2_BIS_OFFSET, 0xFFF);         //[11:0]  col2_blue
-
-    DsiRegWr(VID_VSIZE1_OFFSET, (VFP << 12) + (VBP << 6) + VSA);
-    //[19:12] vfp_length
-    //[11:6]  vbp_length
-    //[5:0]   vsa_length
-    DsiRegWr(VID_VSIZE2_OFFSET, VACT); //[12:0] vact_length
-    DsiRegWr(VID_HSIZE1_OFFSET, ((HBP * 3 - 12) << 16) + (HSA * 3 - 14));
-    //[31:16] hbp_length  =(dpi_hbp*24/8-12)
-    //[9:0]   hsa_length  =(dpi_hsa*24/8-14)
-
-    DsiRegWr(VID_HSIZE2_OFFSET, ((HFP * 3 - 6) << 16) + (HACT * 3));
-    //[26:16] hfp_length  =(dpi_hfp*24/8-6) >hss+hsa+hse+hbp
-    //[14:0] rgb_size
-    DsiRegWr(VID_BLKSIZE2_OFFSET, (HBP + HFP + HACT) * 3 - 6);
-    //[14:0] blkline_pulse_pck = (dpi_hsa+dpi_hbp+dpi_hact+dpi_hfp)*24/8-20-((dpi_hsa*24/8)-14)=3342
-    // DsiRegWr(VID_DPHY_TIME_OFFSET, (0x38 << 17) + (((HBP + HFP + HACT) * 3 + 3) / 4));
-    DsiRegWr(VID_DPHY_TIME_OFFSET, (0x38 << 17) + ((HSA + HBP + HFP + HACT) * 3 / 4) - ((HSA * 3 - 14) / 4));
-    //[16:0] reg_line_duration =(line_total_)
-    //[27:17] reg_wakeup_time
-    DsiRegWr(VID_VCA_SETTING1_OFFSET, 0);
-    DsiRegWr(VID_VCA_SETTING2_OFFSET, (((HBP + HFP + HACT) * 3 - 6 - 6) << 16));
-    //[31:16] max_line_limit = gen_blkline_pulse_pck-6;
-    DsiRegWr(VID_MAIN_CTL_OFFSET, (0x1 << 31) + (0x1 << 25) + (0x0 << 21) + (1 << 20) + (1 << 19) + (3 << 14) + (0x3e << 8) + 0);
-    //[31] vid_ignore_miss_vsync =1
-    //[26:25] recovery_mode
-    //[24:23] reg_blkeol_mode : same as reg_blkline_mode but using in burst mode
-    //[22:21] reg_blkline_mode : 1x: LP
-    //                            01: blanking packet
-    //                            00: null packet
-    //[20] sync_pulse_horizontal:syncs are pulse(1) or event(0)
-    //[19] sync_pulse_active :1
-    //[18] burst mode
-    //[17:14] vid_pixel_mode  0000: 16 bits RGB
-    //                        0001: 18 bits RGB
-    //                        0010: 18 bits RGB(loose)
-    //                        0011: 24 bits RGB
-    //                        0100: 30 bits RGB
-    //                        0101: 36 bits RGB
-    //                        1000: 12 bits YCbCr
-    //                        1001: 16 bits YCbCr
-    //                        1010: 20 bits YCbCr
-    //                        1011: 24 bits YCbCr
-    //                        1100: DSC Compressed
-    //[13:0] Header:  Datatype of RGB packets "0x3e  rgb24
-    //[1:0]  start mode:start_mode=0
-    //         DsiRegWr(TVG_CTL_OFFSET,(6<<5)+(2<<3) + (2<<1) + 1 ) ;//[7:5]tvg_stripe_size
-    //[4:3] tvg_mode 00:single color
-    //                01:reserved
-    //                10:verical  stripes
-    //                11:horizontal  stripes
-    //[2:1] tvg_stopmode  00: at the end of frame
-    //                     01: at the end of line
-    //                      1x: immediate
-    //[0]   tvg run
-
-    printf("dsi for lcd init done\n");
-
-    printf("TVG start\n");
+	printf("dsi for lcd init start\n");
+
+	gd9365da_800x1280();
+
+	DsiRegWr(MCTL_MAIN_DATA_CTL_OFFSET, 0x1e021);
+	DsiRegWr(MCTL_MAIN_EN_OFFSET, 0x40f9);
+	//[6] tvg_sel = 1  test video generator enabled
+	//[5] vid_en = 1   enable the video stream generator
+	//[3:2] vid_if_select =2'b00  00:sdi;01:dpi��10:DSC
+	//[1] sdi_if_vid_mode = 1  select video mode
+	//[0] link_en = 1; // enable link
+
+	DsiRegWr(TVG_IMG_SIZE_OFFSET, (VACT << 16) + HACT * 3);
+	DsiRegWr(TVG_COLOR1_OFFSET, (0xFFF << 12) + 0); //[23:12] col1_green
+	//[11:0]  col1_red
+	DsiRegWr(TVG_COLOR1_BIS_OFFSET, 0);             //[11:0]  col1_blue
+	DsiRegWr(TVG_COLOR2_OFFSET, (0x000 << 12) + 0x000);     //[23:12] col2_green
+	//[11:0]  col2_red
+	DsiRegWr(TVG_COLOR2_BIS_OFFSET, 0xFFF);         //[11:0]  col2_blue
+
+	DsiRegWr(VID_VSIZE1_OFFSET, (VFP << 12) + (VBP << 6) + VSA);
+	//[19:12] vfp_length
+	//[11:6]  vbp_length
+	//[5:0]   vsa_length
+	DsiRegWr(VID_VSIZE2_OFFSET, VACT); //[12:0] vact_length
+	DsiRegWr(VID_HSIZE1_OFFSET, ((HBP * 3 - 12) << 16) + (HSA * 3 - 14));
+	//[31:16] hbp_length  =(dpi_hbp*24/8-12)
+	//[9:0]   hsa_length  =(dpi_hsa*24/8-14)
+
+	DsiRegWr(VID_HSIZE2_OFFSET, ((HFP * 3 - 6) << 16) + (HACT * 3));
+	//[26:16] hfp_length  =(dpi_hfp*24/8-6) >hss+hsa+hse+hbp
+	//[14:0] rgb_size
+	DsiRegWr(VID_BLKSIZE2_OFFSET, (HBP + HFP + HACT) * 3 - 6);
+	//[14:0] blkline_pulse_pck = (dpi_hsa+dpi_hbp+dpi_hact+dpi_hfp)*24/8-20-((dpi_hsa*24/8)-14)=3342
+	// DsiRegWr(VID_DPHY_TIME_OFFSET, (0x38 << 17) + (((HBP + HFP + HACT) * 3 + 3) / 4));
+	DsiRegWr(VID_DPHY_TIME_OFFSET, (0x38 << 17) + ((HSA + HBP + HFP + HACT) * 3 / 4) - ((HSA * 3 - 14) / 4));
+	//[16:0] reg_line_duration =(line_total_)
+	//[27:17] reg_wakeup_time
+	DsiRegWr(VID_VCA_SETTING1_OFFSET, 0);
+	DsiRegWr(VID_VCA_SETTING2_OFFSET, (((HBP + HFP + HACT) * 3 - 6 - 6) << 16));
+	//[31:16] max_line_limit = gen_blkline_pulse_pck-6;
+	DsiRegWr(VID_MAIN_CTL_OFFSET, (0x1 << 31) + (0x1 << 25) + (0x0 << 21) + (1 << 20) + (1 << 19) + (3 << 14) + (0x3e << 8) + 0);
+	//[31] vid_ignore_miss_vsync =1
+	//[26:25] recovery_mode
+	//[24:23] reg_blkeol_mode : same as reg_blkline_mode but using in burst mode
+	//[22:21] reg_blkline_mode : 1x: LP
+	//                            01: blanking packet
+	//                            00: null packet
+	//[20] sync_pulse_horizontal:syncs are pulse(1) or event(0)
+	//[19] sync_pulse_active :1
+	//[18] burst mode
+	//[17:14] vid_pixel_mode  0000: 16 bits RGB
+	//                        0001: 18 bits RGB
+	//                        0010: 18 bits RGB(loose)
+	//                        0011: 24 bits RGB
+	//                        0100: 30 bits RGB
+	//                        0101: 36 bits RGB
+	//                        1000: 12 bits YCbCr
+	//                        1001: 16 bits YCbCr
+	//                        1010: 20 bits YCbCr
+	//                        1011: 24 bits YCbCr
+	//                        1100: DSC Compressed
+	//[13:0] Header:  Datatype of RGB packets "0x3e  rgb24
+	//[1:0]  start mode:start_mode=0
+	//         DsiRegWr(TVG_CTL_OFFSET,(6<<5)+(2<<3) + (2<<1) + 1 ) ;//[7:5]tvg_stripe_size
+	//[4:3] tvg_mode 00:single color
+	//                01:reserved
+	//                10:verical  stripes
+	//                11:horizontal  stripes
+	//[2:1] tvg_stopmode  00: at the end of frame
+	//                     01: at the end of line
+	//                      1x: immediate
+	//[0]   tvg run
+
+	printf("dsi for lcd init done\n");
+
+	printf("TVG start\n");
 #if 0
-    //test mode
-     DsiRegWr(MCTL_MAIN_DATA_CTL_OFFSET, 0x1e061);    //test mode
-    volatile uint8_t test_mode = 3;
-    DsiRegWr(TVG_CTL_OFFSET, (6 << 5) + (test_mode << 3) + (0 << 1) + 1);
-#endif  
-    // sleep(2);
-  //  while (1);
-    // DsiRegWr(TVG_CTL_OFFSET, (3 << 5) + (2 << 3) + (0 << 1) + 0);
-    // DsiRegWr(MCTL_MAIN_DATA_CTL_OFFSET, 0x1e000);
-    // DsiRegWr(VID_MODE_STS_CLR_OFFSET, 0x7ff);
-    // DsiRegWr(TG_STS_CLR_OFFSET, 0x1);
-    // msleep(100);
-    // DsiRegWr(MCTL_MAIN_DATA_CTL_OFFSET, 0x1e021);
-    // printf("TVG stop\n");
-
+	//test mode
+	DsiRegWr(MCTL_MAIN_DATA_CTL_OFFSET, 0x1e061);    //test mode
+	volatile uint8_t test_mode = 3;
+	DsiRegWr(TVG_CTL_OFFSET, (6 << 5) + (test_mode << 3) + (0 << 1) + 1);
+#endif
+	// sleep(2);
+	//  while (1);
+	// DsiRegWr(TVG_CTL_OFFSET, (3 << 5) + (2 << 3) + (0 << 1) + 0);
+	// DsiRegWr(MCTL_MAIN_DATA_CTL_OFFSET, 0x1e000);
+	// DsiRegWr(VID_MODE_STS_CLR_OFFSET, 0x7ff);
+	// DsiRegWr(TG_STS_CLR_OFFSET, 0x1);
+	// msleep(100);
+	// DsiRegWr(MCTL_MAIN_DATA_CTL_OFFSET, 0x1e021);
+	// printf("TVG stop\n");
 }
diff --git a/board/Canaan/dsi_logo/test/log/vo/vo_app.c b/board/Canaan/dsi_logo/test/log/vo/vo_app.c
old mode 100755
new mode 100644
index f923c545..32d404ef
--- a/board/Canaan/dsi_logo/test/log/vo/vo_app.c
+++ b/board/Canaan/dsi_logo/test/log/vo/vo_app.c
@@ -38,215 +38,215 @@
 
 /******************************************************************************
  *  CORE com*
-******************************************************************************/
+ ******************************************************************************/
 /*
-*disp
-*/
+ *disp
+ */
 static int VO_TEST_SetFrameBit(VO_DISP_CTL_INFO_S *dispCtl,VO_DISP_INFO_S *dispInfo)
 {
 	VO_CHECK_POINTER(dispCtl);
-    VO_CHECK_POINTER(dispInfo);
+	VO_CHECK_POINTER(dispInfo);
 
-    switch(dispCtl->SyncMode)
-    {
-        case VO_SYSTEM_MODE_1920x1080x30P:
+	switch(dispCtl->SyncMode)
+	{
+		case VO_SYSTEM_MODE_1920x1080x30P:
 			dispInfo->dispHsyncCtl_start= 0x6;
 			dispInfo->dispHsyncCtl_stop= 0x32;
-		
+
 			dispInfo->dispHsync1Ctl_start= 0x6;
 			dispInfo->dispHsync1Ctl_stop= 0x6;
 			dispInfo->dispVsync1Ctl_start= 0x1;
 			dispInfo->dispVsync1Ctl_stop= 0x6;
-		
+
 			dispInfo->dispHsync2Ctl_start= 0x6;
 			dispInfo->dispHsync2Ctl_stop= 0x6;
 			dispInfo->dispVsync2Ctl_start= 0x1;
 			dispInfo->dispVsync2Ctl_stop= 0x6;
 			//
-		//	dispInfo->vsize= 0x898;
-		//	dispInfo->hsize= 0x465; 
-            break;
-        case VO_SYSTEM_MODE_1920x1080x25P:
+			//	dispInfo->vsize= 0x898;
+			//	dispInfo->hsize= 0x465;
+			break;
+		case VO_SYSTEM_MODE_1920x1080x25P:
 			dispInfo->dispHsyncCtl_start= 0x6;
 			dispInfo->dispHsyncCtl_stop= 0x32;
-		
+
 			dispInfo->dispHsync1Ctl_start= 0x6;
 			dispInfo->dispHsync1Ctl_stop= 0x6;
 			dispInfo->dispVsync1Ctl_start= 0x1;
 			dispInfo->dispVsync1Ctl_stop= 0x6;
-		
+
 			dispInfo->dispHsync2Ctl_start= 0x6;
 			dispInfo->dispHsync2Ctl_stop= 0x6;
 			dispInfo->dispVsync2Ctl_start= 0x1;
 			dispInfo->dispVsync2Ctl_stop= 0x6;
 			//
-		//	dispInfo->vsize= 0xa50;
-		//	dispInfo->hsize= 0x465;         
-            break; 
-        case VO_SYSTEM_MODE_1280x720x50P:
+			//	dispInfo->vsize= 0xa50;
+			//	dispInfo->hsize= 0x465;
+			break;
+		case VO_SYSTEM_MODE_1280x720x50P:
 			dispInfo->dispHsyncCtl_start= 0x6;
 			dispInfo->dispHsyncCtl_stop= 0x2d;
-		
+
 			dispInfo->dispHsync1Ctl_start= 0x6;
 			dispInfo->dispHsync1Ctl_stop= 0x6;
 			dispInfo->dispVsync1Ctl_start= 0x1;
 			dispInfo->dispVsync1Ctl_stop= 0x6;
-		
+
 			dispInfo->dispHsync2Ctl_start= 0x6;
 			dispInfo->dispHsync2Ctl_stop= 0x6;
 			dispInfo->dispVsync2Ctl_start= 0x1;
 			dispInfo->dispVsync2Ctl_stop= 0x6;
 			//
-		//	dispInfo->vsize= 0x7bc;
-		//	dispInfo->hsize= 0x2ee;         
-            break; 
-        case VO_SYSTEM_MODE_1280x720x60P:
+			//	dispInfo->vsize= 0x7bc;
+			//	dispInfo->hsize= 0x2ee;
+			break;
+		case VO_SYSTEM_MODE_1280x720x60P:
 			dispInfo->dispHsyncCtl_start= 0x6;
 			dispInfo->dispHsyncCtl_stop= 0x2d;
-		
+
 			dispInfo->dispHsync1Ctl_start= 0x6;
 			dispInfo->dispHsync1Ctl_stop= 0x6;
 			dispInfo->dispVsync1Ctl_start= 0x1;
 			dispInfo->dispVsync1Ctl_stop= 0x6;
-		
+
 			dispInfo->dispHsync2Ctl_start= 0x6;
 			dispInfo->dispHsync2Ctl_stop= 0x6;
 			dispInfo->dispVsync2Ctl_start= 0x1;
 			dispInfo->dispVsync2Ctl_stop= 0x6;
 			//
-		//	dispInfo->vsize= 0x672;
-		//	dispInfo->hsize= 0x2ee; 
-            break; 
-        case VO_SYSTEM_MODE_1280x720x30P:
+			//	dispInfo->vsize= 0x672;
+			//	dispInfo->hsize= 0x2ee;
+			break;
+		case VO_SYSTEM_MODE_1280x720x30P:
 			dispInfo->dispHsyncCtl_start= 0x6;
 			dispInfo->dispHsyncCtl_stop= 0x2d;
-		
+
 			dispInfo->dispHsync1Ctl_start= 0x6;
 			dispInfo->dispHsync1Ctl_stop= 0x6;
 			dispInfo->dispVsync1Ctl_start= 0x1;
 			dispInfo->dispVsync1Ctl_stop= 0x6;
-		
+
 			dispInfo->dispHsync2Ctl_start= 0x6;
 			dispInfo->dispHsync2Ctl_stop= 0x6;
 			dispInfo->dispVsync2Ctl_start= 0x1;
 			dispInfo->dispVsync2Ctl_stop= 0x6;
 			//
-		//	dispInfo->vsize= 0xce4;
-		//	dispInfo->hsize= 0x2ee;         
-            break; 
-        case VO_SYSTEM_MODE_1280x720x25P:
+			//	dispInfo->vsize= 0xce4;
+			//	dispInfo->hsize= 0x2ee;
+			break;
+		case VO_SYSTEM_MODE_1280x720x25P:
 			dispInfo->dispHsyncCtl_start= 0x6;
 			dispInfo->dispHsyncCtl_stop= 0x2d;
-		
+
 			dispInfo->dispHsync1Ctl_start= 0x6;
 			dispInfo->dispHsync1Ctl_stop= 0x6;
 			dispInfo->dispVsync1Ctl_start= 0x1;
 			dispInfo->dispVsync1Ctl_stop= 0x6;
-		
+
 			dispInfo->dispHsync2Ctl_start= 0x6;
 			dispInfo->dispHsync2Ctl_stop= 0x6;
 			dispInfo->dispVsync2Ctl_start= 0x1;
 			dispInfo->dispVsync2Ctl_stop= 0x6;
 			//
-		//	dispInfo->vsize= 0xf78;
-		//	dispInfo->hsize= 0x2ee;  
-            break;
-        case VO_SYSTEM_MODE_1080x1920x30P:
+			//	dispInfo->vsize= 0xf78;
+			//	dispInfo->hsize= 0x2ee;
+			break;
+		case VO_SYSTEM_MODE_1080x1920x30P:
 #if 0
 			dispInfo->dispHsyncCtl_start= 0x5;                              // HSA = 0x19 - 0x5 = 20
 			dispInfo->dispHsyncCtl_stop= 0x19;//0x25;
-		
+
 			dispInfo->dispHsync1Ctl_start= 0x1;
 			dispInfo->dispHsync1Ctl_stop= 0x5;
-            
+
 			dispInfo->dispVsync1Ctl_start= 0x1;
 			dispInfo->dispVsync1Ctl_stop= 0x1;
 #else
-            dispInfo->dispHsyncCtl_start= 0x5;                              // HSA = 0x19 - 0x5 = 20
+			dispInfo->dispHsyncCtl_start= 0x5;                              // HSA = 0x19 - 0x5 = 20
 			dispInfo->dispHsyncCtl_stop= 0x19;//0x25;
-		
+
 			dispInfo->dispHsync1Ctl_start= 0x1;                             //  VSA = 0x05 - 0x01 = 0x04
 			dispInfo->dispHsync1Ctl_stop= 0x5;
-            
+
 			dispInfo->dispVsync1Ctl_start= 0x1;
 			dispInfo->dispVsync1Ctl_stop= 0x1;
 
 #endif
-		
-//			dispInfo->dispHsync2Ctl_start= 0x1;                             // 可以不配
-//			dispInfo->dispHsync2Ctl_stop= 0x5;                              // 可以不配
 
-//			dispInfo->dispVsync2Ctl_start= 0x1;
-//			dispInfo->dispVsync2Ctl_stop= 0x1;
+			//			dispInfo->dispHsync2Ctl_start= 0x1;                             // 可以不配
+			//			dispInfo->dispHsync2Ctl_stop= 0x5;                              // 可以不配
+
+			//			dispInfo->dispVsync2Ctl_start= 0x1;
+			//			dispInfo->dispVsync2Ctl_stop= 0x1;
 
 			//
-		//	dispInfo->vsize= 0x53c;
-		//	dispInfo->hsize= 0x7a6;  
-            break; 
-        case VO_SYSTEM_MODE_800x1280x30P:
-
-            printf("------------------------VO_SYSTEM_MODE_800x1280x30P  \n");
-#if 0 
-            dispInfo->dispHsyncCtl_start= 0x5;                              // HSA = 0x19 - 0x5 = 20
+			//	dispInfo->vsize= 0x53c;
+			//	dispInfo->hsize= 0x7a6;
+			break;
+		case VO_SYSTEM_MODE_800x1280x30P:
+
+			printf("------------------------VO_SYSTEM_MODE_800x1280x30P  \n");
+#if 0
+			dispInfo->dispHsyncCtl_start= 0x5;                              // HSA = 0x19 - 0x5 = 20
 			dispInfo->dispHsyncCtl_stop= 0x19;//0x25;
-		
+
 			dispInfo->dispHsync1Ctl_start= 0x1;                             //  VSA = 0x05 - 0x01 = 0x04
 			dispInfo->dispHsync1Ctl_stop= 0x5;
-            
+
 			dispInfo->dispVsync1Ctl_start= 0x1;
 			dispInfo->dispVsync1Ctl_stop= 0x1;
 
-            dispInfo->dispHsync2Ctl_start= 0x1;                             // 可以不配
+			dispInfo->dispHsync2Ctl_start= 0x1;                             // 可以不配
 			dispInfo->dispHsync2Ctl_stop= 0x5;                              // 可以不配
 
 			dispInfo->dispVsync2Ctl_start= 0x1;
 			dispInfo->dispVsync2Ctl_stop= 0x1;
 #else
-            dispInfo->dispHsyncCtl_start= 5;                              // HSA = 0x19 - 0x5 = 20
+			dispInfo->dispHsyncCtl_start= 5;                              // HSA = 0x19 - 0x5 = 20
 			dispInfo->dispHsyncCtl_stop= 10;
-		
+
 			dispInfo->dispHsync1Ctl_start= 1;                             //  VSA = 0x05 - 0x01 = 0x04
 			dispInfo->dispHsync1Ctl_stop= 5;
-            
+
 			dispInfo->dispVsync1Ctl_start= 1;
 			dispInfo->dispVsync1Ctl_stop= 1;
 #endif
 
-            break;   
-        default:
-            VO_PRINTF_FUNC("ERR_VO_ILLEGAL_PARAM!\n");
-            break;     
-    }
-    return 0;
+			break;
+		default:
+			VO_PRINTF_FUNC("ERR_VO_ILLEGAL_PARAM!\n");
+			break;
+	}
+	return 0;
 }
 /*
-*Osd Rgb2Yuv
-*/
+ *Osd Rgb2Yuv
+ */
 static int VO_TEST_SetOsdRgb2YuvInfo(VO_OSD_RGB2YUV_INFO_S *osdRgb2YuvInfo)
 {
-    VO_CHECK_POINTER(osdRgb2YuvInfo);
-
-    osdRgb2YuvInfo->osdrgb2yuv_coeff[0][0] = 0x00000132;
-    osdRgb2YuvInfo->osdrgb2yuv_coeff[0][1] = 0x00000259;
-    osdRgb2YuvInfo->osdrgb2yuv_coeff[0][2] = 0x00000075;
-    osdRgb2YuvInfo->osdrgb2yuv_coeff[0][3] = 0x00000000;
-    osdRgb2YuvInfo->osdrgb2yuv_coeff[1][0] = 0x00000f50;
-    osdRgb2YuvInfo->osdrgb2yuv_coeff[1][1] = 0x00000ea5;
-    osdRgb2YuvInfo->osdrgb2yuv_coeff[1][2] = 0x0000020b;
-    osdRgb2YuvInfo->osdrgb2yuv_coeff[1][3] = 0x00000080;
-    osdRgb2YuvInfo->osdrgb2yuv_coeff[2][0] = 0x0000020b;
-    osdRgb2YuvInfo->osdrgb2yuv_coeff[2][1] = 0x00000e4a;
-    osdRgb2YuvInfo->osdrgb2yuv_coeff[2][2] = 0x00000fab;
-    osdRgb2YuvInfo->osdrgb2yuv_coeff[2][3] = 0x00000080;
-
-    return 0; 
-}  
+	VO_CHECK_POINTER(osdRgb2YuvInfo);
+
+	osdRgb2YuvInfo->osdrgb2yuv_coeff[0][0] = 0x00000132;
+	osdRgb2YuvInfo->osdrgb2yuv_coeff[0][1] = 0x00000259;
+	osdRgb2YuvInfo->osdrgb2yuv_coeff[0][2] = 0x00000075;
+	osdRgb2YuvInfo->osdrgb2yuv_coeff[0][3] = 0x00000000;
+	osdRgb2YuvInfo->osdrgb2yuv_coeff[1][0] = 0x00000f50;
+	osdRgb2YuvInfo->osdrgb2yuv_coeff[1][1] = 0x00000ea5;
+	osdRgb2YuvInfo->osdrgb2yuv_coeff[1][2] = 0x0000020b;
+	osdRgb2YuvInfo->osdrgb2yuv_coeff[1][3] = 0x00000080;
+	osdRgb2YuvInfo->osdrgb2yuv_coeff[2][0] = 0x0000020b;
+	osdRgb2YuvInfo->osdrgb2yuv_coeff[2][1] = 0x00000e4a;
+	osdRgb2YuvInfo->osdrgb2yuv_coeff[2][2] = 0x00000fab;
+	osdRgb2YuvInfo->osdrgb2yuv_coeff[2][3] = 0x00000080;
+
+	return 0;
+}
 /*
-*MFBD
-*/
+ *MFBD
+ */
 static int VO_TEST_SetMfbdInfo(unsigned int mfbd_en,VO_LAYER0_MFBD_INFO_S *mfbdInfo)
 {
-    VO_CHECK_POINTER(mfbdInfo);
+	VO_CHECK_POINTER(mfbdInfo);
 
 	mfbdInfo->mfbd_en = mfbd_en;
 	mfbdInfo->y_addr0= MFBC_Y_DATA_WR_ADDR0;//DUMP_Y_MFBD_DATA_ADDR0;
@@ -266,588 +266,588 @@ static int VO_TEST_SetMfbdInfo(unsigned int mfbd_en,VO_LAYER0_MFBD_INFO_S *mfbdI
 	mfbdInfo->uv_head_addr1= MFBC_UV_HEAD_WR_ADDR1;//DUMP_UV_MFBD_HEAD_ADDR0;
 	mfbdInfo->uv_head_stride1= MFBC_DATA_STRIDE*4/32;//DUMP_UV_MFBD_HEAD_STRIDE0*4/32;
 
-    return 0;
+	return 0;
 }
 /*
-*Yuv2Rgb
-*/
+ *Yuv2Rgb
+ */
 static int VO_TEST_SetYuv2RgbInfo(unsigned int yuv2rgb_ctl_en,VO_YUV2RGB_INFO_S *yuv2rgbInfo)
 {
-    VO_CHECK_POINTER(yuv2rgbInfo);
-
-    yuv2rgbInfo->yuv2rgb_ctl_en = yuv2rgb_ctl_en;
-
-    yuv2rgbInfo->yuv2rgb_coeff[0][0] =0x00000400;
-    yuv2rgbInfo->yuv2rgb_coeff[0][1] =0x00000000;
-    yuv2rgbInfo->yuv2rgb_coeff[0][2] =0x000005a1;
-    yuv2rgbInfo->yuv2rgb_coeff[0][3] =0x00000f4c;
-    yuv2rgbInfo->yuv2rgb_coeff[1][0] =0x00000400;
-    yuv2rgbInfo->yuv2rgb_coeff[1][1] =0x00000e9e;
-    yuv2rgbInfo->yuv2rgb_coeff[1][2] =0x00000d22;
-    yuv2rgbInfo->yuv2rgb_coeff[1][3] =0x00000088;
-    yuv2rgbInfo->yuv2rgb_coeff[2][0] =0x00000400;
-    yuv2rgbInfo->yuv2rgb_coeff[2][1] =0x0000071e;
-    yuv2rgbInfo->yuv2rgb_coeff[2][2] =0x00000000;
-    yuv2rgbInfo->yuv2rgb_coeff[2][3] =0x00000f1c;
-
-    return 0; 
+	VO_CHECK_POINTER(yuv2rgbInfo);
+
+	yuv2rgbInfo->yuv2rgb_ctl_en = yuv2rgb_ctl_en;
+
+	yuv2rgbInfo->yuv2rgb_coeff[0][0] =0x00000400;
+	yuv2rgbInfo->yuv2rgb_coeff[0][1] =0x00000000;
+	yuv2rgbInfo->yuv2rgb_coeff[0][2] =0x000005a1;
+	yuv2rgbInfo->yuv2rgb_coeff[0][3] =0x00000f4c;
+	yuv2rgbInfo->yuv2rgb_coeff[1][0] =0x00000400;
+	yuv2rgbInfo->yuv2rgb_coeff[1][1] =0x00000e9e;
+	yuv2rgbInfo->yuv2rgb_coeff[1][2] =0x00000d22;
+	yuv2rgbInfo->yuv2rgb_coeff[1][3] =0x00000088;
+	yuv2rgbInfo->yuv2rgb_coeff[2][0] =0x00000400;
+	yuv2rgbInfo->yuv2rgb_coeff[2][1] =0x0000071e;
+	yuv2rgbInfo->yuv2rgb_coeff[2][2] =0x00000000;
+	yuv2rgbInfo->yuv2rgb_coeff[2][3] =0x00000f1c;
+
+	return 0;
 }
 /*
-*Disp iRQ
-*/
+ *Disp iRQ
+ */
 static int VO_TEST_SetDispIrqInfo(VO_DISP_IRQ_INFO_S *dispIrqInfo)
 {
-    VO_CHECK_POINTER(dispIrqInfo);
+	VO_CHECK_POINTER(dispIrqInfo);
 
-    dispIrqInfo->underrundcnt0= 2;
-    dispIrqInfo->en0= FALSE;
-    dispIrqInfo->underrundcnt1= 2;
-    dispIrqInfo->en1= FALSE;
-    dispIrqInfo->underrundcnt2= 2;
-    dispIrqInfo->en2= FALSE;
+	dispIrqInfo->underrundcnt0= 2;
+	dispIrqInfo->en0= FALSE;
+	dispIrqInfo->underrundcnt1= 2;
+	dispIrqInfo->en1= FALSE;
+	dispIrqInfo->underrundcnt2= 2;
+	dispIrqInfo->en2= FALSE;
 
-    return 0; 
+	return 0;
 }
 /*
-*disp
-*/
+ *disp
+ */
 static int VO_TEST_SetDisp(VO_DISP_CTL_INFO_S *dispCtl,VO_DISP_INFO_S *dispInfo)
 {
-    VO_CHECK_POINTER(dispCtl);
-    VO_CHECK_POINTER(dispInfo);
-
-    if(TRUE == dispCtl->Disp_en)
-    {
-    	dispInfo->dispEnable= FALSE;
-    }
-    else
-    {
-    	dispInfo->dispEnable= TRUE;
-    }
-
-    dispInfo->xZoneCtl_start=  dispCtl->disp_start.Width;//VIDEO_DISP_ZONE_X_START;
-    dispInfo->xZoneCtl_stop=  dispCtl->disp_stop.Width - 1;//VIDEO_DISP_ZONE_X_STOP - 1;
-    dispInfo->yZoneCtl_start=  dispCtl->disp_start.Height;//VIDEO_DISP_ZONE_Y_START;
-    dispInfo->yZoneCtl_stop=  dispCtl->disp_stop.Height - 1;//VIDEO_DISP_ZONE_Y_STOP -1;
-    //
-    dispInfo->vcntbit0    = 0;
-    dispInfo->secndfoffset= 3;
-    dispInfo->framesyncdly= 8;
-    //
-    //unsigned int SyncMode = VO_SYSTEM_MODE_1920x1080x30P;
-    VO_TEST_SetFrameBit(dispCtl,dispInfo);
-    dispInfo->hsize= dispCtl->total_size.Width;//0x898;
+	VO_CHECK_POINTER(dispCtl);
+	VO_CHECK_POINTER(dispInfo);
+
+	if(TRUE == dispCtl->Disp_en)
+	{
+		dispInfo->dispEnable= FALSE;
+	}
+	else
+	{
+		dispInfo->dispEnable= TRUE;
+	}
+
+	dispInfo->xZoneCtl_start=  dispCtl->disp_start.Width;//VIDEO_DISP_ZONE_X_START;
+	dispInfo->xZoneCtl_stop=  dispCtl->disp_stop.Width - 1;//VIDEO_DISP_ZONE_X_STOP - 1;
+	dispInfo->yZoneCtl_start=  dispCtl->disp_start.Height;//VIDEO_DISP_ZONE_Y_START;
+	dispInfo->yZoneCtl_stop=  dispCtl->disp_stop.Height - 1;//VIDEO_DISP_ZONE_Y_STOP -1;
+	//
+	dispInfo->vcntbit0    = 0;
+	dispInfo->secndfoffset= 3;
+	dispInfo->framesyncdly= 8;
+	//
+	//unsigned int SyncMode = VO_SYSTEM_MODE_1920x1080x30P;
+	VO_TEST_SetFrameBit(dispCtl,dispInfo);
+	dispInfo->hsize= dispCtl->total_size.Width;//0x898;
 	dispInfo->vsize= dispCtl->total_size.Height;//0x465;
-    return 0;
+	return 0;
 }
 /*
-*layer0
-*/
+ *layer0
+ */
 static int VO_TEST_SetLayer0(VO_LAYER_CTL_INFO_S *layer0Ctl,VO_LAYER0_INFO_S *layer0Info,VO_MIX_INFO_S *layer0MixInfo)
-{	
-    VO_CHECK_POINTER(layer0Ctl);
-    VO_CHECK_POINTER(layer0Info);
-    VO_CHECK_POINTER(layer0MixInfo);
+{
+	VO_CHECK_POINTER(layer0Ctl);
+	VO_CHECK_POINTER(layer0Info);
+	VO_CHECK_POINTER(layer0MixInfo);
 
 
-    layer0Info->layer0DispEn= layer0Ctl->layer_en;
-	layer0Info->layer0En= layer0Ctl->layer_en; 
+	layer0Info->layer0DispEn= layer0Ctl->layer_en;
+	layer0Info->layer0En= layer0Ctl->layer_en;
 	layer0Info->scalerBlen= 0x7;
 	//
 	VO_LAYER0_DAT_MODE_INFO_S *datModeInfo= &layer0Info->datModeInfo;
-    datModeInfo->datmode = layer0Ctl->ImgInDataMode;
-    datModeInfo->endiany = layer0Ctl->endiany ;//VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
-    datModeInfo->endianuv= layer0Ctl->endianuv ;//VO_VIDEO_LAYER_UV_ENDIAN_MODE3;
-    datModeInfo->swi= layer0Ctl->uvswap;//TRUE;
+	datModeInfo->datmode = layer0Ctl->ImgInDataMode;
+	datModeInfo->endiany = layer0Ctl->endiany ;//VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
+	datModeInfo->endianuv= layer0Ctl->endianuv ;//VO_VIDEO_LAYER_UV_ENDIAN_MODE3;
+	datModeInfo->swi= layer0Ctl->uvswap;//TRUE;
 	//
 	VO_LAYER_AREA_INFO_S *areaInfo= &layer0Info->areaInfo;
-    areaInfo->xCtl_start= layer0Ctl->ctl_offset.Width;//VIDEO_LAYER0_H_POSITION;
-    areaInfo->xCtl_stop= layer0Ctl->ctl_offset.Width + layer0Ctl->out_size.Width - 1;// - 1;//VIDEO_LAYER0_H_POSITION + VIDEO_LAYER0_H_OUT_SIZE;
-    areaInfo->yCtl_start= layer0Ctl->ctl_offset.Height;//VIDEO_LAYER0_V_POSITION;
-    areaInfo->yCtl_stop= layer0Ctl->ctl_offset.Height + layer0Ctl->out_size.Height;// - 1;//VIDEO_LAYER0_V_POSITION + VIDEO_LAYER0_V_OUT_SIZE;
+	areaInfo->xCtl_start= layer0Ctl->ctl_offset.Width;//VIDEO_LAYER0_H_POSITION;
+	areaInfo->xCtl_stop= layer0Ctl->ctl_offset.Width + layer0Ctl->out_size.Width - 1;// - 1;//VIDEO_LAYER0_H_POSITION + VIDEO_LAYER0_H_OUT_SIZE;
+	areaInfo->yCtl_start= layer0Ctl->ctl_offset.Height;//VIDEO_LAYER0_V_POSITION;
+	areaInfo->yCtl_stop= layer0Ctl->ctl_offset.Height + layer0Ctl->out_size.Height;// - 1;//VIDEO_LAYER0_V_POSITION + VIDEO_LAYER0_V_OUT_SIZE;
 	//
 	VO_YUV_BUF_INFO_S *bufInfo= &layer0Info->bufInfo;
-    bufInfo->yAddr0= layer0Ctl->bufInfo.yAddr0;//LAYER0_Y_BASEAddr0;//DUMP_Y_1080P_ADDR0;
-    bufInfo->yAddr1= layer0Ctl->bufInfo.yAddr1;//LAYER0_Y_BASEAddr0;//DUMP_Y_1080P_ADDR1;
-    bufInfo->uvAddr0= layer0Ctl->bufInfo.uvAddr0;//LAYER0_UV_BASEaddr0;//DUMP_UV_1080P_ADDR0;
-    bufInfo->uvAddr1= layer0Ctl->bufInfo.uvAddr1;//LAYER0_UV_BASEaddr0;//DUMP_UV_1080P_ADDR1;
-    //bufInfo->hsize_stride= VIDEO_LAYER0_RD_1920_STRIDE; //1920
-    //bufInfo->vsize_stride= 0;
-    bufInfo->hsize_stride= layer0Ctl->bufInfo.hsize_stride;//0xff;//VIDEO_LAYER2_RD_STRIDE;
-    bufInfo->vsize_stride= layer0Ctl->bufInfo.vsize_stride;//0x437;//0;
-	//		
+	bufInfo->yAddr0= layer0Ctl->bufInfo.yAddr0;//LAYER0_Y_BASEAddr0;//DUMP_Y_1080P_ADDR0;
+	bufInfo->yAddr1= layer0Ctl->bufInfo.yAddr1;//LAYER0_Y_BASEAddr0;//DUMP_Y_1080P_ADDR1;
+	bufInfo->uvAddr0= layer0Ctl->bufInfo.uvAddr0;//LAYER0_UV_BASEaddr0;//DUMP_UV_1080P_ADDR0;
+	bufInfo->uvAddr1= layer0Ctl->bufInfo.uvAddr1;//LAYER0_UV_BASEaddr0;//DUMP_UV_1080P_ADDR1;
+	//bufInfo->hsize_stride= VIDEO_LAYER0_RD_1920_STRIDE; //1920
+	//bufInfo->vsize_stride= 0;
+	bufInfo->hsize_stride= layer0Ctl->bufInfo.hsize_stride;//0xff;//VIDEO_LAYER2_RD_STRIDE;
+	bufInfo->vsize_stride= layer0Ctl->bufInfo.vsize_stride;//0x437;//0;
+	//
 	VO_LAYER0_SIZE_INFO_S *layer0sizeInfo= &layer0Info->sizeInfo;
-    layer0sizeInfo->offset_hsize= layer0Ctl->size_offset.Width;//0;
-    layer0sizeInfo->offset_vsize= layer0Ctl->size_offset.Height;//0;
-    layer0sizeInfo->in_hsize= layer0Ctl->active_size.Width -1;//VIDEO_LAYER0_H_IN_SIZE;
-    layer0sizeInfo->in_vsize= layer0Ctl->active_size.Height -1;//VIDEO_LAYER0_V_IN_SIZE;
-    layer0sizeInfo->out_hsize= layer0Ctl->out_size.Width -1;//VIDEO_LAYER0_H_OUT_SIZE;
-    layer0sizeInfo->out_vsize= layer0Ctl->out_size.Height -1;// VIDEO_LAYER0_V_OUT_SIZE;
-    //
-    VO_LAYER0_SCALE_INFO_S *layer0ScaleInfo = &layer0Info->scaleInfo;
-    vo_core_calc_scale(layer0sizeInfo,layer0ScaleInfo);
-	//		
+	layer0sizeInfo->offset_hsize= layer0Ctl->size_offset.Width;//0;
+	layer0sizeInfo->offset_vsize= layer0Ctl->size_offset.Height;//0;
+	layer0sizeInfo->in_hsize= layer0Ctl->active_size.Width -1;//VIDEO_LAYER0_H_IN_SIZE;
+	layer0sizeInfo->in_vsize= layer0Ctl->active_size.Height -1;//VIDEO_LAYER0_V_IN_SIZE;
+	layer0sizeInfo->out_hsize= layer0Ctl->out_size.Width -1;//VIDEO_LAYER0_H_OUT_SIZE;
+	layer0sizeInfo->out_vsize= layer0Ctl->out_size.Height -1;// VIDEO_LAYER0_V_OUT_SIZE;
+	//
+	VO_LAYER0_SCALE_INFO_S *layer0ScaleInfo = &layer0Info->scaleInfo;
+	vo_core_calc_scale(layer0sizeInfo,layer0ScaleInfo);
+	//
 	VO_BASE_MODE_INFO_S *baseModeInfo= &layer0Info->baseModeInfo;
-    baseModeInfo->mode= 0;
-    baseModeInfo->base0mask= 0;
-    baseModeInfo->base1mask= 0;
-	//	 
-    unsigned int mfbd_en = layer0Ctl->layer0_mfbd_en;//FALSE;
-	VO_LAYER0_MFBD_INFO_S *mfbdInfo= &layer0Info->mfbdInfo;    
-    VO_TEST_SetMfbdInfo(mfbd_en,mfbdInfo);
-    //layer0 mix
-    layer0MixInfo->glben = layer0Ctl->layerMix_en;//layer0Ctl->layer_en;
-    layer0MixInfo->glbalp = layer0Ctl->layerMix_glbalp ;//0xff;
-    layer0MixInfo->sel = VO_MIXER_VIDEO_LAYER_0;
-
-    return 0;
+	baseModeInfo->mode= 0;
+	baseModeInfo->base0mask= 0;
+	baseModeInfo->base1mask= 0;
+	//
+	unsigned int mfbd_en = layer0Ctl->layer0_mfbd_en;//FALSE;
+	VO_LAYER0_MFBD_INFO_S *mfbdInfo= &layer0Info->mfbdInfo;
+	VO_TEST_SetMfbdInfo(mfbd_en,mfbdInfo);
+	//layer0 mix
+	layer0MixInfo->glben = layer0Ctl->layerMix_en;//layer0Ctl->layer_en;
+	layer0MixInfo->glbalp = layer0Ctl->layerMix_glbalp ;//0xff;
+	layer0MixInfo->sel = VO_MIXER_VIDEO_LAYER_0;
+
+	return 0;
 }
 /*
-*layer1
-*/
+ *layer1
+ */
 static int VO_TEST_SetLayer1(VO_LAYER_CTL_INFO_S *layer1Ctl,VO_LAYER1_INFO_S *layer1Info,VO_MIX_INFO_S *layer1MixInfo)
 {
-    VO_CHECK_POINTER(layer1Ctl);
-    VO_CHECK_POINTER(layer1Info);
-    VO_CHECK_POINTER(layer1MixInfo);
-
-    layer1Info->layer1DispEn = layer1Ctl->layer_en;
-    //
-    VO_LAYER_INFO_S *layerInfo = &layer1Info->layerInfo;
-    layerInfo->enable   = layer1Ctl->layer_en;
-    if( layer1Ctl->ImgInDataMode == VO_VIDEO_LAYER_YUV_MODE_420)
-    {
-        layerInfo->yuv422en = FALSE;
-        layerInfo->yuv420en = TRUE;
-    }
-    else
-    {
-        layerInfo->yuv422en = TRUE;
-        layerInfo->yuv420en = FALSE;
-    }  
-
-    layerInfo->endiany  = layer1Ctl->endiany;//VO_VIDEO_LAYER_Y_ENDIAN_MODE1;        
-    layerInfo->endianuv = layer1Ctl->endianuv;//VO_VIDEO_LAYER_UV_ENDIAN_MODE2;        
-    layerInfo->uvswap   = layer1Ctl->uvswap;//TRUE;
-    //
-    VO_LAYER_AREA_INFO_S *areaInfo = &layer1Info->areaInfo;
-    areaInfo->xCtl_start= layer1Ctl->ctl_offset.Width;//198;
-    areaInfo->xCtl_stop= layer1Ctl->ctl_offset.Width + layer1Ctl->active_size.Width - 1;// - 1;//198 + 1920 -1;
-    areaInfo->yCtl_start= layer1Ctl->ctl_offset.Height;//42;
-    areaInfo->yCtl_stop= layer1Ctl->ctl_offset.Height + layer1Ctl->active_size.Height;// - 1;//42 + 1080 -1;
-    //
-    VO_YUV_BUF_INFO_S *bufInfo = &layer1Info->bufInfo;
-    bufInfo->yAddr0= layer1Ctl->bufInfo.yAddr0;//LAYER0_Y_BASEAddr0;
-    bufInfo->yAddr1= layer1Ctl->bufInfo.yAddr1;//LAYER0_Y_BASEAddr0;
-    bufInfo->uvAddr0= layer1Ctl->bufInfo.uvAddr0;//LAYER0_UV_BASEaddr0;
-    bufInfo->uvAddr1= layer1Ctl->bufInfo.uvAddr1;//LAYER0_UV_BASEaddr0;
-    bufInfo->hsize_stride= layer1Ctl->bufInfo.hsize_stride;//0xff;//VIDEO_LAYER2_RD_STRIDE;
-    bufInfo->vsize_stride= layer1Ctl->bufInfo.vsize_stride;//0x437;//0;
-    //
-    VO_LAYER_SIZE_INFO_S *layer1sizeInfo = &layer1Info->layer1SizeInfo; 
-    layer1sizeInfo->offset_hsize= layer1Ctl->size_offset.Width;//0;
-    layer1sizeInfo->offset_vsize= layer1Ctl->size_offset.Height;//0;
-    layer1sizeInfo->in_hsize= layer1Ctl->active_size.Width - 1;//1920 - 1;
-    layer1sizeInfo->in_vsize= layer1Ctl->active_size.Height - 1;//1080 - 1;
-    //
-    VO_IMG_IN_BLENTH_INFO_S *imgInBlenthInfo = &layer1Info->imgInBlenthInfo;
-    imgInBlenthInfo->blen  = 0xf;
-    imgInBlenthInfo->voffset = 0x0;
-    //
-    VO_BASE_MODE_INFO_S *baseModeInfo = &layer1Info->baseModeInfo;
-    baseModeInfo->mode= 0;
-    baseModeInfo->base0mask= 0;
-    baseModeInfo->base1mask= 1;//0;
-    //layer1
-    layer1MixInfo->glben = layer1Ctl->layerMix_en;//layer1Ctl->layer_en;
-    layer1MixInfo->glbalp = layer1Ctl->layerMix_glbalp;//0xff;
-    layer1MixInfo->sel = VO_MIXER_VIDEO_LAYER_1;
-
-    return 0; 
+	VO_CHECK_POINTER(layer1Ctl);
+	VO_CHECK_POINTER(layer1Info);
+	VO_CHECK_POINTER(layer1MixInfo);
+
+	layer1Info->layer1DispEn = layer1Ctl->layer_en;
+	//
+	VO_LAYER_INFO_S *layerInfo = &layer1Info->layerInfo;
+	layerInfo->enable   = layer1Ctl->layer_en;
+	if( layer1Ctl->ImgInDataMode == VO_VIDEO_LAYER_YUV_MODE_420)
+	{
+		layerInfo->yuv422en = FALSE;
+		layerInfo->yuv420en = TRUE;
+	}
+	else
+	{
+		layerInfo->yuv422en = TRUE;
+		layerInfo->yuv420en = FALSE;
+	}
+
+	layerInfo->endiany  = layer1Ctl->endiany;//VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
+	layerInfo->endianuv = layer1Ctl->endianuv;//VO_VIDEO_LAYER_UV_ENDIAN_MODE2;
+	layerInfo->uvswap   = layer1Ctl->uvswap;//TRUE;
+	//
+	VO_LAYER_AREA_INFO_S *areaInfo = &layer1Info->areaInfo;
+	areaInfo->xCtl_start= layer1Ctl->ctl_offset.Width;//198;
+	areaInfo->xCtl_stop= layer1Ctl->ctl_offset.Width + layer1Ctl->active_size.Width - 1;// - 1;//198 + 1920 -1;
+	areaInfo->yCtl_start= layer1Ctl->ctl_offset.Height;//42;
+	areaInfo->yCtl_stop= layer1Ctl->ctl_offset.Height + layer1Ctl->active_size.Height;// - 1;//42 + 1080 -1;
+	//
+	VO_YUV_BUF_INFO_S *bufInfo = &layer1Info->bufInfo;
+	bufInfo->yAddr0= layer1Ctl->bufInfo.yAddr0;//LAYER0_Y_BASEAddr0;
+	bufInfo->yAddr1= layer1Ctl->bufInfo.yAddr1;//LAYER0_Y_BASEAddr0;
+	bufInfo->uvAddr0= layer1Ctl->bufInfo.uvAddr0;//LAYER0_UV_BASEaddr0;
+	bufInfo->uvAddr1= layer1Ctl->bufInfo.uvAddr1;//LAYER0_UV_BASEaddr0;
+	bufInfo->hsize_stride= layer1Ctl->bufInfo.hsize_stride;//0xff;//VIDEO_LAYER2_RD_STRIDE;
+	bufInfo->vsize_stride= layer1Ctl->bufInfo.vsize_stride;//0x437;//0;
+	//
+	VO_LAYER_SIZE_INFO_S *layer1sizeInfo = &layer1Info->layer1SizeInfo;
+	layer1sizeInfo->offset_hsize= layer1Ctl->size_offset.Width;//0;
+	layer1sizeInfo->offset_vsize= layer1Ctl->size_offset.Height;//0;
+	layer1sizeInfo->in_hsize= layer1Ctl->active_size.Width - 1;//1920 - 1;
+	layer1sizeInfo->in_vsize= layer1Ctl->active_size.Height - 1;//1080 - 1;
+	//
+	VO_IMG_IN_BLENTH_INFO_S *imgInBlenthInfo = &layer1Info->imgInBlenthInfo;
+	imgInBlenthInfo->blen  = 0xf;
+	imgInBlenthInfo->voffset = 0x0;
+	//
+	VO_BASE_MODE_INFO_S *baseModeInfo = &layer1Info->baseModeInfo;
+	baseModeInfo->mode= 0;
+	baseModeInfo->base0mask= 0;
+	baseModeInfo->base1mask= 1;//0;
+	//layer1
+	layer1MixInfo->glben = layer1Ctl->layerMix_en;//layer1Ctl->layer_en;
+	layer1MixInfo->glbalp = layer1Ctl->layerMix_glbalp;//0xff;
+	layer1MixInfo->sel = VO_MIXER_VIDEO_LAYER_1;
+
+	return 0;
 }
 /*
-*layer2
-*/
+ *layer2
+ */
 static int VO_TEST_SetLayer2(VO_LAYER_CTL_INFO_S *layer2Ctl,VO_LAYER2_INFO_S *layer2Info,VO_MIX_INFO_S *layer2MixInfo)
 {
-    VO_CHECK_POINTER(layer2Ctl);
-    VO_CHECK_POINTER(layer2Info);
-    VO_CHECK_POINTER(layer2MixInfo);
-
-    layer2Info->layer2DispEn = layer2Ctl->layer_en;
-    //
-    VO_LAYER_INFO_S *layerInfo = &layer2Info->layerInfo;
-    layerInfo->enable   = layer2Ctl->layer_en;
-    if( layer2Ctl->ImgInDataMode == VO_VIDEO_LAYER_YUV_MODE_420)
-    {
-        layerInfo->yuv422en = FALSE;
-        layerInfo->yuv420en = TRUE;
-    }
-    else
-    {
-        layerInfo->yuv422en = TRUE;
-        layerInfo->yuv420en = FALSE;
-    }  
-
-    layerInfo->endiany  = layer2Ctl->endiany;//VO_VIDEO_LAYER_Y_ENDIAN_MODE1;        
-    layerInfo->endianuv = layer2Ctl->endianuv;//VO_VIDEO_LAYER_UV_ENDIAN_MODE2;        
-    layerInfo->uvswap   = layer2Ctl->uvswap;//TRUE;
-    //
-    VO_LAYER_AREA_INFO_S *areaInfo = &layer2Info->areaInfo;
-    areaInfo->xCtl_start= layer2Ctl->ctl_offset.Width;//198;
-    areaInfo->xCtl_stop= layer2Ctl->ctl_offset.Width + layer2Ctl->active_size.Width - 1;// - 1;//198 + 1920 -1;
-    areaInfo->yCtl_start= layer2Ctl->ctl_offset.Height;//42;
-    areaInfo->yCtl_stop= layer2Ctl->ctl_offset.Height + layer2Ctl->active_size.Height;// - 1;//42 + 1080 -1;
-    //
-    VO_YUV_BUF_INFO_S *bufInfo = &layer2Info->bufInfo;
-    bufInfo->yAddr0= layer2Ctl->bufInfo.yAddr0;//LAYER0_Y_BASEAddr0;
-    bufInfo->yAddr1= layer2Ctl->bufInfo.yAddr1;//LAYER0_Y_BASEAddr0;
-    bufInfo->uvAddr0= layer2Ctl->bufInfo.uvAddr0;//LAYER0_UV_BASEaddr0;
-    bufInfo->uvAddr1= layer2Ctl->bufInfo.uvAddr1;//LAYER0_UV_BASEaddr0;
-    bufInfo->hsize_stride= layer2Ctl->bufInfo.hsize_stride;//0xff;//VIDEO_LAYER2_RD_STRIDE;
-    bufInfo->vsize_stride= layer2Ctl->bufInfo.vsize_stride;//0x437;//0;
-    //
-    VO_LAYER_SIZE_INFO_S *layer2sizeInfo = &layer2Info->layer2SizeInfo; 
-    layer2sizeInfo->offset_hsize= layer2Ctl->size_offset.Width;//0;
-    layer2sizeInfo->offset_vsize= layer2Ctl->size_offset.Height;//0;
-    layer2sizeInfo->in_hsize= layer2Ctl->active_size.Width - 1;//1920 - 1;
-    layer2sizeInfo->in_vsize= layer2Ctl->active_size.Height - 1;//1080 - 1;
-    //
-    VO_IMG_IN_BLENTH_INFO_S *imgInBlenthInfo = &layer2Info->imgInBlenthInfo; 
-    imgInBlenthInfo->blen  = 0xf;
-    imgInBlenthInfo->voffset = 0x0;
-    //
-    VO_BASE_MODE_INFO_S *baseModeInfo = &layer2Info->baseModeInfo; 
-    baseModeInfo->mode= 0;
-    baseModeInfo->base0mask= 0;
-    baseModeInfo->base1mask= 1;//0;
-    //layer2
-    layer2MixInfo->glben = layer2Ctl->layerMix_en;//layer2Ctl->layer_en;
-    layer2MixInfo->glbalp = layer2Ctl->layerMix_glbalp;//0xff;
-    layer2MixInfo->sel = VO_MIXER_VIDEO_LAYER_2;
-
-    return 0; 
+	VO_CHECK_POINTER(layer2Ctl);
+	VO_CHECK_POINTER(layer2Info);
+	VO_CHECK_POINTER(layer2MixInfo);
+
+	layer2Info->layer2DispEn = layer2Ctl->layer_en;
+	//
+	VO_LAYER_INFO_S *layerInfo = &layer2Info->layerInfo;
+	layerInfo->enable   = layer2Ctl->layer_en;
+	if( layer2Ctl->ImgInDataMode == VO_VIDEO_LAYER_YUV_MODE_420)
+	{
+		layerInfo->yuv422en = FALSE;
+		layerInfo->yuv420en = TRUE;
+	}
+	else
+	{
+		layerInfo->yuv422en = TRUE;
+		layerInfo->yuv420en = FALSE;
+	}
+
+	layerInfo->endiany  = layer2Ctl->endiany;//VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
+	layerInfo->endianuv = layer2Ctl->endianuv;//VO_VIDEO_LAYER_UV_ENDIAN_MODE2;
+	layerInfo->uvswap   = layer2Ctl->uvswap;//TRUE;
+	//
+	VO_LAYER_AREA_INFO_S *areaInfo = &layer2Info->areaInfo;
+	areaInfo->xCtl_start= layer2Ctl->ctl_offset.Width;//198;
+	areaInfo->xCtl_stop= layer2Ctl->ctl_offset.Width + layer2Ctl->active_size.Width - 1;// - 1;//198 + 1920 -1;
+	areaInfo->yCtl_start= layer2Ctl->ctl_offset.Height;//42;
+	areaInfo->yCtl_stop= layer2Ctl->ctl_offset.Height + layer2Ctl->active_size.Height;// - 1;//42 + 1080 -1;
+	//
+	VO_YUV_BUF_INFO_S *bufInfo = &layer2Info->bufInfo;
+	bufInfo->yAddr0= layer2Ctl->bufInfo.yAddr0;//LAYER0_Y_BASEAddr0;
+	bufInfo->yAddr1= layer2Ctl->bufInfo.yAddr1;//LAYER0_Y_BASEAddr0;
+	bufInfo->uvAddr0= layer2Ctl->bufInfo.uvAddr0;//LAYER0_UV_BASEaddr0;
+	bufInfo->uvAddr1= layer2Ctl->bufInfo.uvAddr1;//LAYER0_UV_BASEaddr0;
+	bufInfo->hsize_stride= layer2Ctl->bufInfo.hsize_stride;//0xff;//VIDEO_LAYER2_RD_STRIDE;
+	bufInfo->vsize_stride= layer2Ctl->bufInfo.vsize_stride;//0x437;//0;
+	//
+	VO_LAYER_SIZE_INFO_S *layer2sizeInfo = &layer2Info->layer2SizeInfo;
+	layer2sizeInfo->offset_hsize= layer2Ctl->size_offset.Width;//0;
+	layer2sizeInfo->offset_vsize= layer2Ctl->size_offset.Height;//0;
+	layer2sizeInfo->in_hsize= layer2Ctl->active_size.Width - 1;//1920 - 1;
+	layer2sizeInfo->in_vsize= layer2Ctl->active_size.Height - 1;//1080 - 1;
+	//
+	VO_IMG_IN_BLENTH_INFO_S *imgInBlenthInfo = &layer2Info->imgInBlenthInfo;
+	imgInBlenthInfo->blen  = 0xf;
+	imgInBlenthInfo->voffset = 0x0;
+	//
+	VO_BASE_MODE_INFO_S *baseModeInfo = &layer2Info->baseModeInfo;
+	baseModeInfo->mode= 0;
+	baseModeInfo->base0mask= 0;
+	baseModeInfo->base1mask= 1;//0;
+	//layer2
+	layer2MixInfo->glben = layer2Ctl->layerMix_en;//layer2Ctl->layer_en;
+	layer2MixInfo->glbalp = layer2Ctl->layerMix_glbalp;//0xff;
+	layer2MixInfo->sel = VO_MIXER_VIDEO_LAYER_2;
+
+	return 0;
 }
 /*
-*layer3
-*/
+ *layer3
+ */
 static int VO_TEST_SetLayer3(VO_LAYER_CTL_INFO_S *layer3Ctl,VO_LAYER3_INFO_S *layer3Info,VO_MIX_INFO_S *layer3MixInfo)
 {
-    VO_CHECK_POINTER(layer3Ctl);
-    VO_CHECK_POINTER(layer3Info);
-    VO_CHECK_POINTER(layer3MixInfo);
-
-    layer3Info->layer3DispEn = layer3Ctl->layer_en;
-    //
-    VO_LAYER_INFO_S *layerInfo = &layer3Info->layerInfo;
-    layerInfo->enable   = layer3Ctl->layer_en;
-    if( layer3Ctl->ImgInDataMode == VO_VIDEO_LAYER_YUV_MODE_420)
-    {
-        layerInfo->yuv422en = FALSE;
-        layerInfo->yuv420en = TRUE;
-    }
-    else
-    {
-        layerInfo->yuv422en = TRUE;
-        layerInfo->yuv420en = FALSE;
-    }  
-
-    layerInfo->endiany  = layer3Ctl->endiany;//VO_VIDEO_LAYER_Y_ENDIAN_MODE1;        
-    layerInfo->endianuv = layer3Ctl->endianuv;//VO_VIDEO_LAYER_UV_ENDIAN_MODE2;        
-    layerInfo->uvswap   = layer3Ctl->uvswap;//TRUE;
-    //
-    VO_LAYER_AREA_INFO_S *areaInfo = &layer3Info->areaInfo;
-    areaInfo->xCtl_start= layer3Ctl->ctl_offset.Width;//198;
-    areaInfo->xCtl_stop= layer3Ctl->ctl_offset.Width + layer3Ctl->active_size.Width -1;// - 1;//198 + 1920 -1;
-    areaInfo->yCtl_start= layer3Ctl->ctl_offset.Height;//42;
-    areaInfo->yCtl_stop= layer3Ctl->ctl_offset.Height + layer3Ctl->active_size.Height;// - 1;//42 + 1080 -1;
-    //
-    VO_YUV_BUF_INFO_S *bufInfo = &layer3Info->bufInfo;
-    bufInfo->yAddr0= layer3Ctl->bufInfo.yAddr0;//LAYER0_Y_BASEAddr0;
-    bufInfo->yAddr1= layer3Ctl->bufInfo.yAddr1;//LAYER0_Y_BASEAddr0;
-    bufInfo->uvAddr0= layer3Ctl->bufInfo.uvAddr0;//LAYER0_UV_BASEaddr0;
-    bufInfo->uvAddr1= layer3Ctl->bufInfo.uvAddr1;//LAYER0_UV_BASEaddr0;
-    bufInfo->hsize_stride= layer3Ctl->bufInfo.hsize_stride;//0xff;//VIDEO_layer3_RD_STRIDE;
-    bufInfo->vsize_stride= layer3Ctl->bufInfo.vsize_stride;//0x437;//0;
-    //
-    VO_LAYER_SIZE_INFO_S *layer3sizeInfo = &layer3Info->layer3SizeInfo; 
-    layer3sizeInfo->offset_hsize= layer3Ctl->size_offset.Width;//0;
-    layer3sizeInfo->offset_vsize= layer3Ctl->size_offset.Height;//0;
-    layer3sizeInfo->in_hsize= layer3Ctl->active_size.Width - 1;//1920 - 1;
-    layer3sizeInfo->in_vsize= layer3Ctl->active_size.Height - 1;//1080 - 1;
-    //
-    VO_IMG_IN_BLENTH_INFO_S *imgInBlenthInfo = &layer3Info->imgInBlenthInfo; 
-    imgInBlenthInfo->blen  = 0xf;
-    imgInBlenthInfo->voffset = 0x0;
-    //
-    VO_BASE_MODE_INFO_S *baseModeInfo = &layer3Info->baseModeInfo; 
-    baseModeInfo->mode= 0;
-    baseModeInfo->base0mask= 0;
-    baseModeInfo->base1mask= 0;
-    //layer3
-    layer3MixInfo->glben = layer3Ctl->layerMix_en;//layer3Ctl->layer_en;
-    layer3MixInfo->glbalp = layer3Ctl->layerMix_glbalp;//0xff;
-    layer3MixInfo->sel = VO_MIXER_VIDEO_LAYER_3;
-
-    return 0; 
+	VO_CHECK_POINTER(layer3Ctl);
+	VO_CHECK_POINTER(layer3Info);
+	VO_CHECK_POINTER(layer3MixInfo);
+
+	layer3Info->layer3DispEn = layer3Ctl->layer_en;
+	//
+	VO_LAYER_INFO_S *layerInfo = &layer3Info->layerInfo;
+	layerInfo->enable   = layer3Ctl->layer_en;
+	if( layer3Ctl->ImgInDataMode == VO_VIDEO_LAYER_YUV_MODE_420)
+	{
+		layerInfo->yuv422en = FALSE;
+		layerInfo->yuv420en = TRUE;
+	}
+	else
+	{
+		layerInfo->yuv422en = TRUE;
+		layerInfo->yuv420en = FALSE;
+	}
+
+	layerInfo->endiany  = layer3Ctl->endiany;//VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
+	layerInfo->endianuv = layer3Ctl->endianuv;//VO_VIDEO_LAYER_UV_ENDIAN_MODE2;
+	layerInfo->uvswap   = layer3Ctl->uvswap;//TRUE;
+	//
+	VO_LAYER_AREA_INFO_S *areaInfo = &layer3Info->areaInfo;
+	areaInfo->xCtl_start= layer3Ctl->ctl_offset.Width;//198;
+	areaInfo->xCtl_stop= layer3Ctl->ctl_offset.Width + layer3Ctl->active_size.Width -1;// - 1;//198 + 1920 -1;
+	areaInfo->yCtl_start= layer3Ctl->ctl_offset.Height;//42;
+	areaInfo->yCtl_stop= layer3Ctl->ctl_offset.Height + layer3Ctl->active_size.Height;// - 1;//42 + 1080 -1;
+	//
+	VO_YUV_BUF_INFO_S *bufInfo = &layer3Info->bufInfo;
+	bufInfo->yAddr0= layer3Ctl->bufInfo.yAddr0;//LAYER0_Y_BASEAddr0;
+	bufInfo->yAddr1= layer3Ctl->bufInfo.yAddr1;//LAYER0_Y_BASEAddr0;
+	bufInfo->uvAddr0= layer3Ctl->bufInfo.uvAddr0;//LAYER0_UV_BASEaddr0;
+	bufInfo->uvAddr1= layer3Ctl->bufInfo.uvAddr1;//LAYER0_UV_BASEaddr0;
+	bufInfo->hsize_stride= layer3Ctl->bufInfo.hsize_stride;//0xff;//VIDEO_layer3_RD_STRIDE;
+	bufInfo->vsize_stride= layer3Ctl->bufInfo.vsize_stride;//0x437;//0;
+	//
+	VO_LAYER_SIZE_INFO_S *layer3sizeInfo = &layer3Info->layer3SizeInfo;
+	layer3sizeInfo->offset_hsize= layer3Ctl->size_offset.Width;//0;
+	layer3sizeInfo->offset_vsize= layer3Ctl->size_offset.Height;//0;
+	layer3sizeInfo->in_hsize= layer3Ctl->active_size.Width - 1;//1920 - 1;
+	layer3sizeInfo->in_vsize= layer3Ctl->active_size.Height - 1;//1080 - 1;
+	//
+	VO_IMG_IN_BLENTH_INFO_S *imgInBlenthInfo = &layer3Info->imgInBlenthInfo;
+	imgInBlenthInfo->blen  = 0xf;
+	imgInBlenthInfo->voffset = 0x0;
+	//
+	VO_BASE_MODE_INFO_S *baseModeInfo = &layer3Info->baseModeInfo;
+	baseModeInfo->mode= 0;
+	baseModeInfo->base0mask= 0;
+	baseModeInfo->base1mask= 0;
+	//layer3
+	layer3MixInfo->glben = layer3Ctl->layerMix_en;//layer3Ctl->layer_en;
+	layer3MixInfo->glbalp = layer3Ctl->layerMix_glbalp;//0xff;
+	layer3MixInfo->sel = VO_MIXER_VIDEO_LAYER_3;
+
+	return 0;
 }
 /*
-*Layer4 osd0
-*/
+ *Layer4 osd0
+ */
 static int VO_TEST_SetLayer4Osd0(VO_LAYER_OSD_CTL_INFO_S *layer4osd0Ctl,VO_OSD0_INFO_S *osd0Info,VO_MIX_INFO_S *layer4osd0MixInfo)
 {
-    VO_CHECK_POINTER(layer4osd0Ctl);
-    VO_CHECK_POINTER(osd0Info);
-    VO_CHECK_POINTER(layer4osd0MixInfo);
-
-    osd0Info->osdLayer4DispEn = layer4osd0Ctl->layer_en;
-    osd0Info->osdrgb2yuvEn = layer4osd0Ctl->osdrgb2yuvEn;
-    osd0Info->osdtype = layer4osd0Ctl->osdtype;//OSD_MONOCHROME_8BIT;
-    osd0Info->alphatpye = layer4osd0Ctl->alphatpye;//OSD_FIXED_VALUE;
-    VO_LAYER_AREA_INFO_S   *osd0AreaInfo = &osd0Info->osd0AreaInfo;
-    osd0AreaInfo->xCtl_start= layer4osd0Ctl->ctl_offset.Width;//400;
-    osd0AreaInfo->xCtl_stop= layer4osd0Ctl->ctl_offset.Width + layer4osd0Ctl->active_size.Width-1;//400 + 216;
-    osd0AreaInfo->yCtl_start= layer4osd0Ctl->ctl_offset.Height;//200;
-    osd0AreaInfo->yCtl_stop= layer4osd0Ctl->ctl_offset.Height + layer4osd0Ctl->active_size.Height;//200 + 172;    
-    VO_OSD_SIZE_INFO_S     *osd0SizeInfo =  &osd0Info->osd0SizeInfo;
-    osd0SizeInfo->width = layer4osd0Ctl->active_size.Width;//216;
-    osd0SizeInfo->height = layer4osd0Ctl->active_size.Height;//172;
-    VO_OSD_BUF_INFO_S      *osd0BufInfo =  &osd0Info->osd0BufInfo;
-    osd0BufInfo->alp_addr0= layer4osd0Ctl->osdBufInfo.alp_addr0;//0x20000100;
-    osd0BufInfo->alp_addr1= layer4osd0Ctl->osdBufInfo.alp_addr1;//0x20000100;
-    osd0BufInfo->alpstride= layer4osd0Ctl->osdBufInfo.alpstride;//256/8;
-    osd0BufInfo->vlu_addr0= layer4osd0Ctl->osdBufInfo.vlu_addr0;//0x20000100;
-    osd0BufInfo->vlu_addr1= layer4osd0Ctl->osdBufInfo.vlu_addr1;//0x20000100;
-    osd0BufInfo->osdstride= layer4osd0Ctl->osdBufInfo.osdstride;//256/8;
-    VO_BASE_MODE_INFO_S    *baseModeInfo =  &osd0Info->osd0BaseModeInfo;
-    baseModeInfo->mode= 0;
-    baseModeInfo->base0mask= 0;
-    baseModeInfo->base1mask= 0;
-    VO_OSD_DMA_INFO_S      *osd0DmaInfo =  &osd0Info->osd0DmaInfo;
-    osd0DmaInfo->dmarequestlen= 0xf;
-    osd0DmaInfo->dmamap       = OSD_ORIGINAL_ORDER;
-    osd0DmaInfo->rgbrev       = OSD_RGB_REV_B; 
-//printf("zxj, VO_TEST_SetLayer4Osd0, osd0DmaInfo->rgbrev = %d\n", osd0DmaInfo->rgbrev);
-    
-    //layer4 osd0 mix
-    layer4osd0MixInfo->glben = layer4osd0Ctl->layerMix_en;//layer4osd0Ctl->layer_en;
-    layer4osd0MixInfo->glbalp = layer4osd0Ctl->layerMix_glbalp;//0xff;
-    layer4osd0MixInfo->sel = VO_MIXER_OSD_LAYER_0;
-
-    return 0; 
+	VO_CHECK_POINTER(layer4osd0Ctl);
+	VO_CHECK_POINTER(osd0Info);
+	VO_CHECK_POINTER(layer4osd0MixInfo);
+
+	osd0Info->osdLayer4DispEn = layer4osd0Ctl->layer_en;
+	osd0Info->osdrgb2yuvEn = layer4osd0Ctl->osdrgb2yuvEn;
+	osd0Info->osdtype = layer4osd0Ctl->osdtype;//OSD_MONOCHROME_8BIT;
+	osd0Info->alphatpye = layer4osd0Ctl->alphatpye;//OSD_FIXED_VALUE;
+	VO_LAYER_AREA_INFO_S   *osd0AreaInfo = &osd0Info->osd0AreaInfo;
+	osd0AreaInfo->xCtl_start= layer4osd0Ctl->ctl_offset.Width;//400;
+	osd0AreaInfo->xCtl_stop= layer4osd0Ctl->ctl_offset.Width + layer4osd0Ctl->active_size.Width-1;//400 + 216;
+	osd0AreaInfo->yCtl_start= layer4osd0Ctl->ctl_offset.Height;//200;
+	osd0AreaInfo->yCtl_stop= layer4osd0Ctl->ctl_offset.Height + layer4osd0Ctl->active_size.Height;//200 + 172;
+	VO_OSD_SIZE_INFO_S     *osd0SizeInfo =  &osd0Info->osd0SizeInfo;
+	osd0SizeInfo->width = layer4osd0Ctl->active_size.Width;//216;
+	osd0SizeInfo->height = layer4osd0Ctl->active_size.Height;//172;
+	VO_OSD_BUF_INFO_S      *osd0BufInfo =  &osd0Info->osd0BufInfo;
+	osd0BufInfo->alp_addr0= layer4osd0Ctl->osdBufInfo.alp_addr0;//0x20000100;
+	osd0BufInfo->alp_addr1= layer4osd0Ctl->osdBufInfo.alp_addr1;//0x20000100;
+	osd0BufInfo->alpstride= layer4osd0Ctl->osdBufInfo.alpstride;//256/8;
+	osd0BufInfo->vlu_addr0= layer4osd0Ctl->osdBufInfo.vlu_addr0;//0x20000100;
+	osd0BufInfo->vlu_addr1= layer4osd0Ctl->osdBufInfo.vlu_addr1;//0x20000100;
+	osd0BufInfo->osdstride= layer4osd0Ctl->osdBufInfo.osdstride;//256/8;
+	VO_BASE_MODE_INFO_S    *baseModeInfo =  &osd0Info->osd0BaseModeInfo;
+	baseModeInfo->mode= 0;
+	baseModeInfo->base0mask= 0;
+	baseModeInfo->base1mask= 0;
+	VO_OSD_DMA_INFO_S      *osd0DmaInfo =  &osd0Info->osd0DmaInfo;
+	osd0DmaInfo->dmarequestlen= 0xf;
+	osd0DmaInfo->dmamap       = OSD_ORIGINAL_ORDER;
+	osd0DmaInfo->rgbrev       = OSD_RGB_REV_B;
+	//printf("zxj, VO_TEST_SetLayer4Osd0, osd0DmaInfo->rgbrev = %d\n", osd0DmaInfo->rgbrev);
+
+	//layer4 osd0 mix
+	layer4osd0MixInfo->glben = layer4osd0Ctl->layerMix_en;//layer4osd0Ctl->layer_en;
+	layer4osd0MixInfo->glbalp = layer4osd0Ctl->layerMix_glbalp;//0xff;
+	layer4osd0MixInfo->sel = VO_MIXER_OSD_LAYER_0;
+
+	return 0;
 }
 /*
-*Layer5 osd1
-*/
+ *Layer5 osd1
+ */
 static int VO_TEST_SetLayer5Osd1(VO_LAYER_OSD_CTL_INFO_S *layer5osd1Ctl,VO_OSD1_INFO_S *osd1Info,VO_MIX_INFO_S *layer5osd1MixInfo)
 {
-    VO_CHECK_POINTER(layer5osd1Ctl);
-    VO_CHECK_POINTER(osd1Info);
-    VO_CHECK_POINTER(layer5osd1MixInfo);
-
-    osd1Info->osdLayer5DispEn = layer5osd1Ctl->layer_en;
-    osd1Info->osdrgb2yuvEn = layer5osd1Ctl->osdrgb2yuvEn;
-    osd1Info->osdtype = layer5osd1Ctl->osdtype;//OSD_MONOCHROME_8BIT;
-    osd1Info->alphatpye = layer5osd1Ctl->alphatpye;//OSD_FIXED_VALUE;
-    VO_LAYER_AREA_INFO_S   *osd1AreaInfo = &osd1Info->osd1AreaInfo;
-    osd1AreaInfo->xCtl_start= layer5osd1Ctl->ctl_offset.Width;//800;
-    osd1AreaInfo->xCtl_stop= layer5osd1Ctl->ctl_offset.Width + layer5osd1Ctl->active_size.Width-1;//800 + 216;
-    osd1AreaInfo->yCtl_start= layer5osd1Ctl->ctl_offset.Height;//200;
-    osd1AreaInfo->yCtl_stop= layer5osd1Ctl->ctl_offset.Height + layer5osd1Ctl->active_size.Height;//200 + 172;
-    VO_OSD_SIZE_INFO_S     *osd1SizeInfo =  &osd1Info->osd1SizeInfo;
-    osd1SizeInfo->width = layer5osd1Ctl->active_size.Width;//216;
-    osd1SizeInfo->height = layer5osd1Ctl->active_size.Height;//172;
-    VO_OSD_BUF_INFO_S      *osd1BufInfo =  &osd1Info->osd1BufInfo;
-    osd1BufInfo->alp_addr0= layer5osd1Ctl->osdBufInfo.alp_addr0;//0x20200100;
-    osd1BufInfo->alp_addr1= layer5osd1Ctl->osdBufInfo.alp_addr1;//0x20200100;
-    osd1BufInfo->alpstride= layer5osd1Ctl->osdBufInfo.alpstride;//256/8;
-    osd1BufInfo->vlu_addr0= layer5osd1Ctl->osdBufInfo.vlu_addr0;//0x20200100;
-    osd1BufInfo->vlu_addr1= layer5osd1Ctl->osdBufInfo.vlu_addr1;//0x20200100;
-    osd1BufInfo->osdstride= layer5osd1Ctl->osdBufInfo.osdstride;//256/8;
-    VO_BASE_MODE_INFO_S    *baseModeInfo =  &osd1Info->osd1BaseModeInfo;
-    baseModeInfo->mode= 0;
-    baseModeInfo->base0mask= 0;
-    baseModeInfo->base1mask= 0;
-    VO_OSD_DMA_INFO_S      *osd1DmaInfo =  &osd1Info->osd1DmaInfo;
-    osd1DmaInfo->dmarequestlen= 0xf;
-    osd1DmaInfo->dmamap       = OSD_ORIGINAL_ORDER;
-    osd1DmaInfo->rgbrev       = OSD_RGB_REV_R; 
-    //layer5 osd1
-    layer5osd1MixInfo->glben = layer5osd1Ctl->layerMix_en;//layer5osd1Ctl->layer_en;
-    layer5osd1MixInfo->glbalp = layer5osd1Ctl->layerMix_glbalp;//0xff;
-    layer5osd1MixInfo->sel = VO_MIXER_OSD_LAYER_1;
-
-    return 0; 
+	VO_CHECK_POINTER(layer5osd1Ctl);
+	VO_CHECK_POINTER(osd1Info);
+	VO_CHECK_POINTER(layer5osd1MixInfo);
+
+	osd1Info->osdLayer5DispEn = layer5osd1Ctl->layer_en;
+	osd1Info->osdrgb2yuvEn = layer5osd1Ctl->osdrgb2yuvEn;
+	osd1Info->osdtype = layer5osd1Ctl->osdtype;//OSD_MONOCHROME_8BIT;
+	osd1Info->alphatpye = layer5osd1Ctl->alphatpye;//OSD_FIXED_VALUE;
+	VO_LAYER_AREA_INFO_S   *osd1AreaInfo = &osd1Info->osd1AreaInfo;
+	osd1AreaInfo->xCtl_start= layer5osd1Ctl->ctl_offset.Width;//800;
+	osd1AreaInfo->xCtl_stop= layer5osd1Ctl->ctl_offset.Width + layer5osd1Ctl->active_size.Width-1;//800 + 216;
+	osd1AreaInfo->yCtl_start= layer5osd1Ctl->ctl_offset.Height;//200;
+	osd1AreaInfo->yCtl_stop= layer5osd1Ctl->ctl_offset.Height + layer5osd1Ctl->active_size.Height;//200 + 172;
+	VO_OSD_SIZE_INFO_S     *osd1SizeInfo =  &osd1Info->osd1SizeInfo;
+	osd1SizeInfo->width = layer5osd1Ctl->active_size.Width;//216;
+	osd1SizeInfo->height = layer5osd1Ctl->active_size.Height;//172;
+	VO_OSD_BUF_INFO_S      *osd1BufInfo =  &osd1Info->osd1BufInfo;
+	osd1BufInfo->alp_addr0= layer5osd1Ctl->osdBufInfo.alp_addr0;//0x20200100;
+	osd1BufInfo->alp_addr1= layer5osd1Ctl->osdBufInfo.alp_addr1;//0x20200100;
+	osd1BufInfo->alpstride= layer5osd1Ctl->osdBufInfo.alpstride;//256/8;
+	osd1BufInfo->vlu_addr0= layer5osd1Ctl->osdBufInfo.vlu_addr0;//0x20200100;
+	osd1BufInfo->vlu_addr1= layer5osd1Ctl->osdBufInfo.vlu_addr1;//0x20200100;
+	osd1BufInfo->osdstride= layer5osd1Ctl->osdBufInfo.osdstride;//256/8;
+	VO_BASE_MODE_INFO_S    *baseModeInfo =  &osd1Info->osd1BaseModeInfo;
+	baseModeInfo->mode= 0;
+	baseModeInfo->base0mask= 0;
+	baseModeInfo->base1mask= 0;
+	VO_OSD_DMA_INFO_S      *osd1DmaInfo =  &osd1Info->osd1DmaInfo;
+	osd1DmaInfo->dmarequestlen= 0xf;
+	osd1DmaInfo->dmamap       = OSD_ORIGINAL_ORDER;
+	osd1DmaInfo->rgbrev       = OSD_RGB_REV_R;
+	//layer5 osd1
+	layer5osd1MixInfo->glben = layer5osd1Ctl->layerMix_en;//layer5osd1Ctl->layer_en;
+	layer5osd1MixInfo->glbalp = layer5osd1Ctl->layerMix_glbalp;//0xff;
+	layer5osd1MixInfo->sel = VO_MIXER_OSD_LAYER_1;
+
+	return 0;
 }
 /*
-*Layer6 osd2
-*/
+ *Layer6 osd2
+ */
 static int VO_TEST_SetLayer6Osd2(VO_LAYER_OSD_CTL_INFO_S *layer6osd2Ctl,VO_OSD2_INFO_S *osd2Info,VO_MIX_INFO_S *layer6osd2MixInfo)
 {
-    VO_CHECK_POINTER(layer6osd2Ctl);
-    VO_CHECK_POINTER(osd2Info);
-    VO_CHECK_POINTER(layer6osd2MixInfo);
-
-    osd2Info->osdLayer6DispEn = layer6osd2Ctl->layer_en;
-    osd2Info->osdrgb2yuvEn = layer6osd2Ctl->osdrgb2yuvEn;
-    osd2Info->osdtype = layer6osd2Ctl->osdtype;//OSD_MONOCHROME_8BIT;
-    osd2Info->alphatpye = layer6osd2Ctl->alphatpye;//OSD_FIXED_VALUE;
-    VO_LAYER_AREA_INFO_S   *osd2AreaInfo = &osd2Info->osd2AreaInfo;
-    osd2AreaInfo->xCtl_start= layer6osd2Ctl->ctl_offset.Width;//800;
-    osd2AreaInfo->xCtl_stop= layer6osd2Ctl->ctl_offset.Width + layer6osd2Ctl->active_size.Width;//800 + 216;
-    osd2AreaInfo->yCtl_start= layer6osd2Ctl->ctl_offset.Height;//200;
-    osd2AreaInfo->yCtl_stop= layer6osd2Ctl->ctl_offset.Height + layer6osd2Ctl->active_size.Height;//200 + 172;
-    VO_OSD_SIZE_INFO_S     *osd2SizeInfo =  &osd2Info->osd2SizeInfo;
-    osd2SizeInfo->width = layer6osd2Ctl->active_size.Width;//216;
-    osd2SizeInfo->height = layer6osd2Ctl->active_size.Height;//172;
-    VO_OSD_BUF_INFO_S      *osd2BufInfo =  &osd2Info->osd2BufInfo;
-    osd2BufInfo->alp_addr0= layer6osd2Ctl->osdBufInfo.alp_addr0;//0x20200100;
-    osd2BufInfo->alp_addr1= layer6osd2Ctl->osdBufInfo.alp_addr1;//0x20200100;
-    osd2BufInfo->alpstride= layer6osd2Ctl->osdBufInfo.alpstride;//256;        
-    osd2BufInfo->vlu_addr0= layer6osd2Ctl->osdBufInfo.vlu_addr0;//0x20200100;
-    osd2BufInfo->vlu_addr1= layer6osd2Ctl->osdBufInfo.vlu_addr1;//0x20200100;
-    osd2BufInfo->osdstride= layer6osd2Ctl->osdBufInfo.osdstride;//256;
-    VO_BASE_MODE_INFO_S    *baseModeInfo =  &osd2Info->osd2BaseModeInfo;
-    baseModeInfo->mode= 0;
-    baseModeInfo->base0mask= 1;
-    baseModeInfo->base1mask= 1;
-    VO_OSD_DMA_INFO_S      *osd2DmaInfo =  &osd2Info->osd2DmaInfo;
-    osd2DmaInfo->dmarequestlen= 0xf;
-    osd2DmaInfo->dmamap       = OSD_ORIGINAL_ORDER;
-    osd2DmaInfo->rgbrev       = OSD_RGB_REV_R; 
-    //layer6 osd2
-    layer6osd2MixInfo->glben = layer6osd2Ctl->layerMix_en;//layer6osd2Ctl->layer_en;
-    layer6osd2MixInfo->glbalp = layer6osd2Ctl->layerMix_glbalp;//0xff;
-    layer6osd2MixInfo->sel = VO_MIXER_OSD_LAYER_2;
-
-    return 0; 
+	VO_CHECK_POINTER(layer6osd2Ctl);
+	VO_CHECK_POINTER(osd2Info);
+	VO_CHECK_POINTER(layer6osd2MixInfo);
+
+	osd2Info->osdLayer6DispEn = layer6osd2Ctl->layer_en;
+	osd2Info->osdrgb2yuvEn = layer6osd2Ctl->osdrgb2yuvEn;
+	osd2Info->osdtype = layer6osd2Ctl->osdtype;//OSD_MONOCHROME_8BIT;
+	osd2Info->alphatpye = layer6osd2Ctl->alphatpye;//OSD_FIXED_VALUE;
+	VO_LAYER_AREA_INFO_S   *osd2AreaInfo = &osd2Info->osd2AreaInfo;
+	osd2AreaInfo->xCtl_start= layer6osd2Ctl->ctl_offset.Width;//800;
+	osd2AreaInfo->xCtl_stop= layer6osd2Ctl->ctl_offset.Width + layer6osd2Ctl->active_size.Width;//800 + 216;
+	osd2AreaInfo->yCtl_start= layer6osd2Ctl->ctl_offset.Height;//200;
+	osd2AreaInfo->yCtl_stop= layer6osd2Ctl->ctl_offset.Height + layer6osd2Ctl->active_size.Height;//200 + 172;
+	VO_OSD_SIZE_INFO_S     *osd2SizeInfo =  &osd2Info->osd2SizeInfo;
+	osd2SizeInfo->width = layer6osd2Ctl->active_size.Width;//216;
+	osd2SizeInfo->height = layer6osd2Ctl->active_size.Height;//172;
+	VO_OSD_BUF_INFO_S      *osd2BufInfo =  &osd2Info->osd2BufInfo;
+	osd2BufInfo->alp_addr0= layer6osd2Ctl->osdBufInfo.alp_addr0;//0x20200100;
+	osd2BufInfo->alp_addr1= layer6osd2Ctl->osdBufInfo.alp_addr1;//0x20200100;
+	osd2BufInfo->alpstride= layer6osd2Ctl->osdBufInfo.alpstride;//256;
+	osd2BufInfo->vlu_addr0= layer6osd2Ctl->osdBufInfo.vlu_addr0;//0x20200100;
+	osd2BufInfo->vlu_addr1= layer6osd2Ctl->osdBufInfo.vlu_addr1;//0x20200100;
+	osd2BufInfo->osdstride= layer6osd2Ctl->osdBufInfo.osdstride;//256;
+	VO_BASE_MODE_INFO_S    *baseModeInfo =  &osd2Info->osd2BaseModeInfo;
+	baseModeInfo->mode= 0;
+	baseModeInfo->base0mask= 1;
+	baseModeInfo->base1mask= 1;
+	VO_OSD_DMA_INFO_S      *osd2DmaInfo =  &osd2Info->osd2DmaInfo;
+	osd2DmaInfo->dmarequestlen= 0xf;
+	osd2DmaInfo->dmamap       = OSD_ORIGINAL_ORDER;
+	osd2DmaInfo->rgbrev       = OSD_RGB_REV_R;
+	//layer6 osd2
+	layer6osd2MixInfo->glben = layer6osd2Ctl->layerMix_en;//layer6osd2Ctl->layer_en;
+	layer6osd2MixInfo->glbalp = layer6osd2Ctl->layerMix_glbalp;//0xff;
+	layer6osd2MixInfo->sel = VO_MIXER_OSD_LAYER_2;
+
+	return 0;
 }
 #if 0
 /*
-*WB
-*/
+ *WB
+ */
 static int VO_TEST_SetWBInfo(VO_WB_INFO_S *wbInfo)
 {
-    VO_CHECK_POINTER(wbInfo);
-    wbInfo->wb_en= FALSE;
-    wbInfo->inchmode= ;
+	VO_CHECK_POINTER(wbInfo);
+	wbInfo->wb_en= FALSE;
+	wbInfo->inchmode= ;
 	wbInfo->buffersize= ;
 	wbInfo->v_size_out= ;
 	wbInfo->h_size_out= ;
-    //
-    VO_WB_BUF_INFO_S *wbBufInfo= &wbInfo->wbBufInfo;
-    wbBufInfo->wbYInfo.y_en = ;
-    wbBufInfo->wbYInfo.addr0 = ;
-    wbBufInfo->wbYInfo.addr1 = ;
-    wbBufInfo->wbYInfo.hstride = ;
-    wbBufInfo->wbUVInfo.uv_en = ;
-    wbBufInfo->wbUVInfo.addr0 = ;
-    wbBufInfo->wbUVInfo.addr1 = ;
-    wbBufInfo->wbUVInfo.hstride = ;
-    //
-    VO_WB_PIXEL_FORMAT_OUT_INFO_S *wbPixelFormatOutInfo= &wbInfo->wbPixelFormatOutInfo;
-    wbPixelFormatOutInfo->formatsel    = ;
-    wbPixelFormatOutInfo->inputformat  = ;
-    wbPixelFormatOutInfo->outputformat = ;
-    wbPixelFormatOutInfo->pixelorder422= ;
-    wbPixelFormatOutInfo->rgbpixelwidth= ;
-    //
-    VO_WB_CH_INFO_S *ch0Info= &wbInfo->ch0Info;
-    ch0Info->request = ;
-    ch0Info->err_unit = ;
-    ch0Info->err_threshold = ;
-    //
-    ch0Info->wbDmaInfo.blen = ;
-    ch0Info->wbDmaInfo.continuousmode = ;
-    ch0Info->wbDmaInfo.errdetecten = ;
-    ch0Info->wbDmaInfo.otnum =;
-    ch0Info->wbDmaInfo.swap =;
-    //
-    ch0Info->wbInfoClr.maxbw = ;
-    ch0Info->wbInfoClr.totalbw = ;
-    ch0Info->wbInfoClr.frmcntclear = ;
-    ch0Info->wbInfoClr.fifoerrclear =;
-    //
-    VO_WB_CH_INFO_S *ch1Info= &wbInfo->ch1Info;
-    ch1Info->request = ;
-    ch1Info->err_unit = ;
-    ch1Info->err_threshold = ;
-    //
-    ch1Info->wbDmaInfo.blen = ;
-    ch1Info->wbDmaInfo.continuousmode = ;
-    ch1Info->wbDmaInfo.errdetecten = ;
-    ch1Info->wbDmaInfo.otnum =;
-    ch1Info->wbDmaInfo.swap =;
-    //
-    ch1Info->wbInfoClr.maxbw = ;
-    ch1Info->wbInfoClr.totalbw = ;
-    ch1Info->wbInfoClr.frmcntclear = ;
-    ch1Info->wbInfoClr.fifoerrclear =;
-    return 0; 
+	//
+	VO_WB_BUF_INFO_S *wbBufInfo= &wbInfo->wbBufInfo;
+	wbBufInfo->wbYInfo.y_en = ;
+	wbBufInfo->wbYInfo.addr0 = ;
+	wbBufInfo->wbYInfo.addr1 = ;
+	wbBufInfo->wbYInfo.hstride = ;
+	wbBufInfo->wbUVInfo.uv_en = ;
+	wbBufInfo->wbUVInfo.addr0 = ;
+	wbBufInfo->wbUVInfo.addr1 = ;
+	wbBufInfo->wbUVInfo.hstride = ;
+	//
+	VO_WB_PIXEL_FORMAT_OUT_INFO_S *wbPixelFormatOutInfo= &wbInfo->wbPixelFormatOutInfo;
+	wbPixelFormatOutInfo->formatsel    = ;
+	wbPixelFormatOutInfo->inputformat  = ;
+	wbPixelFormatOutInfo->outputformat = ;
+	wbPixelFormatOutInfo->pixelorder422= ;
+	wbPixelFormatOutInfo->rgbpixelwidth= ;
+	//
+	VO_WB_CH_INFO_S *ch0Info= &wbInfo->ch0Info;
+	ch0Info->request = ;
+	ch0Info->err_unit = ;
+	ch0Info->err_threshold = ;
+	//
+	ch0Info->wbDmaInfo.blen = ;
+	ch0Info->wbDmaInfo.continuousmode = ;
+	ch0Info->wbDmaInfo.errdetecten = ;
+	ch0Info->wbDmaInfo.otnum =;
+	ch0Info->wbDmaInfo.swap =;
+	//
+	ch0Info->wbInfoClr.maxbw = ;
+	ch0Info->wbInfoClr.totalbw = ;
+	ch0Info->wbInfoClr.frmcntclear = ;
+	ch0Info->wbInfoClr.fifoerrclear =;
+	//
+	VO_WB_CH_INFO_S *ch1Info= &wbInfo->ch1Info;
+	ch1Info->request = ;
+	ch1Info->err_unit = ;
+	ch1Info->err_threshold = ;
+	//
+	ch1Info->wbDmaInfo.blen = ;
+	ch1Info->wbDmaInfo.continuousmode = ;
+	ch1Info->wbDmaInfo.errdetecten = ;
+	ch1Info->wbDmaInfo.otnum =;
+	ch1Info->wbDmaInfo.swap =;
+	//
+	ch1Info->wbInfoClr.maxbw = ;
+	ch1Info->wbInfoClr.totalbw = ;
+	ch1Info->wbInfoClr.frmcntclear = ;
+	ch1Info->wbInfoClr.fifoerrclear =;
+	return 0;
 }
 #endif
 /************************************************************************
-*default*
-*************************************************************************/
+ *default*
+ *************************************************************************/
 static VO_TEST_GetCoreDefault(VO_CORE_INFO_S *voCoreInfo)
 {
-    VO_CHECK_POINTER(voCoreInfo);
-    //
-    #if 0
-    VO_DISP_INFO_S   	*dispInfo = &voCoreInfo->dispInfo;
-    dispInfo->dispEnable    = ;
-    dispInfo->xZoneCtl_start    = ;
-    dispInfo->xZoneCtl_stop    = ;
-    dispInfo->yZoneCtl_start    = ;
-    dispInfo->yZoneCtl_stop    = ;
-    dispInfo->dispHsyncCtl_start    = ;
-    dispInfo->dispHsyncCtl_stop    = ;
-    dispInfo->dispHsync1Ctl_start    = ;
-    dispInfo->dispHsync1Ctl_stop    = ;
-    dispInfo->dispVsync1Ctl_start    = ;
-    dispInfo->dispVsync1Ctl_stop    = ;
-    dispInfo->dispHsync2Ctl_start    = ;
-    dispInfo->dispHsync2Ctl_stop    = ;
-    dispInfo->dispVsync2Ctl_start    = ;
-    dispInfo->dispVsync2Ctl_stop    = ; 
-    dispInfo->vcntbit0        = ;
-    dispInfo->secndfoffset    = ;
-    dispInfo->framesyncdly    = ;
-    dispInfo->hsize    = ;
-    dispInfo->vsize    = ; 
-    //
-    VO_LAYER0_INFO_S 	*layer0Info = &voCoreInfo->layer0Info;
-    layer0Info->
-    //
-    VO_LAYER1_INFO_S 	*layer1Info = &voCoreInfo->layer1Info;
-
-    //
-    VO_LAYER2_INFO_S 	*layer2Info = &voCoreInfo->layer2Info;
-
-    VO_LAYER3_INFO_S 	*layer3Info = &voCoreInfo->layer3Info;
-
-    VO_OSD0_INFO_S   	*osd0Info = &voCoreInfo->osd0Info;
-
-    VO_OSD1_INFO_S   	*osd1Info = &voCoreInfo->osd1Info;
-
-    VO_OSD2_INFO_S   	*osd2Info = &voCoreInfo->osd2Info;
-
-    VO_OSD_RGB2YUV_INFO_S *osdRgb2YuvInfo = &voCoreInfo->osdRgb2YuvInfo;
-
-    VO_YUV2RGB_INFO_S   *yuv2rgbInfo = &voCoreInfo->yuv2rgbInfo;  
-
-    VO_DISP_MIX_INFO_S  *dispMixCtlInfo = &voCoreInfo->dispMixCtlInfo;
-
-    unsigned int        ditherctlen = voCoreInfo->di;
-    unsigned int        clutctlen;
-    VO_DISP_IRQ_INFO_S  *dispIrqInfo = &voCoreInfo->dispIrqInfo;
-    #endif
-    VO_WB_INFO_S        *wbInfo = &voCoreInfo->wbInfo;
-    wbInfo->wb_en= 0;
-    wbInfo->inchmode= 0;
+	VO_CHECK_POINTER(voCoreInfo);
+	//
+#if 0
+	VO_DISP_INFO_S   	*dispInfo = &voCoreInfo->dispInfo;
+	dispInfo->dispEnable    = ;
+	dispInfo->xZoneCtl_start    = ;
+	dispInfo->xZoneCtl_stop    = ;
+	dispInfo->yZoneCtl_start    = ;
+	dispInfo->yZoneCtl_stop    = ;
+	dispInfo->dispHsyncCtl_start    = ;
+	dispInfo->dispHsyncCtl_stop    = ;
+	dispInfo->dispHsync1Ctl_start    = ;
+	dispInfo->dispHsync1Ctl_stop    = ;
+	dispInfo->dispVsync1Ctl_start    = ;
+	dispInfo->dispVsync1Ctl_stop    = ;
+	dispInfo->dispHsync2Ctl_start    = ;
+	dispInfo->dispHsync2Ctl_stop    = ;
+	dispInfo->dispVsync2Ctl_start    = ;
+	dispInfo->dispVsync2Ctl_stop    = ;
+	dispInfo->vcntbit0        = ;
+	dispInfo->secndfoffset    = ;
+	dispInfo->framesyncdly    = ;
+	dispInfo->hsize    = ;
+	dispInfo->vsize    = ;
+	//
+	VO_LAYER0_INFO_S 	*layer0Info = &voCoreInfo->layer0Info;
+	layer0Info->
+		//
+		VO_LAYER1_INFO_S 	*layer1Info = &voCoreInfo->layer1Info;
+
+	//
+	VO_LAYER2_INFO_S 	*layer2Info = &voCoreInfo->layer2Info;
+
+	VO_LAYER3_INFO_S 	*layer3Info = &voCoreInfo->layer3Info;
+
+	VO_OSD0_INFO_S   	*osd0Info = &voCoreInfo->osd0Info;
+
+	VO_OSD1_INFO_S   	*osd1Info = &voCoreInfo->osd1Info;
+
+	VO_OSD2_INFO_S   	*osd2Info = &voCoreInfo->osd2Info;
+
+	VO_OSD_RGB2YUV_INFO_S *osdRgb2YuvInfo = &voCoreInfo->osdRgb2YuvInfo;
+
+	VO_YUV2RGB_INFO_S   *yuv2rgbInfo = &voCoreInfo->yuv2rgbInfo;
+
+	VO_DISP_MIX_INFO_S  *dispMixCtlInfo = &voCoreInfo->dispMixCtlInfo;
+
+	unsigned int        ditherctlen = voCoreInfo->di;
+	unsigned int        clutctlen;
+	VO_DISP_IRQ_INFO_S  *dispIrqInfo = &voCoreInfo->dispIrqInfo;
+#endif
+	VO_WB_INFO_S        *wbInfo = &voCoreInfo->wbInfo;
+	wbInfo->wb_en= 0;
+	wbInfo->inchmode= 0;
 	wbInfo->buffersize= 0;
 	wbInfo->v_size_out= 0;
-	wbInfo->h_size_out= 0; 
+	wbInfo->h_size_out= 0;
 
 }
 
@@ -887,2173 +887,2173 @@ static VO_TEST_GetCoreDefault(VO_CORE_INFO_S *voCoreInfo)
 #include <io.h>
 void MS_API_VO_WriteBackSet(unsigned int width, unsigned int height)
 {
-printf("set vo wb\n");
-
-    //MH_VO_WB_set_DmaCh(0x3);
-
-    writel(0x4, REG_VO_WB_DMAMODE);
-    writel(0x7, REG_VO_WB_WBPIXEL);
-    writel(VO_WB_ADDR_Y, REG_VO_WB_OUTADDR0DATAY);    
-    writel(VO_WB_ADDR_Y, REG_VO_WB_OUTADDR1DATAY);
-    writel(VO_WB_ADDR_Y + width*height, REG_VO_WB_OUTADDR0DATAUV);
-    writel(VO_WB_ADDR_Y + width*height, REG_VO_WB_OUTADDR1DATAUV);
-       
-    writel(width, REG_VO_WB_HSTRIDEY);
-    
-    writel(width, REG_VO_WB_HSTRIDEUV);
-    
-    writel(0xffffffff, REG_VO_WB_BUFSIZE);
- 
-    
-    writel(width-1, REG_VO_WB_HSIZE);    
-   writel(height-1, REG_VO_WB_VSIZE);
-        writel(0x10c111, REG_VO_WB_WBCH0DMA);
-    
-    writel(0x1010101, REG_VO_WB_WBCH0ERRUNIT);
-        
-
-    writel(0x1010101, REG_VO_WB_WBCH0ERRTH);
-    
-    writel(0, REG_VO_WB_WBCH0INFO);
-    
-    writel(0, REG_VO_WB_WBCH0RST);
-
-    
-    writel(0x10c111, REG_VO_WB_WBCH1DMA);
-    
-    writel(0x1010101, REG_VO_WB_WBCH1ERRUNIT);
-    
-    writel(0x1010101, REG_VO_WB_WBCH1ERRTH);
-    
-    writel(0, REG_VO_WB_WBCH1INFO);
-    writel(0, REG_VO_WB_WBCH1RST);
-
-
-    
-    writel(0x3, REG_VO_WB_DMACH);
+	printf("set vo wb\n");
+
+	//MH_VO_WB_set_DmaCh(0x3);
+
+	writel(0x4, REG_VO_WB_DMAMODE);
+	writel(0x7, REG_VO_WB_WBPIXEL);
+	writel(VO_WB_ADDR_Y, REG_VO_WB_OUTADDR0DATAY);
+	writel(VO_WB_ADDR_Y, REG_VO_WB_OUTADDR1DATAY);
+	writel(VO_WB_ADDR_Y + width*height, REG_VO_WB_OUTADDR0DATAUV);
+	writel(VO_WB_ADDR_Y + width*height, REG_VO_WB_OUTADDR1DATAUV);
+
+	writel(width, REG_VO_WB_HSTRIDEY);
+
+	writel(width, REG_VO_WB_HSTRIDEUV);
+
+	writel(0xffffffff, REG_VO_WB_BUFSIZE);
+
+
+	writel(width-1, REG_VO_WB_HSIZE);
+	writel(height-1, REG_VO_WB_VSIZE);
+	writel(0x10c111, REG_VO_WB_WBCH0DMA);
+
+	writel(0x1010101, REG_VO_WB_WBCH0ERRUNIT);
+
+
+	writel(0x1010101, REG_VO_WB_WBCH0ERRTH);
+
+	writel(0, REG_VO_WB_WBCH0INFO);
+
+	writel(0, REG_VO_WB_WBCH0RST);
+
+
+	writel(0x10c111, REG_VO_WB_WBCH1DMA);
+
+	writel(0x1010101, REG_VO_WB_WBCH1ERRUNIT);
+
+	writel(0x1010101, REG_VO_WB_WBCH1ERRTH);
+
+	writel(0, REG_VO_WB_WBCH1INFO);
+	writel(0, REG_VO_WB_WBCH1RST);
+
+
+
+	writel(0x3, REG_VO_WB_DMACH);
 
 
 }
 
 /************************************************************************
-*VO/BT1120/HDMI Bringup*
-*************************************************************************/
+ *VO/BT1120/HDMI Bringup*
+ *************************************************************************/
 static int VO_TEST_BRINGUP_BT1120_GetCtl(VO_CTL_S *voCtl)
 {
-printf("zxj, VO_TEST_BRINGUP_BT1120_GetCtl enter\n");
-
-    VO_CHECK_POINTER(voCtl);
-    memset(voCtl,0,sizeof(voCtl));
-    //
-    VO_DISP_CTL_INFO_S *dispCtl= &voCtl->dispCtl;
-    dispCtl->Disp_en = TRUE;
-    dispCtl->SyncMode = VO_SYSTEM_MODE_1920x1080x30P;
-    dispCtl->total_size.Width = 640+128;
-    dispCtl->total_size.Height = 480+64;
-    dispCtl->disp_start.Width = 0x42;
-    dispCtl->disp_stop.Width = 0x42 + 640;
-    dispCtl->disp_start.Height = 0xb;
-    dispCtl->disp_stop.Height = 0xb + 480;
-
-    //LAYER0
-    VO_LAYER_CTL_INFO_S *layer0Ctl = &voCtl->layer0Ctl;
-    layer0Ctl->layer_en = TRUE;
-    layer0Ctl->layer0_mfbd_en = FALSE;
-  
-
-    layer0Ctl->endiany = VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
-    layer0Ctl->endianuv = VO_VIDEO_LAYER_UV_ENDIAN_MODE3;//VO_VIDEO_LAYER_UV_ENDIAN_MODE3
-    layer0Ctl->uvswap = FALSE;//;
-    layer0Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
-    layer0Ctl->active_size.Width = 1920;
-    layer0Ctl->active_size.Height = 1080;
-    layer0Ctl->out_size.Width = 640; //1920
-    layer0Ctl->out_size.Height = 480; //1080
-    layer0Ctl->ctl_offset.Width = 0x42;//198;
-    layer0Ctl->ctl_offset.Height = 0xb;//42;
-    layer0Ctl->size_offset.Width = 0x0;
-    layer0Ctl->size_offset.Height = 0x0;
-    layer0Ctl->bufInfo.yAddr0= 0x01000000;
-    layer0Ctl->bufInfo.yAddr1= 0x01000000;
-    layer0Ctl->bufInfo.uvAddr0= 0x01000000 + 1920*1080;
-    layer0Ctl->bufInfo.uvAddr1= 0x01000000 + 1920*1080;
-    layer0Ctl->bufInfo.hsize_stride= 0xf;//VIDEO_LAYER2_RD_STRIDE;
-    layer0Ctl->bufInfo.vsize_stride= 0;//0;
+	printf("zxj, VO_TEST_BRINGUP_BT1120_GetCtl enter\n");
+
+	VO_CHECK_POINTER(voCtl);
+	memset(voCtl,0,sizeof(voCtl));
+	//
+	VO_DISP_CTL_INFO_S *dispCtl= &voCtl->dispCtl;
+	dispCtl->Disp_en = TRUE;
+	dispCtl->SyncMode = VO_SYSTEM_MODE_1920x1080x30P;
+	dispCtl->total_size.Width = 640+128;
+	dispCtl->total_size.Height = 480+64;
+	dispCtl->disp_start.Width = 0x42;
+	dispCtl->disp_stop.Width = 0x42 + 640;
+	dispCtl->disp_start.Height = 0xb;
+	dispCtl->disp_stop.Height = 0xb + 480;
+
+	//LAYER0
+	VO_LAYER_CTL_INFO_S *layer0Ctl = &voCtl->layer0Ctl;
+	layer0Ctl->layer_en = TRUE;
+	layer0Ctl->layer0_mfbd_en = FALSE;
+
+
+	layer0Ctl->endiany = VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
+	layer0Ctl->endianuv = VO_VIDEO_LAYER_UV_ENDIAN_MODE3;//VO_VIDEO_LAYER_UV_ENDIAN_MODE3
+	layer0Ctl->uvswap = FALSE;//;
+	layer0Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
+	layer0Ctl->active_size.Width = 1920;
+	layer0Ctl->active_size.Height = 1080;
+	layer0Ctl->out_size.Width = 640; //1920
+	layer0Ctl->out_size.Height = 480; //1080
+	layer0Ctl->ctl_offset.Width = 0x42;//198;
+	layer0Ctl->ctl_offset.Height = 0xb;//42;
+	layer0Ctl->size_offset.Width = 0x0;
+	layer0Ctl->size_offset.Height = 0x0;
+	layer0Ctl->bufInfo.yAddr0= 0x01000000;
+	layer0Ctl->bufInfo.yAddr1= 0x01000000;
+	layer0Ctl->bufInfo.uvAddr0= 0x01000000 + 1920*1080;
+	layer0Ctl->bufInfo.uvAddr1= 0x01000000 + 1920*1080;
+	layer0Ctl->bufInfo.hsize_stride= 0xf;//VIDEO_LAYER2_RD_STRIDE;
+	layer0Ctl->bufInfo.vsize_stride= 0;//0;
 	layer0Ctl->layerMix_en = TRUE;
-    layer0Ctl->layerMix_glbalp = 0xff;
-
-    
-    //LAYER1
-    VO_LAYER_CTL_INFO_S *layer1Ctl = &voCtl->layer1Ctl;
-    layer1Ctl->layer_en = FALSE;
-    layer1Ctl->layerMix_en = TRUE;
-    layer1Ctl->layerMix_glbalp = 0xff;
-    //LAYER2
-    VO_LAYER_CTL_INFO_S *layer2Ctl = &voCtl->layer2Ctl;
-    layer2Ctl->layer_en = FALSE;
-    layer2Ctl->layerMix_en = TRUE;
-    layer2Ctl->layerMix_glbalp = 0xff;
-    //LAYER3
-    VO_LAYER_CTL_INFO_S *layer3Ctl = &voCtl->layer3Ctl;
-    layer3Ctl->layer_en = FALSE;
-    layer3Ctl->layerMix_en = TRUE;
-    layer3Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_LAYER_OSD_CTL_INFO_S   *layer4osd0Ctl = &voCtl->layer4osd0Ctl;
-    layer4osd0Ctl->layer_en = FALSE;
-    layer4osd0Ctl->layerMix_en = TRUE;
-    layer4osd0Ctl->layerMix_glbalp = 0xff;
-
-    layer4osd0Ctl->osdrgb2yuvEn = TRUE;
-    layer4osd0Ctl->osdtype = OSD_RGB_32BIT;
-    layer4osd0Ctl->alphatpye = OSD_FIXED_VALUE;
-    layer4osd0Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
-    layer4osd0Ctl->active_size.Width = 128;
-    layer4osd0Ctl->active_size.Height = 128;
-    layer4osd0Ctl->ctl_offset.Width = 0x42;
-    layer4osd0Ctl->ctl_offset.Height = 0xb;
-    layer4osd0Ctl->osdBufInfo.alp_addr0= 0x80160000;
-    layer4osd0Ctl->osdBufInfo.alp_addr1= 0x80160000;
-    layer4osd0Ctl->osdBufInfo.alpstride= 128*4/8;
-    layer4osd0Ctl->osdBufInfo.vlu_addr0= 0x80160000;
-    layer4osd0Ctl->osdBufInfo.vlu_addr1= 0x80160000;
-    layer4osd0Ctl->osdBufInfo.osdstride= 128*4/8;    
-    layer4osd0Ctl->osdDmaInfo.dmarequestlen = 0xf;
-    layer4osd0Ctl->osdDmaInfo.dmamap = OSD_ORIGINAL_ORDER;
-    layer4osd0Ctl->osdDmaInfo.rgbrev = OSD_RGB_REV_B;
-
-    //
-    VO_LAYER_OSD_CTL_INFO_S   *layer5osd1Ctl = &voCtl->layer5osd1Ctl;
-    layer5osd1Ctl->layer_en = FALSE;
-    layer5osd1Ctl->layerMix_en = TRUE;
-    layer5osd1Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_LAYER_OSD_CTL_INFO_S *layer6osd2Ctl = &voCtl->layer6osd2Ctl;
-    layer6osd2Ctl->layer_en = FALSE;
-    layer6osd2Ctl->layerMix_en = TRUE;
-    layer6osd2Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_DISP_BACK_GROUD_INFO_S *dispBackGroudInfo = &voCtl->dispBackGroudInfo;
-    dispBackGroudInfo->y = 0x80;
-    dispBackGroudInfo->u = 0x80;
-    dispBackGroudInfo->v = 0x80;
-    //
-    voCtl->yuv2rgb_ctl_en = TRUE;
-    voCtl->ditherctlen = FALSE;
-    voCtl->clutctlen = FALSE;
+	layer0Ctl->layerMix_glbalp = 0xff;
+
+
+	//LAYER1
+	VO_LAYER_CTL_INFO_S *layer1Ctl = &voCtl->layer1Ctl;
+	layer1Ctl->layer_en = FALSE;
+	layer1Ctl->layerMix_en = TRUE;
+	layer1Ctl->layerMix_glbalp = 0xff;
+	//LAYER2
+	VO_LAYER_CTL_INFO_S *layer2Ctl = &voCtl->layer2Ctl;
+	layer2Ctl->layer_en = FALSE;
+	layer2Ctl->layerMix_en = TRUE;
+	layer2Ctl->layerMix_glbalp = 0xff;
+	//LAYER3
+	VO_LAYER_CTL_INFO_S *layer3Ctl = &voCtl->layer3Ctl;
+	layer3Ctl->layer_en = FALSE;
+	layer3Ctl->layerMix_en = TRUE;
+	layer3Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_LAYER_OSD_CTL_INFO_S   *layer4osd0Ctl = &voCtl->layer4osd0Ctl;
+	layer4osd0Ctl->layer_en = FALSE;
+	layer4osd0Ctl->layerMix_en = TRUE;
+	layer4osd0Ctl->layerMix_glbalp = 0xff;
+
+	layer4osd0Ctl->osdrgb2yuvEn = TRUE;
+	layer4osd0Ctl->osdtype = OSD_RGB_32BIT;
+	layer4osd0Ctl->alphatpye = OSD_FIXED_VALUE;
+	layer4osd0Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
+	layer4osd0Ctl->active_size.Width = 128;
+	layer4osd0Ctl->active_size.Height = 128;
+	layer4osd0Ctl->ctl_offset.Width = 0x42;
+	layer4osd0Ctl->ctl_offset.Height = 0xb;
+	layer4osd0Ctl->osdBufInfo.alp_addr0= 0x80160000;
+	layer4osd0Ctl->osdBufInfo.alp_addr1= 0x80160000;
+	layer4osd0Ctl->osdBufInfo.alpstride= 128*4/8;
+	layer4osd0Ctl->osdBufInfo.vlu_addr0= 0x80160000;
+	layer4osd0Ctl->osdBufInfo.vlu_addr1= 0x80160000;
+	layer4osd0Ctl->osdBufInfo.osdstride= 128*4/8;
+	layer4osd0Ctl->osdDmaInfo.dmarequestlen = 0xf;
+	layer4osd0Ctl->osdDmaInfo.dmamap = OSD_ORIGINAL_ORDER;
+	layer4osd0Ctl->osdDmaInfo.rgbrev = OSD_RGB_REV_B;
+
+	//
+	VO_LAYER_OSD_CTL_INFO_S   *layer5osd1Ctl = &voCtl->layer5osd1Ctl;
+	layer5osd1Ctl->layer_en = FALSE;
+	layer5osd1Ctl->layerMix_en = TRUE;
+	layer5osd1Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_LAYER_OSD_CTL_INFO_S *layer6osd2Ctl = &voCtl->layer6osd2Ctl;
+	layer6osd2Ctl->layer_en = FALSE;
+	layer6osd2Ctl->layerMix_en = TRUE;
+	layer6osd2Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_DISP_BACK_GROUD_INFO_S *dispBackGroudInfo = &voCtl->dispBackGroudInfo;
+	dispBackGroudInfo->y = 0x80;
+	dispBackGroudInfo->u = 0x80;
+	dispBackGroudInfo->v = 0x80;
+	//
+	voCtl->yuv2rgb_ctl_en = TRUE;
+	voCtl->ditherctlen = FALSE;
+	voCtl->clutctlen = FALSE;
 
 
 }
 #if 0
 static int VO_TEST_BRINGUP_BT1120_GetCtl(VO_CTL_S *voCtl)
 {
-    VO_CHECK_POINTER(voCtl);
-    memset(voCtl,0,sizeof(voCtl));
-    //
-    VO_DISP_CTL_INFO_S *dispCtl= &voCtl->dispCtl;
-    dispCtl->Disp_en = TRUE;
-    dispCtl->SyncMode = VO_SYSTEM_MODE_1920x1080x30P;
-    dispCtl->total_size.Width = 0x898;
-    dispCtl->total_size.Height = 0x465;
-    dispCtl->disp_start.Width = VIDEO_DISP_ZONE_X_START;
-    dispCtl->disp_stop.Width = VIDEO_DISP_ZONE_X_STOP;
-    dispCtl->disp_start.Height = VIDEO_DISP_ZONE_Y_START;
-    dispCtl->disp_stop.Height = VIDEO_DISP_ZONE_Y_STOP;
-
-    //LAYER0
-    VO_LAYER_CTL_INFO_S *layer0Ctl = &voCtl->layer0Ctl;
-    layer0Ctl->layer_en = FALSE;
-    layer0Ctl->layer0_mfbd_en = FALSE;
-    layer0Ctl->layerMix_en = TRUE;
-    layer0Ctl->layerMix_glbalp = 0xff;
-    //LAYER1
-    VO_LAYER_CTL_INFO_S *layer1Ctl = &voCtl->layer1Ctl;
-    layer1Ctl->layer_en = FALSE;
-    layer1Ctl->layerMix_en = TRUE;
-    layer1Ctl->layerMix_glbalp = 0xff;
-    //LAYER2
-    VO_LAYER_CTL_INFO_S *layer2Ctl = &voCtl->layer2Ctl;
-    layer2Ctl->layer_en = FALSE;
-    layer2Ctl->layerMix_en = TRUE;
-    layer2Ctl->layerMix_glbalp = 0xff;
-    //LAYER3
-    VO_LAYER_CTL_INFO_S *layer3Ctl = &voCtl->layer3Ctl;
-    layer3Ctl->layer_en = FALSE;
-    layer3Ctl->layerMix_en = TRUE;
-    layer3Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_LAYER_OSD_CTL_INFO_S   *layer4osd0Ctl = &voCtl->layer4osd0Ctl;
-    layer4osd0Ctl->layer_en = FALSE;
-    layer4osd0Ctl->layerMix_en = TRUE;
-    layer4osd0Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_LAYER_OSD_CTL_INFO_S   *layer5osd1Ctl = &voCtl->layer5osd1Ctl;
-    layer5osd1Ctl->layer_en = FALSE;
-    layer5osd1Ctl->layerMix_en = TRUE;
-    layer5osd1Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_LAYER_OSD_CTL_INFO_S *layer6osd2Ctl = &voCtl->layer6osd2Ctl;
-    layer6osd2Ctl->layer_en = FALSE;
-    layer6osd2Ctl->layerMix_en = TRUE;
-    layer6osd2Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_DISP_BACK_GROUD_INFO_S *dispBackGroudInfo = &voCtl->dispBackGroudInfo;
-    dispBackGroudInfo->y = 0x80;
-    dispBackGroudInfo->u = 0x80;
-    dispBackGroudInfo->v = 0x80;
-    //
-    voCtl->yuv2rgb_ctl_en = TRUE;
-    voCtl->ditherctlen = FALSE;
-    voCtl->clutctlen = FALSE;
+	VO_CHECK_POINTER(voCtl);
+	memset(voCtl,0,sizeof(voCtl));
+	//
+	VO_DISP_CTL_INFO_S *dispCtl= &voCtl->dispCtl;
+	dispCtl->Disp_en = TRUE;
+	dispCtl->SyncMode = VO_SYSTEM_MODE_1920x1080x30P;
+	dispCtl->total_size.Width = 0x898;
+	dispCtl->total_size.Height = 0x465;
+	dispCtl->disp_start.Width = VIDEO_DISP_ZONE_X_START;
+	dispCtl->disp_stop.Width = VIDEO_DISP_ZONE_X_STOP;
+	dispCtl->disp_start.Height = VIDEO_DISP_ZONE_Y_START;
+	dispCtl->disp_stop.Height = VIDEO_DISP_ZONE_Y_STOP;
+
+	//LAYER0
+	VO_LAYER_CTL_INFO_S *layer0Ctl = &voCtl->layer0Ctl;
+	layer0Ctl->layer_en = FALSE;
+	layer0Ctl->layer0_mfbd_en = FALSE;
+	layer0Ctl->layerMix_en = TRUE;
+	layer0Ctl->layerMix_glbalp = 0xff;
+	//LAYER1
+	VO_LAYER_CTL_INFO_S *layer1Ctl = &voCtl->layer1Ctl;
+	layer1Ctl->layer_en = FALSE;
+	layer1Ctl->layerMix_en = TRUE;
+	layer1Ctl->layerMix_glbalp = 0xff;
+	//LAYER2
+	VO_LAYER_CTL_INFO_S *layer2Ctl = &voCtl->layer2Ctl;
+	layer2Ctl->layer_en = FALSE;
+	layer2Ctl->layerMix_en = TRUE;
+	layer2Ctl->layerMix_glbalp = 0xff;
+	//LAYER3
+	VO_LAYER_CTL_INFO_S *layer3Ctl = &voCtl->layer3Ctl;
+	layer3Ctl->layer_en = FALSE;
+	layer3Ctl->layerMix_en = TRUE;
+	layer3Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_LAYER_OSD_CTL_INFO_S   *layer4osd0Ctl = &voCtl->layer4osd0Ctl;
+	layer4osd0Ctl->layer_en = FALSE;
+	layer4osd0Ctl->layerMix_en = TRUE;
+	layer4osd0Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_LAYER_OSD_CTL_INFO_S   *layer5osd1Ctl = &voCtl->layer5osd1Ctl;
+	layer5osd1Ctl->layer_en = FALSE;
+	layer5osd1Ctl->layerMix_en = TRUE;
+	layer5osd1Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_LAYER_OSD_CTL_INFO_S *layer6osd2Ctl = &voCtl->layer6osd2Ctl;
+	layer6osd2Ctl->layer_en = FALSE;
+	layer6osd2Ctl->layerMix_en = TRUE;
+	layer6osd2Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_DISP_BACK_GROUD_INFO_S *dispBackGroudInfo = &voCtl->dispBackGroudInfo;
+	dispBackGroudInfo->y = 0x80;
+	dispBackGroudInfo->u = 0x80;
+	dispBackGroudInfo->v = 0x80;
+	//
+	voCtl->yuv2rgb_ctl_en = TRUE;
+	voCtl->ditherctlen = FALSE;
+	voCtl->clutctlen = FALSE;
 
 
 }
 #endif
 
 /************************************************************************
-*VO/DSI/DPHY Bringup*
-*************************************************************************/
+ *VO/DSI/DPHY Bringup*
+ *************************************************************************/
 static int VO_TEST_800x1280_GetCtl(VO_CTL_S *voCtl)
 {
 
 
-    int HACT = 800;
-    int HSA = 24;
-    int HBP = 24;
-    int HFP = 30;
+	int HACT = 800;
+	int HSA = 24;
+	int HBP = 24;
+	int HFP = 30;
 
-    int VACT = 1280;
-    int VSA = 4;
-    int VBP = 12;
-    int VFP = 12;
-    int VOFF=1;
-    int HOFF=0;
+	int VACT = 1280;
+	int VSA = 4;
+	int VBP = 12;
+	int VFP = 12;
+	int VOFF=1;
+	int HOFF=0;
 
 
-    VO_CHECK_POINTER(voCtl);
-    memset(voCtl,0,sizeof(voCtl));
+	VO_CHECK_POINTER(voCtl);
+	memset(voCtl,0,sizeof(voCtl));
 
-    //
-    VO_DISP_CTL_INFO_S *dispCtl= &voCtl->dispCtl;
-    dispCtl->Disp_en = TRUE;
-    dispCtl->SyncMode = VO_SYSTEM_MODE_1080x1920x30P;
+	//
+	VO_DISP_CTL_INFO_S *dispCtl= &voCtl->dispCtl;
+	dispCtl->Disp_en = TRUE;
+	dispCtl->SyncMode = VO_SYSTEM_MODE_1080x1920x30P;
 #if 0
-    dispCtl->total_size.Width = 960 ;//1060  ;//1061 ;//1340;  1125            1264
-    dispCtl->total_size.Height =1298 + 5 ;// 1319;//1958;//1938???  2200
+	dispCtl->total_size.Width = 960 ;//1060  ;//1061 ;//1340;  1125            1264
+	dispCtl->total_size.Height =1298 + 5 ;// 1319;//1958;//1938???  2200
 
-    dispCtl->disp_start.Width = (5+20+20+1);  // 46
-    dispCtl->disp_stop.Width = 800 +(5+20+20+1) ;
+	dispCtl->disp_start.Width = (5+20+20+1);  // 46
+	dispCtl->disp_stop.Width = 800 +(5+20+20+1) ;
 
-    dispCtl->disp_start.Height = (5+8+1);   //14
-    dispCtl->disp_stop.Height = 1280 + (5+8+1);  // 1958 - 1920 - 14 = 24
+	dispCtl->disp_start.Height = (5+8+1);   //14
+	dispCtl->disp_stop.Height = 1280 + (5+8+1);  // 1958 - 1920 - 14 = 24
 #else
-    dispCtl->total_size.Width = HACT+HSA+HBP+HFP;
-    dispCtl->total_size.Height = VACT+VSA+VBP+VFP;
-    dispCtl->disp_start.Width = HSA+HBP+HOFF;
-    dispCtl->disp_stop.Width = HACT+HSA+HBP+HOFF;
-    dispCtl->disp_start.Height = VSA+VBP+VOFF;
-    dispCtl->disp_stop.Height = VACT+VSA+VBP+VOFF;
+	dispCtl->total_size.Width = HACT+HSA+HBP+HFP;
+	dispCtl->total_size.Height = VACT+VSA+VBP+VFP;
+	dispCtl->disp_start.Width = HSA+HBP+HOFF;
+	dispCtl->disp_stop.Width = HACT+HSA+HBP+HOFF;
+	dispCtl->disp_start.Height = VSA+VBP+VOFF;
+	dispCtl->disp_stop.Height = VACT+VSA+VBP+VOFF;
 #endif
 #if 1
-    //LAYER0
-    VO_LAYER_CTL_INFO_S *layer0Ctl = &voCtl->layer0Ctl;
-    layer0Ctl->layer_en = FALSE;                                //TRUE  zhaoshuai  use picture true or  full red  FALSE
-    layer0Ctl->layer0_mfbd_en = FALSE;
-    layer0Ctl->endiany = VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
-    layer0Ctl->endianuv = VO_VIDEO_LAYER_UV_ENDIAN_MODE2;       //VO_VIDEO_LAYER_UV_ENDIAN_MODE3
-    layer0Ctl->uvswap = FALSE;//;
-    layer0Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
-    layer0Ctl->active_size.Width = 1080;//1920;
-    layer0Ctl->active_size.Height = 1920;//1080;
-    layer0Ctl->out_size.Width = 1080; //1920
-    layer0Ctl->out_size.Height = 1920; //1080
-    layer0Ctl->ctl_offset.Width = 46;//198;
-    layer0Ctl->ctl_offset.Height = 14;//42;
-    layer0Ctl->size_offset.Width = 0x0;
-    layer0Ctl->size_offset.Height = 0x0;
-    
-    layer0Ctl->layerMix_glbalp = 0xff;
-
-    layer0Ctl->bufInfo.yAddr0= 0x01000000;
-    layer0Ctl->bufInfo.yAddr1= 0x01000000;
-    layer0Ctl->bufInfo.uvAddr0= 0x01000000 + 1920*1080;
-    layer0Ctl->bufInfo.uvAddr1= 0x01000000 + 1920*1080;
-
-    layer0Ctl->bufInfo.hsize_stride= 1080/8 -1;//VIDEO_LAYER2_RD_STRIDE;
-    layer0Ctl->bufInfo.vsize_stride= 1920;//0;
-    layer0Ctl->layerMix_en = TRUE;
-    layer0Ctl->layerMix_glbalp = 0xff;
+	//LAYER0
+	VO_LAYER_CTL_INFO_S *layer0Ctl = &voCtl->layer0Ctl;
+	layer0Ctl->layer_en = FALSE;                                //TRUE  zhaoshuai  use picture true or  full red  FALSE
+	layer0Ctl->layer0_mfbd_en = FALSE;
+	layer0Ctl->endiany = VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
+	layer0Ctl->endianuv = VO_VIDEO_LAYER_UV_ENDIAN_MODE2;       //VO_VIDEO_LAYER_UV_ENDIAN_MODE3
+	layer0Ctl->uvswap = FALSE;//;
+	layer0Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
+	layer0Ctl->active_size.Width = 1080;//1920;
+	layer0Ctl->active_size.Height = 1920;//1080;
+	layer0Ctl->out_size.Width = 1080; //1920
+	layer0Ctl->out_size.Height = 1920; //1080
+	layer0Ctl->ctl_offset.Width = 46;//198;
+	layer0Ctl->ctl_offset.Height = 14;//42;
+	layer0Ctl->size_offset.Width = 0x0;
+	layer0Ctl->size_offset.Height = 0x0;
+
+	layer0Ctl->layerMix_glbalp = 0xff;
+
+	layer0Ctl->bufInfo.yAddr0= 0x01000000;
+	layer0Ctl->bufInfo.yAddr1= 0x01000000;
+	layer0Ctl->bufInfo.uvAddr0= 0x01000000 + 1920*1080;
+	layer0Ctl->bufInfo.uvAddr1= 0x01000000 + 1920*1080;
+
+	layer0Ctl->bufInfo.hsize_stride= 1080/8 -1;//VIDEO_LAYER2_RD_STRIDE;
+	layer0Ctl->bufInfo.vsize_stride= 1920;//0;
+	layer0Ctl->layerMix_en = TRUE;
+	layer0Ctl->layerMix_glbalp = 0xff;
 #else
-    VO_LAYER_CTL_INFO_S *layer0Ctl = &voCtl->layer0Ctl;
-    layer0Ctl->layer_en = TRUE;
-    layer0Ctl->layer0_mfbd_en = FALSE;
-    layer0Ctl->endiany = VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
-    layer0Ctl->endianuv = VO_VIDEO_LAYER_UV_ENDIAN_MODE3;//VO_VIDEO_LAYER_UV_ENDIAN_MODE3
-    layer0Ctl->uvswap = FALSE;//;
-    layer0Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
-    layer0Ctl->active_size.Width =1080;//1920;
-    layer0Ctl->active_size.Height = 720;//1080;
-    layer0Ctl->out_size.Width = 1080;//1080; //1920
-    layer0Ctl->out_size.Height = 720;//1920; //1080
-    layer0Ctl->ctl_offset.Width = 46;//198;
-    layer0Ctl->ctl_offset.Height = 14;//42;
-    layer0Ctl->size_offset.Width = 0x0;
-    layer0Ctl->size_offset.Height = 0x0;
-    layer0Ctl->bufInfo.yAddr0= ISP_BUF_MAIN_Y;//0x01000000;
-    layer0Ctl->bufInfo.yAddr1= ISP_BUF_MAIN_Y;//0x01000000;
-    layer0Ctl->bufInfo.uvAddr0= ISP_BUF_MAIN_UV;//0x01000000 + 1920*1080;
-    layer0Ctl->bufInfo.uvAddr1= ISP_BUF_MAIN_UV;//0x01000000 + 1920*1080;
-    layer0Ctl->bufInfo.hsize_stride= ISP_BUF_MAIN_Y_STRIDE/8 -1;//1080/8 -1;//1080/8 -1;//VIDEO_LAYER2_RD_STRIDE;
-    layer0Ctl->bufInfo.vsize_stride= 1920;//0;
-    layer0Ctl->layerMix_en = TRUE;
-    layer0Ctl->layerMix_glbalp = 0xff;
+	VO_LAYER_CTL_INFO_S *layer0Ctl = &voCtl->layer0Ctl;
+	layer0Ctl->layer_en = TRUE;
+	layer0Ctl->layer0_mfbd_en = FALSE;
+	layer0Ctl->endiany = VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
+	layer0Ctl->endianuv = VO_VIDEO_LAYER_UV_ENDIAN_MODE3;//VO_VIDEO_LAYER_UV_ENDIAN_MODE3
+	layer0Ctl->uvswap = FALSE;//;
+	layer0Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
+	layer0Ctl->active_size.Width =1080;//1920;
+	layer0Ctl->active_size.Height = 720;//1080;
+	layer0Ctl->out_size.Width = 1080;//1080; //1920
+	layer0Ctl->out_size.Height = 720;//1920; //1080
+	layer0Ctl->ctl_offset.Width = 46;//198;
+	layer0Ctl->ctl_offset.Height = 14;//42;
+	layer0Ctl->size_offset.Width = 0x0;
+	layer0Ctl->size_offset.Height = 0x0;
+	layer0Ctl->bufInfo.yAddr0= ISP_BUF_MAIN_Y;//0x01000000;
+	layer0Ctl->bufInfo.yAddr1= ISP_BUF_MAIN_Y;//0x01000000;
+	layer0Ctl->bufInfo.uvAddr0= ISP_BUF_MAIN_UV;//0x01000000 + 1920*1080;
+	layer0Ctl->bufInfo.uvAddr1= ISP_BUF_MAIN_UV;//0x01000000 + 1920*1080;
+	layer0Ctl->bufInfo.hsize_stride= ISP_BUF_MAIN_Y_STRIDE/8 -1;//1080/8 -1;//1080/8 -1;//VIDEO_LAYER2_RD_STRIDE;
+	layer0Ctl->bufInfo.vsize_stride= 1920;//0;
+	layer0Ctl->layerMix_en = TRUE;
+	layer0Ctl->layerMix_glbalp = 0xff;
 #endif
-/*
-    VO_LAYER_CTL_INFO_S *layer0Ctl = &voCtl->layer0Ctl;
-    layer0Ctl->layer_en = TRUE;
-    layer0Ctl->layer0_mfbd_en = FALSE;
-    layer0Ctl->endiany = VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
-    layer0Ctl->endianuv = VO_VIDEO_LAYER_UV_ENDIAN_MODE3;//VO_VIDEO_LAYER_UV_ENDIAN_MODE3
-    layer0Ctl->uvswap = FALSE;//;
-    layer0Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
-    layer0Ctl->active_size.Width =1080;//1920;
-    layer0Ctl->active_size.Height = 720;//1080;
-    layer0Ctl->out_size.Width = 1080;//1080; //1920
-    layer0Ctl->out_size.Height = 720;//1920; //1080
-    layer0Ctl->ctl_offset.Width = 46;//198;
-    layer0Ctl->ctl_offset.Height = 14;//42;
-    layer0Ctl->size_offset.Width = 0x0;
-    layer0Ctl->size_offset.Height = 0x0;
-    layer0Ctl->bufInfo.yAddr0= 0x01000000;
-    layer0Ctl->bufInfo.yAddr1= 0x01000000;//0x01000000;
-    layer0Ctl->bufInfo.uvAddr0= ISP_BUF_MAIN_UV;//0x01000000 + 1920*1080;
-    layer0Ctl->bufInfo.uvAddr1= ISP_BUF_MAIN_UV;//0x01000000 + 1920*1080;
-    layer0Ctl->bufInfo.hsize_stride= 1080/8 -1;//1080/8 -1;//1080/8 -1;//VIDEO_LAYER2_RD_STRIDE;
-    layer0Ctl->bufInfo.vsize_stride= 1920;//0;
-    layer0Ctl->layerMix_en = TRUE;
-    layer0Ctl->layerMix_glbalp = 0xff;
-*/
-   
-
-    //LAYER1
-    VO_LAYER_CTL_INFO_S *layer1Ctl = &voCtl->layer1Ctl;
-    layer1Ctl->layer_en = FALSE;
-    layer1Ctl->layerMix_en = TRUE;
-    layer1Ctl->layerMix_glbalp = 0xff;
-    //LAYER2
-    VO_LAYER_CTL_INFO_S *layer2Ctl = &voCtl->layer2Ctl;
-    layer2Ctl->layer_en = FALSE;
-    layer2Ctl->layerMix_en = TRUE;
-    layer2Ctl->layerMix_glbalp = 0xff;
-    //LAYER3
-    VO_LAYER_CTL_INFO_S *layer3Ctl = &voCtl->layer3Ctl;
-    layer3Ctl->layer_en = FALSE;
-    layer3Ctl->layerMix_en = TRUE;
-    layer3Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_LAYER_OSD_CTL_INFO_S   *layer4osd0Ctl = &voCtl->layer4osd0Ctl;
-    layer4osd0Ctl->layer_en = TRUE;
-    layer4osd0Ctl->osdrgb2yuvEn = TRUE;
-    layer4osd0Ctl->osdtype = OSD_RGB_32BIT;//OSD_MONOCHROME_8BIT;
-    layer4osd0Ctl->alphatpye = OSD_FIXED_VALUE;
-    layer4osd0Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
-    layer4osd0Ctl->active_size.Width = 640;
-    layer4osd0Ctl->active_size.Height = 480;
-    layer4osd0Ctl->ctl_offset.Width = dispCtl->disp_start.Width + 80;//80 + 46;
-    layer4osd0Ctl->ctl_offset.Height = 400;
-    layer4osd0Ctl->osdBufInfo.alp_addr0= 0x1fe00000;
-    layer4osd0Ctl->osdBufInfo.alp_addr1= 0x1fe00000;
-    layer4osd0Ctl->osdBufInfo.alpstride= 2560/8;
-    layer4osd0Ctl->osdBufInfo.vlu_addr0= 0x1fe00000;
-    layer4osd0Ctl->osdBufInfo.vlu_addr1= 0x1fe00000;
-    layer4osd0Ctl->osdBufInfo.osdstride= 2560/8;
-    layer4osd0Ctl->osdDmaInfo.dmarequestlen = 0xf;
-    layer4osd0Ctl->osdDmaInfo.dmamap = OSD_ORIGINAL_ORDER;
-    layer4osd0Ctl->osdDmaInfo.rgbrev = OSD_RGB_REV_R;
-    layer4osd0Ctl->layerMix_en = TRUE;
-    layer4osd0Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_LAYER_OSD_CTL_INFO_S   *layer5osd1Ctl = &voCtl->layer5osd1Ctl;
-    layer5osd1Ctl->layer_en = FALSE;
-    layer5osd1Ctl->osdrgb2yuvEn = TRUE;
-    layer5osd1Ctl->osdtype = OSD_MONOCHROME_8BIT;
-    layer5osd1Ctl->alphatpye = OSD_FIXED_VALUE;
-    layer5osd1Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
-    layer5osd1Ctl->active_size.Width = 216;
-    layer5osd1Ctl->active_size.Height = 960;
-    layer5osd1Ctl->ctl_offset.Width = 800;
-    layer5osd1Ctl->ctl_offset.Height = 200;
-    layer5osd1Ctl->osdBufInfo.alp_addr0= 0x20200100;
-    layer5osd1Ctl->osdBufInfo.alp_addr1= 0x20200100;
-    layer5osd1Ctl->osdBufInfo.alpstride= 256/8;
-    layer5osd1Ctl->osdBufInfo.vlu_addr0= 0x20200100;
-    layer5osd1Ctl->osdBufInfo.vlu_addr1= 0x20200100;
-    layer5osd1Ctl->osdBufInfo.osdstride= 256/8;
-    layer5osd1Ctl->osdDmaInfo.dmarequestlen = 0xf;
-    layer5osd1Ctl->osdDmaInfo.dmamap = OSD_ORIGINAL_ORDER;
-    layer5osd1Ctl->osdDmaInfo.rgbrev = OSD_RGB_REV_R;
-    layer5osd1Ctl->layerMix_en = TRUE;
-    layer5osd1Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_LAYER_OSD_CTL_INFO_S *layer6osd2Ctl = &voCtl->layer6osd2Ctl;
-    layer6osd2Ctl->layer_en = FALSE;
-    layer6osd2Ctl->osdrgb2yuvEn = TRUE;
-    layer6osd2Ctl->layerMix_en = TRUE;
-    layer6osd2Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_DISP_BACK_GROUD_INFO_S *dispBackGroudInfo = &voCtl->dispBackGroudInfo;
-    dispBackGroudInfo->y = 0xff;
-    dispBackGroudInfo->u = 0x80;
-    dispBackGroudInfo->v = 0x80;
-    //
-    voCtl->yuv2rgb_ctl_en = TRUE;
-    voCtl->ditherctlen = TRUE;
-    voCtl->clutctlen = FALSE;
+	/*
+	   VO_LAYER_CTL_INFO_S *layer0Ctl = &voCtl->layer0Ctl;
+	   layer0Ctl->layer_en = TRUE;
+	   layer0Ctl->layer0_mfbd_en = FALSE;
+	   layer0Ctl->endiany = VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
+	   layer0Ctl->endianuv = VO_VIDEO_LAYER_UV_ENDIAN_MODE3;//VO_VIDEO_LAYER_UV_ENDIAN_MODE3
+	   layer0Ctl->uvswap = FALSE;//;
+	   layer0Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
+	   layer0Ctl->active_size.Width =1080;//1920;
+	   layer0Ctl->active_size.Height = 720;//1080;
+	   layer0Ctl->out_size.Width = 1080;//1080; //1920
+	   layer0Ctl->out_size.Height = 720;//1920; //1080
+	   layer0Ctl->ctl_offset.Width = 46;//198;
+	   layer0Ctl->ctl_offset.Height = 14;//42;
+	   layer0Ctl->size_offset.Width = 0x0;
+	   layer0Ctl->size_offset.Height = 0x0;
+	   layer0Ctl->bufInfo.yAddr0= 0x01000000;
+	   layer0Ctl->bufInfo.yAddr1= 0x01000000;//0x01000000;
+	   layer0Ctl->bufInfo.uvAddr0= ISP_BUF_MAIN_UV;//0x01000000 + 1920*1080;
+	   layer0Ctl->bufInfo.uvAddr1= ISP_BUF_MAIN_UV;//0x01000000 + 1920*1080;
+	   layer0Ctl->bufInfo.hsize_stride= 1080/8 -1;//1080/8 -1;//1080/8 -1;//VIDEO_LAYER2_RD_STRIDE;
+	   layer0Ctl->bufInfo.vsize_stride= 1920;//0;
+	   layer0Ctl->layerMix_en = TRUE;
+	   layer0Ctl->layerMix_glbalp = 0xff;
+	 */
+
+
+	//LAYER1
+	VO_LAYER_CTL_INFO_S *layer1Ctl = &voCtl->layer1Ctl;
+	layer1Ctl->layer_en = FALSE;
+	layer1Ctl->layerMix_en = TRUE;
+	layer1Ctl->layerMix_glbalp = 0xff;
+	//LAYER2
+	VO_LAYER_CTL_INFO_S *layer2Ctl = &voCtl->layer2Ctl;
+	layer2Ctl->layer_en = FALSE;
+	layer2Ctl->layerMix_en = TRUE;
+	layer2Ctl->layerMix_glbalp = 0xff;
+	//LAYER3
+	VO_LAYER_CTL_INFO_S *layer3Ctl = &voCtl->layer3Ctl;
+	layer3Ctl->layer_en = FALSE;
+	layer3Ctl->layerMix_en = TRUE;
+	layer3Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_LAYER_OSD_CTL_INFO_S   *layer4osd0Ctl = &voCtl->layer4osd0Ctl;
+	layer4osd0Ctl->layer_en = TRUE;
+	layer4osd0Ctl->osdrgb2yuvEn = TRUE;
+	layer4osd0Ctl->osdtype = OSD_RGB_32BIT;//OSD_MONOCHROME_8BIT;
+	layer4osd0Ctl->alphatpye = OSD_FIXED_VALUE;
+	layer4osd0Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
+	layer4osd0Ctl->active_size.Width = 640;
+	layer4osd0Ctl->active_size.Height = 480;
+	layer4osd0Ctl->ctl_offset.Width = dispCtl->disp_start.Width + 80;//80 + 46;
+	layer4osd0Ctl->ctl_offset.Height = 400;
+	layer4osd0Ctl->osdBufInfo.alp_addr0= 0x1fe00000;
+	layer4osd0Ctl->osdBufInfo.alp_addr1= 0x1fe00000;
+	layer4osd0Ctl->osdBufInfo.alpstride= 2560/8;
+	layer4osd0Ctl->osdBufInfo.vlu_addr0= 0x1fe00000;
+	layer4osd0Ctl->osdBufInfo.vlu_addr1= 0x1fe00000;
+	layer4osd0Ctl->osdBufInfo.osdstride= 2560/8;
+	layer4osd0Ctl->osdDmaInfo.dmarequestlen = 0xf;
+	layer4osd0Ctl->osdDmaInfo.dmamap = OSD_ORIGINAL_ORDER;
+	layer4osd0Ctl->osdDmaInfo.rgbrev = OSD_RGB_REV_R;
+	layer4osd0Ctl->layerMix_en = TRUE;
+	layer4osd0Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_LAYER_OSD_CTL_INFO_S   *layer5osd1Ctl = &voCtl->layer5osd1Ctl;
+	layer5osd1Ctl->layer_en = FALSE;
+	layer5osd1Ctl->osdrgb2yuvEn = TRUE;
+	layer5osd1Ctl->osdtype = OSD_MONOCHROME_8BIT;
+	layer5osd1Ctl->alphatpye = OSD_FIXED_VALUE;
+	layer5osd1Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
+	layer5osd1Ctl->active_size.Width = 216;
+	layer5osd1Ctl->active_size.Height = 960;
+	layer5osd1Ctl->ctl_offset.Width = 800;
+	layer5osd1Ctl->ctl_offset.Height = 200;
+	layer5osd1Ctl->osdBufInfo.alp_addr0= 0x20200100;
+	layer5osd1Ctl->osdBufInfo.alp_addr1= 0x20200100;
+	layer5osd1Ctl->osdBufInfo.alpstride= 256/8;
+	layer5osd1Ctl->osdBufInfo.vlu_addr0= 0x20200100;
+	layer5osd1Ctl->osdBufInfo.vlu_addr1= 0x20200100;
+	layer5osd1Ctl->osdBufInfo.osdstride= 256/8;
+	layer5osd1Ctl->osdDmaInfo.dmarequestlen = 0xf;
+	layer5osd1Ctl->osdDmaInfo.dmamap = OSD_ORIGINAL_ORDER;
+	layer5osd1Ctl->osdDmaInfo.rgbrev = OSD_RGB_REV_R;
+	layer5osd1Ctl->layerMix_en = TRUE;
+	layer5osd1Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_LAYER_OSD_CTL_INFO_S *layer6osd2Ctl = &voCtl->layer6osd2Ctl;
+	layer6osd2Ctl->layer_en = FALSE;
+	layer6osd2Ctl->osdrgb2yuvEn = TRUE;
+	layer6osd2Ctl->layerMix_en = TRUE;
+	layer6osd2Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_DISP_BACK_GROUD_INFO_S *dispBackGroudInfo = &voCtl->dispBackGroudInfo;
+	dispBackGroudInfo->y = 0xff;
+	dispBackGroudInfo->u = 0x80;
+	dispBackGroudInfo->v = 0x80;
+	//
+	voCtl->yuv2rgb_ctl_en = TRUE;
+	voCtl->ditherctlen = TRUE;
+	voCtl->clutctlen = FALSE;
 }
 
 /************************************************************************
-*VO/DSI/DPHY Bringup*
-*************************************************************************/
+ *VO/DSI/DPHY Bringup*
+ *************************************************************************/
 static int VO_TEST_BRINGUP_DSI_GetCtl(VO_CTL_S *voCtl)
 {
-    VO_CHECK_POINTER(voCtl);
-    memset(voCtl,0,sizeof(voCtl));
-    //
-    VO_DISP_CTL_INFO_S *dispCtl= &voCtl->dispCtl;
-    dispCtl->Disp_en = TRUE;
-    dispCtl->SyncMode = VO_SYSTEM_MODE_1080x1920x30P;
+	VO_CHECK_POINTER(voCtl);
+	memset(voCtl,0,sizeof(voCtl));
+	//
+	VO_DISP_CTL_INFO_S *dispCtl= &voCtl->dispCtl;
+	dispCtl->Disp_en = TRUE;
+	dispCtl->SyncMode = VO_SYSTEM_MODE_1080x1920x30P;
 #if 1
-    dispCtl->total_size.Width = 1254;//1340;  1125 
-    dispCtl->total_size.Height = 1958;//1958;//1938???  2200
-    dispCtl->disp_start.Width = 20 + 20;
-    dispCtl->disp_stop.Width = 1080 + 20 + 20;
-    dispCtl->disp_start.Height = (5+8+1);   //14
-    dispCtl->disp_stop.Height = 1920 + (5+8+1);  // 1958 - 1920 - 14 = 24
+	dispCtl->total_size.Width = 1254;//1340;  1125
+	dispCtl->total_size.Height = 1958;//1958;//1938???  2200
+	dispCtl->disp_start.Width = 20 + 20;
+	dispCtl->disp_stop.Width = 1080 + 20 + 20;
+	dispCtl->disp_start.Height = (5+8+1);   //14
+	dispCtl->disp_stop.Height = 1920 + (5+8+1);  // 1958 - 1920 - 14 = 24
 #else
-    dispCtl->total_size.Width = 1125 ;//1340;  1125 
-    dispCtl->total_size.Height = 2200;//1958;//1938???  2200
-    dispCtl->disp_start.Width = (5+20+20+1);
-    dispCtl->disp_stop.Width = 1080 +(5+20+20+1);
-    dispCtl->disp_start.Height = (5+8+1);
-    dispCtl->disp_stop.Height = 1920 + (5+8+1);
+	dispCtl->total_size.Width = 1125 ;//1340;  1125
+	dispCtl->total_size.Height = 2200;//1958;//1938???  2200
+	dispCtl->disp_start.Width = (5+20+20+1);
+	dispCtl->disp_stop.Width = 1080 +(5+20+20+1);
+	dispCtl->disp_start.Height = (5+8+1);
+	dispCtl->disp_stop.Height = 1920 + (5+8+1);
 #endif
 #if 1
-    //LAYER0
-    VO_LAYER_CTL_INFO_S *layer0Ctl = &voCtl->layer0Ctl;
-    layer0Ctl->layer_en = FALSE;                                //TRUE  zhaoshuai  use picture true or  full red  FALSE
-    layer0Ctl->layer0_mfbd_en = FALSE;
-    layer0Ctl->endiany = VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
-    layer0Ctl->endianuv = VO_VIDEO_LAYER_UV_ENDIAN_MODE2;       //VO_VIDEO_LAYER_UV_ENDIAN_MODE3
-    layer0Ctl->uvswap = FALSE;//;
-    layer0Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
-    layer0Ctl->active_size.Width = 1080;//1920;
-    layer0Ctl->active_size.Height = 1920;//1080;
-    layer0Ctl->out_size.Width = 1080; //1920
-    layer0Ctl->out_size.Height = 1920; //1080
-    layer0Ctl->ctl_offset.Width = 46;//198;
-    layer0Ctl->ctl_offset.Height = 14;//42;
-    layer0Ctl->size_offset.Width = 0x0;
-    layer0Ctl->size_offset.Height = 0x0;
-    
-    layer0Ctl->layerMix_glbalp = 0xff;
-
-    layer0Ctl->bufInfo.yAddr0= 0x01000000;
-    layer0Ctl->bufInfo.yAddr1= 0x01000000;
-    layer0Ctl->bufInfo.uvAddr0= 0x01000000 + 1920*1080;
-    layer0Ctl->bufInfo.uvAddr1= 0x01000000 + 1920*1080;
-
-    layer0Ctl->bufInfo.hsize_stride= 1080/8 -1;//VIDEO_LAYER2_RD_STRIDE;
-    layer0Ctl->bufInfo.vsize_stride= 1920;//0;
-    layer0Ctl->layerMix_en = TRUE;
-    layer0Ctl->layerMix_glbalp = 0xff;
+	//LAYER0
+	VO_LAYER_CTL_INFO_S *layer0Ctl = &voCtl->layer0Ctl;
+	layer0Ctl->layer_en = FALSE;                                //TRUE  zhaoshuai  use picture true or  full red  FALSE
+	layer0Ctl->layer0_mfbd_en = FALSE;
+	layer0Ctl->endiany = VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
+	layer0Ctl->endianuv = VO_VIDEO_LAYER_UV_ENDIAN_MODE2;       //VO_VIDEO_LAYER_UV_ENDIAN_MODE3
+	layer0Ctl->uvswap = FALSE;//;
+	layer0Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
+	layer0Ctl->active_size.Width = 1080;//1920;
+	layer0Ctl->active_size.Height = 1920;//1080;
+	layer0Ctl->out_size.Width = 1080; //1920
+	layer0Ctl->out_size.Height = 1920; //1080
+	layer0Ctl->ctl_offset.Width = 46;//198;
+	layer0Ctl->ctl_offset.Height = 14;//42;
+	layer0Ctl->size_offset.Width = 0x0;
+	layer0Ctl->size_offset.Height = 0x0;
+
+	layer0Ctl->layerMix_glbalp = 0xff;
+
+	layer0Ctl->bufInfo.yAddr0= 0x01000000;
+	layer0Ctl->bufInfo.yAddr1= 0x01000000;
+	layer0Ctl->bufInfo.uvAddr0= 0x01000000 + 1920*1080;
+	layer0Ctl->bufInfo.uvAddr1= 0x01000000 + 1920*1080;
+
+	layer0Ctl->bufInfo.hsize_stride= 1080/8 -1;//VIDEO_LAYER2_RD_STRIDE;
+	layer0Ctl->bufInfo.vsize_stride= 1920;//0;
+	layer0Ctl->layerMix_en = TRUE;
+	layer0Ctl->layerMix_glbalp = 0xff;
 #else
-    VO_LAYER_CTL_INFO_S *layer0Ctl = &voCtl->layer0Ctl;
-    layer0Ctl->layer_en = TRUE;
-    layer0Ctl->layer0_mfbd_en = FALSE;
-    layer0Ctl->endiany = VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
-    layer0Ctl->endianuv = VO_VIDEO_LAYER_UV_ENDIAN_MODE3;//VO_VIDEO_LAYER_UV_ENDIAN_MODE3
-    layer0Ctl->uvswap = FALSE;//;
-    layer0Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
-    layer0Ctl->active_size.Width =1080;//1920;
-    layer0Ctl->active_size.Height = 720;//1080;
-    layer0Ctl->out_size.Width = 1080;//1080; //1920
-    layer0Ctl->out_size.Height = 720;//1920; //1080
-    layer0Ctl->ctl_offset.Width = 46;//198;
-    layer0Ctl->ctl_offset.Height = 14;//42;
-    layer0Ctl->size_offset.Width = 0x0;
-    layer0Ctl->size_offset.Height = 0x0;
-    layer0Ctl->bufInfo.yAddr0= ISP_BUF_MAIN_Y;//0x01000000;
-    layer0Ctl->bufInfo.yAddr1= ISP_BUF_MAIN_Y;//0x01000000;
-    layer0Ctl->bufInfo.uvAddr0= ISP_BUF_MAIN_UV;//0x01000000 + 1920*1080;
-    layer0Ctl->bufInfo.uvAddr1= ISP_BUF_MAIN_UV;//0x01000000 + 1920*1080;
-    layer0Ctl->bufInfo.hsize_stride= ISP_BUF_MAIN_Y_STRIDE/8 -1;//1080/8 -1;//1080/8 -1;//VIDEO_LAYER2_RD_STRIDE;
-    layer0Ctl->bufInfo.vsize_stride= 1920;//0;
-    layer0Ctl->layerMix_en = TRUE;
-    layer0Ctl->layerMix_glbalp = 0xff;
+	VO_LAYER_CTL_INFO_S *layer0Ctl = &voCtl->layer0Ctl;
+	layer0Ctl->layer_en = TRUE;
+	layer0Ctl->layer0_mfbd_en = FALSE;
+	layer0Ctl->endiany = VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
+	layer0Ctl->endianuv = VO_VIDEO_LAYER_UV_ENDIAN_MODE3;//VO_VIDEO_LAYER_UV_ENDIAN_MODE3
+	layer0Ctl->uvswap = FALSE;//;
+	layer0Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
+	layer0Ctl->active_size.Width =1080;//1920;
+	layer0Ctl->active_size.Height = 720;//1080;
+	layer0Ctl->out_size.Width = 1080;//1080; //1920
+	layer0Ctl->out_size.Height = 720;//1920; //1080
+	layer0Ctl->ctl_offset.Width = 46;//198;
+	layer0Ctl->ctl_offset.Height = 14;//42;
+	layer0Ctl->size_offset.Width = 0x0;
+	layer0Ctl->size_offset.Height = 0x0;
+	layer0Ctl->bufInfo.yAddr0= ISP_BUF_MAIN_Y;//0x01000000;
+	layer0Ctl->bufInfo.yAddr1= ISP_BUF_MAIN_Y;//0x01000000;
+	layer0Ctl->bufInfo.uvAddr0= ISP_BUF_MAIN_UV;//0x01000000 + 1920*1080;
+	layer0Ctl->bufInfo.uvAddr1= ISP_BUF_MAIN_UV;//0x01000000 + 1920*1080;
+	layer0Ctl->bufInfo.hsize_stride= ISP_BUF_MAIN_Y_STRIDE/8 -1;//1080/8 -1;//1080/8 -1;//VIDEO_LAYER2_RD_STRIDE;
+	layer0Ctl->bufInfo.vsize_stride= 1920;//0;
+	layer0Ctl->layerMix_en = TRUE;
+	layer0Ctl->layerMix_glbalp = 0xff;
 #endif
-/*
-    VO_LAYER_CTL_INFO_S *layer0Ctl = &voCtl->layer0Ctl;
-    layer0Ctl->layer_en = TRUE;
-    layer0Ctl->layer0_mfbd_en = FALSE;
-    layer0Ctl->endiany = VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
-    layer0Ctl->endianuv = VO_VIDEO_LAYER_UV_ENDIAN_MODE3;//VO_VIDEO_LAYER_UV_ENDIAN_MODE3
-    layer0Ctl->uvswap = FALSE;//;
-    layer0Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
-    layer0Ctl->active_size.Width =1080;//1920;
-    layer0Ctl->active_size.Height = 720;//1080;
-    layer0Ctl->out_size.Width = 1080;//1080; //1920
-    layer0Ctl->out_size.Height = 720;//1920; //1080
-    layer0Ctl->ctl_offset.Width = 46;//198;
-    layer0Ctl->ctl_offset.Height = 14;//42;
-    layer0Ctl->size_offset.Width = 0x0;
-    layer0Ctl->size_offset.Height = 0x0;
-    layer0Ctl->bufInfo.yAddr0= 0x01000000;
-    layer0Ctl->bufInfo.yAddr1= 0x01000000;//0x01000000;
-    layer0Ctl->bufInfo.uvAddr0= ISP_BUF_MAIN_UV;//0x01000000 + 1920*1080;
-    layer0Ctl->bufInfo.uvAddr1= ISP_BUF_MAIN_UV;//0x01000000 + 1920*1080;
-    layer0Ctl->bufInfo.hsize_stride= 1080/8 -1;//1080/8 -1;//1080/8 -1;//VIDEO_LAYER2_RD_STRIDE;
-    layer0Ctl->bufInfo.vsize_stride= 1920;//0;
-    layer0Ctl->layerMix_en = TRUE;
-    layer0Ctl->layerMix_glbalp = 0xff;
-*/
-   
-
-    //LAYER1
-    VO_LAYER_CTL_INFO_S *layer1Ctl = &voCtl->layer1Ctl;
-    layer1Ctl->layer_en = FALSE;
-    layer1Ctl->layerMix_en = TRUE;
-    layer1Ctl->layerMix_glbalp = 0xff;
-    //LAYER2
-    VO_LAYER_CTL_INFO_S *layer2Ctl = &voCtl->layer2Ctl;
-    layer2Ctl->layer_en = FALSE;
-    layer2Ctl->layerMix_en = TRUE;
-    layer2Ctl->layerMix_glbalp = 0xff;
-    //LAYER3
-    VO_LAYER_CTL_INFO_S *layer3Ctl = &voCtl->layer3Ctl;
-    layer3Ctl->layer_en = FALSE;
-    layer3Ctl->layerMix_en = TRUE;
-    layer3Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_LAYER_OSD_CTL_INFO_S   *layer4osd0Ctl = &voCtl->layer4osd0Ctl;
-    layer4osd0Ctl->layer_en = TRUE;
-    layer4osd0Ctl->osdrgb2yuvEn = TRUE;
-    layer4osd0Ctl->osdtype = OSD_RGB_32BIT;//OSD_MONOCHROME_8BIT;
-    layer4osd0Ctl->alphatpye = OSD_FIXED_VALUE;
-    layer4osd0Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
-    layer4osd0Ctl->active_size.Width = 640;
-    layer4osd0Ctl->active_size.Height = 480;
-    layer4osd0Ctl->ctl_offset.Width = 220 + 46;
-    layer4osd0Ctl->ctl_offset.Height = 720;
-    layer4osd0Ctl->osdBufInfo.alp_addr0= 0x1fe00000;
-    layer4osd0Ctl->osdBufInfo.alp_addr1= 0x1fe00000;
-    layer4osd0Ctl->osdBufInfo.alpstride= 2560/8;
-    layer4osd0Ctl->osdBufInfo.vlu_addr0= 0x1fe00000;
-    layer4osd0Ctl->osdBufInfo.vlu_addr1= 0x1fe00000;
-    layer4osd0Ctl->osdBufInfo.osdstride= 2560/8;
-    layer4osd0Ctl->osdDmaInfo.dmarequestlen = 0xf;
-    layer4osd0Ctl->osdDmaInfo.dmamap = OSD_ORIGINAL_ORDER;
-    layer4osd0Ctl->osdDmaInfo.rgbrev = OSD_RGB_REV_R;
-    layer4osd0Ctl->layerMix_en = TRUE;
-    layer4osd0Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_LAYER_OSD_CTL_INFO_S   *layer5osd1Ctl = &voCtl->layer5osd1Ctl;
-    layer5osd1Ctl->layer_en = FALSE;
-    layer5osd1Ctl->osdrgb2yuvEn = TRUE;
-    layer5osd1Ctl->osdtype = OSD_MONOCHROME_8BIT;
-    layer5osd1Ctl->alphatpye = OSD_FIXED_VALUE;
-    layer5osd1Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
-    layer5osd1Ctl->active_size.Width = 216;
-    layer5osd1Ctl->active_size.Height = 960;
-    layer5osd1Ctl->ctl_offset.Width = 800;
-    layer5osd1Ctl->ctl_offset.Height = 200;
-    layer5osd1Ctl->osdBufInfo.alp_addr0= 0x20200100;
-    layer5osd1Ctl->osdBufInfo.alp_addr1= 0x20200100;
-    layer5osd1Ctl->osdBufInfo.alpstride= 256/8;
-    layer5osd1Ctl->osdBufInfo.vlu_addr0= 0x20200100;
-    layer5osd1Ctl->osdBufInfo.vlu_addr1= 0x20200100;
-    layer5osd1Ctl->osdBufInfo.osdstride= 256/8;
-    layer5osd1Ctl->osdDmaInfo.dmarequestlen = 0xf;
-    layer5osd1Ctl->osdDmaInfo.dmamap = OSD_ORIGINAL_ORDER;
-    layer5osd1Ctl->osdDmaInfo.rgbrev = OSD_RGB_REV_R;
-    layer5osd1Ctl->layerMix_en = TRUE;
-    layer5osd1Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_LAYER_OSD_CTL_INFO_S *layer6osd2Ctl = &voCtl->layer6osd2Ctl;
-    layer6osd2Ctl->layer_en = FALSE;
-    layer6osd2Ctl->osdrgb2yuvEn = TRUE;
-    layer6osd2Ctl->layerMix_en = TRUE;
-    layer6osd2Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_DISP_BACK_GROUD_INFO_S *dispBackGroudInfo = &voCtl->dispBackGroudInfo;
-    dispBackGroudInfo->y = 0xff;
-    dispBackGroudInfo->u = 0x80;
-    dispBackGroudInfo->v = 0x80;
-    //
-    voCtl->yuv2rgb_ctl_en = TRUE;
-    voCtl->ditherctlen = TRUE;
-    voCtl->clutctlen = FALSE;
+	/*
+	   VO_LAYER_CTL_INFO_S *layer0Ctl = &voCtl->layer0Ctl;
+	   layer0Ctl->layer_en = TRUE;
+	   layer0Ctl->layer0_mfbd_en = FALSE;
+	   layer0Ctl->endiany = VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
+	   layer0Ctl->endianuv = VO_VIDEO_LAYER_UV_ENDIAN_MODE3;//VO_VIDEO_LAYER_UV_ENDIAN_MODE3
+	   layer0Ctl->uvswap = FALSE;//;
+	   layer0Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
+	   layer0Ctl->active_size.Width =1080;//1920;
+	   layer0Ctl->active_size.Height = 720;//1080;
+	   layer0Ctl->out_size.Width = 1080;//1080; //1920
+	   layer0Ctl->out_size.Height = 720;//1920; //1080
+	   layer0Ctl->ctl_offset.Width = 46;//198;
+	   layer0Ctl->ctl_offset.Height = 14;//42;
+	   layer0Ctl->size_offset.Width = 0x0;
+	   layer0Ctl->size_offset.Height = 0x0;
+	   layer0Ctl->bufInfo.yAddr0= 0x01000000;
+	   layer0Ctl->bufInfo.yAddr1= 0x01000000;//0x01000000;
+	   layer0Ctl->bufInfo.uvAddr0= ISP_BUF_MAIN_UV;//0x01000000 + 1920*1080;
+	   layer0Ctl->bufInfo.uvAddr1= ISP_BUF_MAIN_UV;//0x01000000 + 1920*1080;
+	   layer0Ctl->bufInfo.hsize_stride= 1080/8 -1;//1080/8 -1;//1080/8 -1;//VIDEO_LAYER2_RD_STRIDE;
+	   layer0Ctl->bufInfo.vsize_stride= 1920;//0;
+	   layer0Ctl->layerMix_en = TRUE;
+	   layer0Ctl->layerMix_glbalp = 0xff;
+	 */
+
+
+	//LAYER1
+	VO_LAYER_CTL_INFO_S *layer1Ctl = &voCtl->layer1Ctl;
+	layer1Ctl->layer_en = FALSE;
+	layer1Ctl->layerMix_en = TRUE;
+	layer1Ctl->layerMix_glbalp = 0xff;
+	//LAYER2
+	VO_LAYER_CTL_INFO_S *layer2Ctl = &voCtl->layer2Ctl;
+	layer2Ctl->layer_en = FALSE;
+	layer2Ctl->layerMix_en = TRUE;
+	layer2Ctl->layerMix_glbalp = 0xff;
+	//LAYER3
+	VO_LAYER_CTL_INFO_S *layer3Ctl = &voCtl->layer3Ctl;
+	layer3Ctl->layer_en = FALSE;
+	layer3Ctl->layerMix_en = TRUE;
+	layer3Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_LAYER_OSD_CTL_INFO_S   *layer4osd0Ctl = &voCtl->layer4osd0Ctl;
+	layer4osd0Ctl->layer_en = TRUE;
+	layer4osd0Ctl->osdrgb2yuvEn = TRUE;
+	layer4osd0Ctl->osdtype = OSD_RGB_32BIT;//OSD_MONOCHROME_8BIT;
+	layer4osd0Ctl->alphatpye = OSD_FIXED_VALUE;
+	layer4osd0Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
+	layer4osd0Ctl->active_size.Width = 640;
+	layer4osd0Ctl->active_size.Height = 480;
+	layer4osd0Ctl->ctl_offset.Width = 220 + 46;
+	layer4osd0Ctl->ctl_offset.Height = 720;
+	layer4osd0Ctl->osdBufInfo.alp_addr0= 0x1fe00000;
+	layer4osd0Ctl->osdBufInfo.alp_addr1= 0x1fe00000;
+	layer4osd0Ctl->osdBufInfo.alpstride= 2560/8;
+	layer4osd0Ctl->osdBufInfo.vlu_addr0= 0x1fe00000;
+	layer4osd0Ctl->osdBufInfo.vlu_addr1= 0x1fe00000;
+	layer4osd0Ctl->osdBufInfo.osdstride= 2560/8;
+	layer4osd0Ctl->osdDmaInfo.dmarequestlen = 0xf;
+	layer4osd0Ctl->osdDmaInfo.dmamap = OSD_ORIGINAL_ORDER;
+	layer4osd0Ctl->osdDmaInfo.rgbrev = OSD_RGB_REV_R;
+	layer4osd0Ctl->layerMix_en = TRUE;
+	layer4osd0Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_LAYER_OSD_CTL_INFO_S   *layer5osd1Ctl = &voCtl->layer5osd1Ctl;
+	layer5osd1Ctl->layer_en = FALSE;
+	layer5osd1Ctl->osdrgb2yuvEn = TRUE;
+	layer5osd1Ctl->osdtype = OSD_MONOCHROME_8BIT;
+	layer5osd1Ctl->alphatpye = OSD_FIXED_VALUE;
+	layer5osd1Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
+	layer5osd1Ctl->active_size.Width = 216;
+	layer5osd1Ctl->active_size.Height = 960;
+	layer5osd1Ctl->ctl_offset.Width = 800;
+	layer5osd1Ctl->ctl_offset.Height = 200;
+	layer5osd1Ctl->osdBufInfo.alp_addr0= 0x20200100;
+	layer5osd1Ctl->osdBufInfo.alp_addr1= 0x20200100;
+	layer5osd1Ctl->osdBufInfo.alpstride= 256/8;
+	layer5osd1Ctl->osdBufInfo.vlu_addr0= 0x20200100;
+	layer5osd1Ctl->osdBufInfo.vlu_addr1= 0x20200100;
+	layer5osd1Ctl->osdBufInfo.osdstride= 256/8;
+	layer5osd1Ctl->osdDmaInfo.dmarequestlen = 0xf;
+	layer5osd1Ctl->osdDmaInfo.dmamap = OSD_ORIGINAL_ORDER;
+	layer5osd1Ctl->osdDmaInfo.rgbrev = OSD_RGB_REV_R;
+	layer5osd1Ctl->layerMix_en = TRUE;
+	layer5osd1Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_LAYER_OSD_CTL_INFO_S *layer6osd2Ctl = &voCtl->layer6osd2Ctl;
+	layer6osd2Ctl->layer_en = FALSE;
+	layer6osd2Ctl->osdrgb2yuvEn = TRUE;
+	layer6osd2Ctl->layerMix_en = TRUE;
+	layer6osd2Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_DISP_BACK_GROUD_INFO_S *dispBackGroudInfo = &voCtl->dispBackGroudInfo;
+	dispBackGroudInfo->y = 0xff;
+	dispBackGroudInfo->u = 0x80;
+	dispBackGroudInfo->v = 0x80;
+	//
+	voCtl->yuv2rgb_ctl_en = TRUE;
+	voCtl->ditherctlen = TRUE;
+	voCtl->clutctlen = FALSE;
 }
 
 /************************************************************************
-*IRS238C*
-*************************************************************************/
+ *IRS238C*
+ *************************************************************************/
 static int VO_TEST_IRS238C_GetCtl(VO_CTL_S *voCtl)
 {
-    VO_CHECK_POINTER(voCtl);
-    memset(voCtl,0,sizeof(voCtl));
-    //
-    VO_DISP_CTL_INFO_S *dispCtl= &voCtl->dispCtl;
-    dispCtl->Disp_en = TRUE;
-    dispCtl->SyncMode = VO_SYSTEM_MODE_1920x1080x30P;
-    dispCtl->total_size.Width = 0x898;
-    dispCtl->total_size.Height = 0x465;
-    dispCtl->disp_start.Width = VIDEO_DISP_ZONE_X_START;
-    dispCtl->disp_stop.Width = VIDEO_DISP_ZONE_X_STOP;
-    dispCtl->disp_start.Height = VIDEO_DISP_ZONE_Y_START;
-    dispCtl->disp_stop.Height = VIDEO_DISP_ZONE_Y_STOP;
-
-    //LAYER0
-    VO_LAYER_CTL_INFO_S *layer0Ctl = &voCtl->layer0Ctl;
-    layer0Ctl->layer_en = FALSE;
-    layer0Ctl->layer0_mfbd_en = FALSE;
-    layer0Ctl->layerMix_en = TRUE;
-    layer0Ctl->layerMix_glbalp = 0xff;
-    //LAYER1
-    VO_LAYER_CTL_INFO_S *layer1Ctl = &voCtl->layer1Ctl;
-    layer1Ctl->layer_en = FALSE;
-    layer1Ctl->layerMix_en = TRUE;
-    layer1Ctl->layerMix_glbalp = 0xff;
-    //LAYER2
-    VO_LAYER_CTL_INFO_S *layer2Ctl = &voCtl->layer2Ctl;
-    layer2Ctl->layer_en = FALSE;
-    layer2Ctl->layerMix_en = TRUE;
-    layer2Ctl->layerMix_glbalp = 0xff;
-    //LAYER3
-    VO_LAYER_CTL_INFO_S *layer3Ctl = &voCtl->layer3Ctl;
-    layer3Ctl->layer_en = FALSE;
-    layer3Ctl->layerMix_en = TRUE;
-    layer3Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_LAYER_OSD_CTL_INFO_S   *layer4osd0Ctl = &voCtl->layer4osd0Ctl;
-    layer4osd0Ctl->layer_en = TRUE;
-    layer4osd0Ctl->osdrgb2yuvEn = TRUE;
-    layer4osd0Ctl->osdtype = OSD_MONOCHROME_8BIT;
-    layer4osd0Ctl->alphatpye = OSD_FIXED_VALUE;
-    layer4osd0Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
-    layer4osd0Ctl->active_size.Width = 216;
-    layer4osd0Ctl->active_size.Height = 172;
-    layer4osd0Ctl->ctl_offset.Width = 400;
-    layer4osd0Ctl->ctl_offset.Height = 200;
-    layer4osd0Ctl->osdBufInfo.alp_addr0= TOF_BUF_DEPTH + 0x100;//0x20000100;
-    layer4osd0Ctl->osdBufInfo.alp_addr1= TOF_BUF_DEPTH + 0x100;//0x20000100;
-    layer4osd0Ctl->osdBufInfo.alpstride= 256/8;
-    layer4osd0Ctl->osdBufInfo.vlu_addr0= TOF_BUF_DEPTH + 0x100;//0x20000100;
-    layer4osd0Ctl->osdBufInfo.vlu_addr1= TOF_BUF_DEPTH + 0x100;//0x20000100;
-    layer4osd0Ctl->osdBufInfo.osdstride= 256/8;
-    layer4osd0Ctl->osdDmaInfo.dmarequestlen = 0xf;
-    layer4osd0Ctl->osdDmaInfo.dmamap = OSD_ORIGINAL_ORDER;
-    layer4osd0Ctl->osdDmaInfo.rgbrev = OSD_RGB_REV_R;
-    layer4osd0Ctl->layerMix_en = TRUE;
-    layer4osd0Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_LAYER_OSD_CTL_INFO_S   *layer5osd1Ctl = &voCtl->layer5osd1Ctl;
-    layer5osd1Ctl->layer_en = TRUE;
-    layer5osd1Ctl->osdrgb2yuvEn = TRUE;
-    layer5osd1Ctl->osdtype = OSD_MONOCHROME_8BIT;
-    layer5osd1Ctl->alphatpye = OSD_FIXED_VALUE;
-    layer5osd1Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
-    layer5osd1Ctl->active_size.Width = 216;
-    layer5osd1Ctl->active_size.Height = 172;
-    layer5osd1Ctl->ctl_offset.Width = 800;
-    layer5osd1Ctl->ctl_offset.Height = 200;
-    layer5osd1Ctl->osdBufInfo.alp_addr0= TOF_BUF_GRAY + 0x100;//0x20200100;
-    layer5osd1Ctl->osdBufInfo.alp_addr1= TOF_BUF_GRAY + 0x100;//0x20200100;
-    layer5osd1Ctl->osdBufInfo.alpstride= 256/8;
-    layer5osd1Ctl->osdBufInfo.vlu_addr0= TOF_BUF_GRAY + 0x100;//0x20200100;
-    layer5osd1Ctl->osdBufInfo.vlu_addr1= TOF_BUF_GRAY + 0x100;//0x20200100;
-    layer5osd1Ctl->osdBufInfo.osdstride= 256/8;
-    layer5osd1Ctl->osdDmaInfo.dmarequestlen = 0xf;
-    layer5osd1Ctl->osdDmaInfo.dmamap = OSD_ORIGINAL_ORDER;
-    layer5osd1Ctl->osdDmaInfo.rgbrev = OSD_RGB_REV_R;
-    layer5osd1Ctl->layerMix_en = TRUE;
-    layer5osd1Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_LAYER_OSD_CTL_INFO_S *layer6osd2Ctl = &voCtl->layer6osd2Ctl;
-    layer6osd2Ctl->layer_en = FALSE;
-    layer6osd2Ctl->osdrgb2yuvEn = TRUE;
-    layer6osd2Ctl->layerMix_en = TRUE;
-    layer6osd2Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_DISP_BACK_GROUD_INFO_S *dispBackGroudInfo = &voCtl->dispBackGroudInfo;
-    dispBackGroudInfo->y = 0x00;
-    dispBackGroudInfo->u = 0xff;
-    dispBackGroudInfo->v = 0x00;
-    //
-    voCtl->yuv2rgb_ctl_en = TRUE;
-    voCtl->ditherctlen = TRUE;
-    voCtl->clutctlen = FALSE;
-
-    return 0;
+	VO_CHECK_POINTER(voCtl);
+	memset(voCtl,0,sizeof(voCtl));
+	//
+	VO_DISP_CTL_INFO_S *dispCtl= &voCtl->dispCtl;
+	dispCtl->Disp_en = TRUE;
+	dispCtl->SyncMode = VO_SYSTEM_MODE_1920x1080x30P;
+	dispCtl->total_size.Width = 0x898;
+	dispCtl->total_size.Height = 0x465;
+	dispCtl->disp_start.Width = VIDEO_DISP_ZONE_X_START;
+	dispCtl->disp_stop.Width = VIDEO_DISP_ZONE_X_STOP;
+	dispCtl->disp_start.Height = VIDEO_DISP_ZONE_Y_START;
+	dispCtl->disp_stop.Height = VIDEO_DISP_ZONE_Y_STOP;
+
+	//LAYER0
+	VO_LAYER_CTL_INFO_S *layer0Ctl = &voCtl->layer0Ctl;
+	layer0Ctl->layer_en = FALSE;
+	layer0Ctl->layer0_mfbd_en = FALSE;
+	layer0Ctl->layerMix_en = TRUE;
+	layer0Ctl->layerMix_glbalp = 0xff;
+	//LAYER1
+	VO_LAYER_CTL_INFO_S *layer1Ctl = &voCtl->layer1Ctl;
+	layer1Ctl->layer_en = FALSE;
+	layer1Ctl->layerMix_en = TRUE;
+	layer1Ctl->layerMix_glbalp = 0xff;
+	//LAYER2
+	VO_LAYER_CTL_INFO_S *layer2Ctl = &voCtl->layer2Ctl;
+	layer2Ctl->layer_en = FALSE;
+	layer2Ctl->layerMix_en = TRUE;
+	layer2Ctl->layerMix_glbalp = 0xff;
+	//LAYER3
+	VO_LAYER_CTL_INFO_S *layer3Ctl = &voCtl->layer3Ctl;
+	layer3Ctl->layer_en = FALSE;
+	layer3Ctl->layerMix_en = TRUE;
+	layer3Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_LAYER_OSD_CTL_INFO_S   *layer4osd0Ctl = &voCtl->layer4osd0Ctl;
+	layer4osd0Ctl->layer_en = TRUE;
+	layer4osd0Ctl->osdrgb2yuvEn = TRUE;
+	layer4osd0Ctl->osdtype = OSD_MONOCHROME_8BIT;
+	layer4osd0Ctl->alphatpye = OSD_FIXED_VALUE;
+	layer4osd0Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
+	layer4osd0Ctl->active_size.Width = 216;
+	layer4osd0Ctl->active_size.Height = 172;
+	layer4osd0Ctl->ctl_offset.Width = 400;
+	layer4osd0Ctl->ctl_offset.Height = 200;
+	layer4osd0Ctl->osdBufInfo.alp_addr0= TOF_BUF_DEPTH + 0x100;//0x20000100;
+	layer4osd0Ctl->osdBufInfo.alp_addr1= TOF_BUF_DEPTH + 0x100;//0x20000100;
+	layer4osd0Ctl->osdBufInfo.alpstride= 256/8;
+	layer4osd0Ctl->osdBufInfo.vlu_addr0= TOF_BUF_DEPTH + 0x100;//0x20000100;
+	layer4osd0Ctl->osdBufInfo.vlu_addr1= TOF_BUF_DEPTH + 0x100;//0x20000100;
+	layer4osd0Ctl->osdBufInfo.osdstride= 256/8;
+	layer4osd0Ctl->osdDmaInfo.dmarequestlen = 0xf;
+	layer4osd0Ctl->osdDmaInfo.dmamap = OSD_ORIGINAL_ORDER;
+	layer4osd0Ctl->osdDmaInfo.rgbrev = OSD_RGB_REV_R;
+	layer4osd0Ctl->layerMix_en = TRUE;
+	layer4osd0Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_LAYER_OSD_CTL_INFO_S   *layer5osd1Ctl = &voCtl->layer5osd1Ctl;
+	layer5osd1Ctl->layer_en = TRUE;
+	layer5osd1Ctl->osdrgb2yuvEn = TRUE;
+	layer5osd1Ctl->osdtype = OSD_MONOCHROME_8BIT;
+	layer5osd1Ctl->alphatpye = OSD_FIXED_VALUE;
+	layer5osd1Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
+	layer5osd1Ctl->active_size.Width = 216;
+	layer5osd1Ctl->active_size.Height = 172;
+	layer5osd1Ctl->ctl_offset.Width = 800;
+	layer5osd1Ctl->ctl_offset.Height = 200;
+	layer5osd1Ctl->osdBufInfo.alp_addr0= TOF_BUF_GRAY + 0x100;//0x20200100;
+	layer5osd1Ctl->osdBufInfo.alp_addr1= TOF_BUF_GRAY + 0x100;//0x20200100;
+	layer5osd1Ctl->osdBufInfo.alpstride= 256/8;
+	layer5osd1Ctl->osdBufInfo.vlu_addr0= TOF_BUF_GRAY + 0x100;//0x20200100;
+	layer5osd1Ctl->osdBufInfo.vlu_addr1= TOF_BUF_GRAY + 0x100;//0x20200100;
+	layer5osd1Ctl->osdBufInfo.osdstride= 256/8;
+	layer5osd1Ctl->osdDmaInfo.dmarequestlen = 0xf;
+	layer5osd1Ctl->osdDmaInfo.dmamap = OSD_ORIGINAL_ORDER;
+	layer5osd1Ctl->osdDmaInfo.rgbrev = OSD_RGB_REV_R;
+	layer5osd1Ctl->layerMix_en = TRUE;
+	layer5osd1Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_LAYER_OSD_CTL_INFO_S *layer6osd2Ctl = &voCtl->layer6osd2Ctl;
+	layer6osd2Ctl->layer_en = FALSE;
+	layer6osd2Ctl->osdrgb2yuvEn = TRUE;
+	layer6osd2Ctl->layerMix_en = TRUE;
+	layer6osd2Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_DISP_BACK_GROUD_INFO_S *dispBackGroudInfo = &voCtl->dispBackGroudInfo;
+	dispBackGroudInfo->y = 0x00;
+	dispBackGroudInfo->u = 0xff;
+	dispBackGroudInfo->v = 0x00;
+	//
+	voCtl->yuv2rgb_ctl_en = TRUE;
+	voCtl->ditherctlen = TRUE;
+	voCtl->clutctlen = FALSE;
+
+	return 0;
 }
 /************************************************************************
-*LAYER0*
-*************************************************************************/
+ *LAYER0*
+ *************************************************************************/
 static int VO_TEST_LAYER0_1920x1080_YUV420_GetCtl(VO_CTL_S *voCtl)
 {
-    VO_CHECK_POINTER(voCtl);
-    memset(voCtl,0x0,sizeof(voCtl));
-    //
-    VO_DISP_CTL_INFO_S *dispCtl= &voCtl->dispCtl;
-    dispCtl->Disp_en = TRUE;
-    dispCtl->SyncMode = VO_SYSTEM_MODE_1920x1080x30P;
-    dispCtl->total_size.Width = 0x898;
-    dispCtl->total_size.Height = 0x465;
-    dispCtl->disp_start.Width = VIDEO_DISP_ZONE_X_START;
-    dispCtl->disp_stop.Width = VIDEO_DISP_ZONE_X_STOP;
-    dispCtl->disp_start.Height = VIDEO_DISP_ZONE_Y_START;
-    dispCtl->disp_stop.Height = VIDEO_DISP_ZONE_Y_STOP;
-    //
-    VO_LAYER_CTL_INFO_S *layer0Ctl = &voCtl->layer0Ctl;
-    layer0Ctl->layer_en = TRUE;
-    layer0Ctl->layer0_mfbd_en = FALSE;
-    layer0Ctl->endiany = VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
-    layer0Ctl->endianuv = VO_VIDEO_LAYER_UV_ENDIAN_MODE2;//VO_VIDEO_LAYER_UV_ENDIAN_MODE3
-    layer0Ctl->uvswap = FALSE;//;
-    layer0Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
-    layer0Ctl->active_size.Width = VIDEO_LAYER0_H_IN_SIZE;//1920;
-    layer0Ctl->active_size.Height = VIDEO_LAYER0_V_IN_SIZE;//1080;
-    layer0Ctl->out_size.Width = VIDEO_LAYER0_H_OUT_SIZE; //1920
-    layer0Ctl->out_size.Height = VIDEO_LAYER0_V_OUT_SIZE; //1080
-    layer0Ctl->ctl_offset.Width = VIDEO_LAYER0_H_POSITION;//198;
-    layer0Ctl->ctl_offset.Height = VIDEO_LAYER0_V_POSITION;//42;
-    layer0Ctl->size_offset.Width = 0x0;
-    layer0Ctl->size_offset.Height = 0x0;
-    layer0Ctl->bufInfo.yAddr0= LAYER0_Y_BASEAddr0;
-    layer0Ctl->bufInfo.yAddr1= LAYER0_Y_BASEAddr0;
-    layer0Ctl->bufInfo.uvAddr0= LAYER0_UV_BASEaddr0;
-    layer0Ctl->bufInfo.uvAddr1= LAYER0_UV_BASEaddr0;
-    layer0Ctl->bufInfo.hsize_stride= 0xff;//VIDEO_LAYER2_RD_STRIDE;
-    layer0Ctl->bufInfo.vsize_stride= 0x437;//0;
+	VO_CHECK_POINTER(voCtl);
+	memset(voCtl,0x0,sizeof(voCtl));
+	//
+	VO_DISP_CTL_INFO_S *dispCtl= &voCtl->dispCtl;
+	dispCtl->Disp_en = TRUE;
+	dispCtl->SyncMode = VO_SYSTEM_MODE_1920x1080x30P;
+	dispCtl->total_size.Width = 0x898;
+	dispCtl->total_size.Height = 0x465;
+	dispCtl->disp_start.Width = VIDEO_DISP_ZONE_X_START;
+	dispCtl->disp_stop.Width = VIDEO_DISP_ZONE_X_STOP;
+	dispCtl->disp_start.Height = VIDEO_DISP_ZONE_Y_START;
+	dispCtl->disp_stop.Height = VIDEO_DISP_ZONE_Y_STOP;
+	//
+	VO_LAYER_CTL_INFO_S *layer0Ctl = &voCtl->layer0Ctl;
+	layer0Ctl->layer_en = TRUE;
+	layer0Ctl->layer0_mfbd_en = FALSE;
+	layer0Ctl->endiany = VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
+	layer0Ctl->endianuv = VO_VIDEO_LAYER_UV_ENDIAN_MODE2;//VO_VIDEO_LAYER_UV_ENDIAN_MODE3
+	layer0Ctl->uvswap = FALSE;//;
+	layer0Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
+	layer0Ctl->active_size.Width = VIDEO_LAYER0_H_IN_SIZE;//1920;
+	layer0Ctl->active_size.Height = VIDEO_LAYER0_V_IN_SIZE;//1080;
+	layer0Ctl->out_size.Width = VIDEO_LAYER0_H_OUT_SIZE; //1920
+	layer0Ctl->out_size.Height = VIDEO_LAYER0_V_OUT_SIZE; //1080
+	layer0Ctl->ctl_offset.Width = VIDEO_LAYER0_H_POSITION;//198;
+	layer0Ctl->ctl_offset.Height = VIDEO_LAYER0_V_POSITION;//42;
+	layer0Ctl->size_offset.Width = 0x0;
+	layer0Ctl->size_offset.Height = 0x0;
+	layer0Ctl->bufInfo.yAddr0= LAYER0_Y_BASEAddr0;
+	layer0Ctl->bufInfo.yAddr1= LAYER0_Y_BASEAddr0;
+	layer0Ctl->bufInfo.uvAddr0= LAYER0_UV_BASEaddr0;
+	layer0Ctl->bufInfo.uvAddr1= LAYER0_UV_BASEaddr0;
+	layer0Ctl->bufInfo.hsize_stride= 0xff;//VIDEO_LAYER2_RD_STRIDE;
+	layer0Ctl->bufInfo.vsize_stride= 0x437;//0;
 	layer0Ctl->layerMix_en = TRUE;
-    layer0Ctl->layerMix_glbalp = 0xff;
-    //LAYER1
-    VO_LAYER_CTL_INFO_S *layer1Ctl = &voCtl->layer1Ctl;
-    layer1Ctl->layer_en = FALSE;
-    layer1Ctl->layerMix_en = FALSE;
-    layer1Ctl->layerMix_glbalp = 0xff;
-    //LAYER2
-    VO_LAYER_CTL_INFO_S *layer2Ctl = &voCtl->layer2Ctl;
-    layer2Ctl->layer_en = FALSE;
-    layer2Ctl->layerMix_en = FALSE;
-    layer2Ctl->layerMix_glbalp = 0xff;
-    //LAYER3
-    VO_LAYER_CTL_INFO_S *layer3Ctl = &voCtl->layer3Ctl;
-    layer3Ctl->layer_en = FALSE;
-    layer3Ctl->layerMix_en = FALSE;
-    layer3Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_LAYER_OSD_CTL_INFO_S *layer4osd0Ctl = &voCtl->layer4osd0Ctl;
-    layer4osd0Ctl->layer_en = FALSE;
-    layer4osd0Ctl->osdrgb2yuvEn = FALSE;
-    layer4osd0Ctl->layerMix_en = FALSE;
-    layer4osd0Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_LAYER_OSD_CTL_INFO_S *layer5osd1Ctl = &voCtl->layer5osd1Ctl;
-    layer5osd1Ctl->layer_en = FALSE;
-    layer5osd1Ctl->osdrgb2yuvEn = FALSE;
-    layer5osd1Ctl->layerMix_en = FALSE;
-    layer5osd1Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_LAYER_OSD_CTL_INFO_S *layer6osd2Ctl = &voCtl->layer6osd2Ctl;
-    layer6osd2Ctl->layer_en = FALSE;
-    layer6osd2Ctl->osdrgb2yuvEn = FALSE;
-    layer6osd2Ctl->layerMix_en = FALSE;
-    layer6osd2Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_DISP_BACK_GROUD_INFO_S *dispBackGroudInfo = &voCtl->dispBackGroudInfo;
-    dispBackGroudInfo->y = 0x00;
-    dispBackGroudInfo->u = 0x80;
-    dispBackGroudInfo->v = 0x80;
-    //
-    voCtl->yuv2rgb_ctl_en = FALSE;
-    voCtl->ditherctlen = TRUE;
-    voCtl->clutctlen = FALSE;
-
-    return 0;
+	layer0Ctl->layerMix_glbalp = 0xff;
+	//LAYER1
+	VO_LAYER_CTL_INFO_S *layer1Ctl = &voCtl->layer1Ctl;
+	layer1Ctl->layer_en = FALSE;
+	layer1Ctl->layerMix_en = FALSE;
+	layer1Ctl->layerMix_glbalp = 0xff;
+	//LAYER2
+	VO_LAYER_CTL_INFO_S *layer2Ctl = &voCtl->layer2Ctl;
+	layer2Ctl->layer_en = FALSE;
+	layer2Ctl->layerMix_en = FALSE;
+	layer2Ctl->layerMix_glbalp = 0xff;
+	//LAYER3
+	VO_LAYER_CTL_INFO_S *layer3Ctl = &voCtl->layer3Ctl;
+	layer3Ctl->layer_en = FALSE;
+	layer3Ctl->layerMix_en = FALSE;
+	layer3Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_LAYER_OSD_CTL_INFO_S *layer4osd0Ctl = &voCtl->layer4osd0Ctl;
+	layer4osd0Ctl->layer_en = FALSE;
+	layer4osd0Ctl->osdrgb2yuvEn = FALSE;
+	layer4osd0Ctl->layerMix_en = FALSE;
+	layer4osd0Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_LAYER_OSD_CTL_INFO_S *layer5osd1Ctl = &voCtl->layer5osd1Ctl;
+	layer5osd1Ctl->layer_en = FALSE;
+	layer5osd1Ctl->osdrgb2yuvEn = FALSE;
+	layer5osd1Ctl->layerMix_en = FALSE;
+	layer5osd1Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_LAYER_OSD_CTL_INFO_S *layer6osd2Ctl = &voCtl->layer6osd2Ctl;
+	layer6osd2Ctl->layer_en = FALSE;
+	layer6osd2Ctl->osdrgb2yuvEn = FALSE;
+	layer6osd2Ctl->layerMix_en = FALSE;
+	layer6osd2Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_DISP_BACK_GROUD_INFO_S *dispBackGroudInfo = &voCtl->dispBackGroudInfo;
+	dispBackGroudInfo->y = 0x00;
+	dispBackGroudInfo->u = 0x80;
+	dispBackGroudInfo->v = 0x80;
+	//
+	voCtl->yuv2rgb_ctl_en = FALSE;
+	voCtl->ditherctlen = TRUE;
+	voCtl->clutctlen = FALSE;
+
+	return 0;
 }
 /*
  *
  */
 static int VO_TEST_LAYER0_1280x720_YUV420_GetCtl(VO_CTL_S *voCtl)
 {
-    VO_CHECK_POINTER(voCtl);
-    memset(voCtl,0x0,sizeof(voCtl));
-    //
-    VO_DISP_CTL_INFO_S *dispCtl= &voCtl->dispCtl;
-    dispCtl->Disp_en = TRUE;
-    dispCtl->SyncMode = VO_SYSTEM_MODE_1920x1080x30P;
-    dispCtl->total_size.Width = 0x898;
-    dispCtl->total_size.Height = 0x465;
-    dispCtl->disp_start.Width = VIDEO_DISP_ZONE_X_START;
-    dispCtl->disp_stop.Width = VIDEO_DISP_ZONE_X_STOP;
-    dispCtl->disp_start.Height = VIDEO_DISP_ZONE_Y_START;
-    dispCtl->disp_stop.Height = VIDEO_DISP_ZONE_Y_STOP;
-    //
-    VO_LAYER_CTL_INFO_S *layer0Ctl = &voCtl->layer0Ctl;
-    layer0Ctl->layer_en = TRUE;
-    layer0Ctl->layer0_mfbd_en = FALSE;
-    layer0Ctl->endiany = VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
-    layer0Ctl->endianuv = VO_VIDEO_LAYER_UV_ENDIAN_MODE2;//VO_VIDEO_LAYER_UV_ENDIAN_MODE3
-    layer0Ctl->uvswap = FALSE;//;
-    layer0Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
-    layer0Ctl->active_size.Width = 1280;//VIDEO_LAYER0_H_IN_SIZE;//1920;
-    layer0Ctl->active_size.Height = 720;//VIDEO_LAYER0_V_IN_SIZE;//1080;
-    layer0Ctl->out_size.Width = 1280;//VIDEO_LAYER0_H_OUT_SIZE; //1920
-    layer0Ctl->out_size.Height = 720;//VIDEO_LAYER0_V_OUT_SIZE; //1080
-    layer0Ctl->ctl_offset.Width = VIDEO_LAYER0_H_POSITION;//198;
-    layer0Ctl->ctl_offset.Height = VIDEO_LAYER0_V_POSITION;//42;
-    layer0Ctl->size_offset.Width = 0x0;
-    layer0Ctl->size_offset.Height = 0x0;
-    layer0Ctl->bufInfo.yAddr0= LAYER0_Y_BASEAddr0;
-    layer0Ctl->bufInfo.yAddr1= LAYER0_Y_BASEAddr0;
-    layer0Ctl->bufInfo.uvAddr0= LAYER0_UV_BASEaddr0;
-    layer0Ctl->bufInfo.uvAddr1= LAYER0_UV_BASEaddr0;
-    layer0Ctl->bufInfo.hsize_stride= 0xff;//VIDEO_LAYER2_RD_STRIDE;
-    layer0Ctl->bufInfo.vsize_stride= 0x437;//0;
+	VO_CHECK_POINTER(voCtl);
+	memset(voCtl,0x0,sizeof(voCtl));
+	//
+	VO_DISP_CTL_INFO_S *dispCtl= &voCtl->dispCtl;
+	dispCtl->Disp_en = TRUE;
+	dispCtl->SyncMode = VO_SYSTEM_MODE_1920x1080x30P;
+	dispCtl->total_size.Width = 0x898;
+	dispCtl->total_size.Height = 0x465;
+	dispCtl->disp_start.Width = VIDEO_DISP_ZONE_X_START;
+	dispCtl->disp_stop.Width = VIDEO_DISP_ZONE_X_STOP;
+	dispCtl->disp_start.Height = VIDEO_DISP_ZONE_Y_START;
+	dispCtl->disp_stop.Height = VIDEO_DISP_ZONE_Y_STOP;
+	//
+	VO_LAYER_CTL_INFO_S *layer0Ctl = &voCtl->layer0Ctl;
+	layer0Ctl->layer_en = TRUE;
+	layer0Ctl->layer0_mfbd_en = FALSE;
+	layer0Ctl->endiany = VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
+	layer0Ctl->endianuv = VO_VIDEO_LAYER_UV_ENDIAN_MODE2;//VO_VIDEO_LAYER_UV_ENDIAN_MODE3
+	layer0Ctl->uvswap = FALSE;//;
+	layer0Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
+	layer0Ctl->active_size.Width = 1280;//VIDEO_LAYER0_H_IN_SIZE;//1920;
+	layer0Ctl->active_size.Height = 720;//VIDEO_LAYER0_V_IN_SIZE;//1080;
+	layer0Ctl->out_size.Width = 1280;//VIDEO_LAYER0_H_OUT_SIZE; //1920
+	layer0Ctl->out_size.Height = 720;//VIDEO_LAYER0_V_OUT_SIZE; //1080
+	layer0Ctl->ctl_offset.Width = VIDEO_LAYER0_H_POSITION;//198;
+	layer0Ctl->ctl_offset.Height = VIDEO_LAYER0_V_POSITION;//42;
+	layer0Ctl->size_offset.Width = 0x0;
+	layer0Ctl->size_offset.Height = 0x0;
+	layer0Ctl->bufInfo.yAddr0= LAYER0_Y_BASEAddr0;
+	layer0Ctl->bufInfo.yAddr1= LAYER0_Y_BASEAddr0;
+	layer0Ctl->bufInfo.uvAddr0= LAYER0_UV_BASEaddr0;
+	layer0Ctl->bufInfo.uvAddr1= LAYER0_UV_BASEaddr0;
+	layer0Ctl->bufInfo.hsize_stride= 0xff;//VIDEO_LAYER2_RD_STRIDE;
+	layer0Ctl->bufInfo.vsize_stride= 0x437;//0;
 	layer0Ctl->layerMix_en = TRUE;
-    layer0Ctl->layerMix_glbalp = 0xff;
-    //LAYER1
-    VO_LAYER_CTL_INFO_S *layer1Ctl = &voCtl->layer1Ctl;
-    layer1Ctl->layer_en = FALSE;
-    layer1Ctl->layerMix_en = FALSE;
-    layer1Ctl->layerMix_glbalp = 0xff;
-    //LAYER2
-    VO_LAYER_CTL_INFO_S *layer2Ctl = &voCtl->layer2Ctl;
-    layer2Ctl->layer_en = FALSE;
-    layer2Ctl->layerMix_en = FALSE;
-    layer2Ctl->layerMix_glbalp = 0xff;
-    //LAYER3
-    VO_LAYER_CTL_INFO_S *layer3Ctl = &voCtl->layer3Ctl;
-    layer3Ctl->layer_en = FALSE;
-    layer3Ctl->layerMix_en = FALSE;
-    layer3Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_LAYER_OSD_CTL_INFO_S *layer4osd0Ctl = &voCtl->layer4osd0Ctl;
-    layer4osd0Ctl->layer_en = FALSE;
-    layer4osd0Ctl->osdrgb2yuvEn = FALSE;
-    layer4osd0Ctl->layerMix_en = FALSE;
-    layer4osd0Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_LAYER_OSD_CTL_INFO_S *layer5osd1Ctl = &voCtl->layer5osd1Ctl;
-    layer5osd1Ctl->layer_en = FALSE;
-    layer5osd1Ctl->osdrgb2yuvEn = FALSE;
-    layer5osd1Ctl->layerMix_en = FALSE;
-    layer5osd1Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_LAYER_OSD_CTL_INFO_S *layer6osd2Ctl = &voCtl->layer6osd2Ctl;
-    layer6osd2Ctl->layer_en = FALSE;
-    layer6osd2Ctl->osdrgb2yuvEn = FALSE;
-    layer6osd2Ctl->layerMix_en = FALSE;
-    layer6osd2Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_DISP_BACK_GROUD_INFO_S *dispBackGroudInfo = &voCtl->dispBackGroudInfo;
-    dispBackGroudInfo->y = 0x00;
-    dispBackGroudInfo->u = 0x80;
-    dispBackGroudInfo->v = 0x80;
-    //
-    voCtl->yuv2rgb_ctl_en = FALSE;
-    voCtl->ditherctlen = TRUE;
-    voCtl->clutctlen = FALSE;
-
-    return 0;
+	layer0Ctl->layerMix_glbalp = 0xff;
+	//LAYER1
+	VO_LAYER_CTL_INFO_S *layer1Ctl = &voCtl->layer1Ctl;
+	layer1Ctl->layer_en = FALSE;
+	layer1Ctl->layerMix_en = FALSE;
+	layer1Ctl->layerMix_glbalp = 0xff;
+	//LAYER2
+	VO_LAYER_CTL_INFO_S *layer2Ctl = &voCtl->layer2Ctl;
+	layer2Ctl->layer_en = FALSE;
+	layer2Ctl->layerMix_en = FALSE;
+	layer2Ctl->layerMix_glbalp = 0xff;
+	//LAYER3
+	VO_LAYER_CTL_INFO_S *layer3Ctl = &voCtl->layer3Ctl;
+	layer3Ctl->layer_en = FALSE;
+	layer3Ctl->layerMix_en = FALSE;
+	layer3Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_LAYER_OSD_CTL_INFO_S *layer4osd0Ctl = &voCtl->layer4osd0Ctl;
+	layer4osd0Ctl->layer_en = FALSE;
+	layer4osd0Ctl->osdrgb2yuvEn = FALSE;
+	layer4osd0Ctl->layerMix_en = FALSE;
+	layer4osd0Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_LAYER_OSD_CTL_INFO_S *layer5osd1Ctl = &voCtl->layer5osd1Ctl;
+	layer5osd1Ctl->layer_en = FALSE;
+	layer5osd1Ctl->osdrgb2yuvEn = FALSE;
+	layer5osd1Ctl->layerMix_en = FALSE;
+	layer5osd1Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_LAYER_OSD_CTL_INFO_S *layer6osd2Ctl = &voCtl->layer6osd2Ctl;
+	layer6osd2Ctl->layer_en = FALSE;
+	layer6osd2Ctl->osdrgb2yuvEn = FALSE;
+	layer6osd2Ctl->layerMix_en = FALSE;
+	layer6osd2Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_DISP_BACK_GROUD_INFO_S *dispBackGroudInfo = &voCtl->dispBackGroudInfo;
+	dispBackGroudInfo->y = 0x00;
+	dispBackGroudInfo->u = 0x80;
+	dispBackGroudInfo->v = 0x80;
+	//
+	voCtl->yuv2rgb_ctl_en = FALSE;
+	voCtl->ditherctlen = TRUE;
+	voCtl->clutctlen = FALSE;
+
+	return 0;
 }
 /*
-*
-*/
+ *
+ */
 static int VO_TEST_LAYER0_IRS238C_GetCtl(VO_CTL_S *voCtl)
 {
-    VO_CHECK_POINTER(voCtl);
-    memset(voCtl,0x0,sizeof(voCtl));
-    //
-    VO_DISP_CTL_INFO_S *dispCtl= &voCtl->dispCtl;
-    dispCtl->Disp_en = TRUE;
-    dispCtl->SyncMode = VO_SYSTEM_MODE_1920x1080x30P;
-    dispCtl->total_size.Width = 0x898;
-    dispCtl->total_size.Height = 0x465;
-    dispCtl->disp_start.Width = VIDEO_DISP_ZONE_X_START;
-    dispCtl->disp_stop.Width = VIDEO_DISP_ZONE_X_STOP;
-    dispCtl->disp_start.Height = VIDEO_DISP_ZONE_Y_START;
-    dispCtl->disp_stop.Height = VIDEO_DISP_ZONE_Y_STOP;
-    //
-    VO_LAYER_CTL_INFO_S *layer0Ctl = &voCtl->layer0Ctl;
-    layer0Ctl->layer_en = TRUE;
-    layer0Ctl->layer0_mfbd_en = FALSE;
-    layer0Ctl->endiany = VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
-    layer0Ctl->endianuv = VO_VIDEO_LAYER_UV_ENDIAN_MODE3;//VO_VIDEO_LAYER_UV_ENDIAN_MODE3
-    layer0Ctl->uvswap = FALSE;//;
-    layer0Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
-    layer0Ctl->active_size.Width = 1280;//VIDEO_LAYER0_H_IN_SIZE;//1920;
-    layer0Ctl->active_size.Height = 720;//VIDEO_LAYER0_V_IN_SIZE;//1080;
-    layer0Ctl->out_size.Width = 1280;//VIDEO_LAYER0_H_OUT_SIZE; //1920
-    layer0Ctl->out_size.Height = 720;//VIDEO_LAYER0_V_OUT_SIZE; //1080
-    layer0Ctl->ctl_offset.Width = VIDEO_LAYER0_H_POSITION;//198;
-    layer0Ctl->ctl_offset.Height = VIDEO_LAYER0_V_POSITION;//42;
-    layer0Ctl->size_offset.Width = 0x0;
-    layer0Ctl->size_offset.Height = 0x0;
-    layer0Ctl->bufInfo.yAddr0= LAYER0_Y_BASEAddr0;
-    layer0Ctl->bufInfo.yAddr1= LAYER0_Y_BASEAddr0;
-    layer0Ctl->bufInfo.uvAddr0= LAYER0_UV_BASEaddr0;
-    layer0Ctl->bufInfo.uvAddr1= LAYER0_UV_BASEaddr0;
-    layer0Ctl->bufInfo.hsize_stride= 0xff;//VIDEO_LAYER2_RD_STRIDE;
-    layer0Ctl->bufInfo.vsize_stride= 0;
+	VO_CHECK_POINTER(voCtl);
+	memset(voCtl,0x0,sizeof(voCtl));
+	//
+	VO_DISP_CTL_INFO_S *dispCtl= &voCtl->dispCtl;
+	dispCtl->Disp_en = TRUE;
+	dispCtl->SyncMode = VO_SYSTEM_MODE_1920x1080x30P;
+	dispCtl->total_size.Width = 0x898;
+	dispCtl->total_size.Height = 0x465;
+	dispCtl->disp_start.Width = VIDEO_DISP_ZONE_X_START;
+	dispCtl->disp_stop.Width = VIDEO_DISP_ZONE_X_STOP;
+	dispCtl->disp_start.Height = VIDEO_DISP_ZONE_Y_START;
+	dispCtl->disp_stop.Height = VIDEO_DISP_ZONE_Y_STOP;
+	//
+	VO_LAYER_CTL_INFO_S *layer0Ctl = &voCtl->layer0Ctl;
+	layer0Ctl->layer_en = TRUE;
+	layer0Ctl->layer0_mfbd_en = FALSE;
+	layer0Ctl->endiany = VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
+	layer0Ctl->endianuv = VO_VIDEO_LAYER_UV_ENDIAN_MODE3;//VO_VIDEO_LAYER_UV_ENDIAN_MODE3
+	layer0Ctl->uvswap = FALSE;//;
+	layer0Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
+	layer0Ctl->active_size.Width = 1280;//VIDEO_LAYER0_H_IN_SIZE;//1920;
+	layer0Ctl->active_size.Height = 720;//VIDEO_LAYER0_V_IN_SIZE;//1080;
+	layer0Ctl->out_size.Width = 1280;//VIDEO_LAYER0_H_OUT_SIZE; //1920
+	layer0Ctl->out_size.Height = 720;//VIDEO_LAYER0_V_OUT_SIZE; //1080
+	layer0Ctl->ctl_offset.Width = VIDEO_LAYER0_H_POSITION;//198;
+	layer0Ctl->ctl_offset.Height = VIDEO_LAYER0_V_POSITION;//42;
+	layer0Ctl->size_offset.Width = 0x0;
+	layer0Ctl->size_offset.Height = 0x0;
+	layer0Ctl->bufInfo.yAddr0= LAYER0_Y_BASEAddr0;
+	layer0Ctl->bufInfo.yAddr1= LAYER0_Y_BASEAddr0;
+	layer0Ctl->bufInfo.uvAddr0= LAYER0_UV_BASEaddr0;
+	layer0Ctl->bufInfo.uvAddr1= LAYER0_UV_BASEaddr0;
+	layer0Ctl->bufInfo.hsize_stride= 0xff;//VIDEO_LAYER2_RD_STRIDE;
+	layer0Ctl->bufInfo.vsize_stride= 0;
 	layer0Ctl->layerMix_en = TRUE;
-    layer0Ctl->layerMix_glbalp = 0xff;
-    //LAYER1
-    VO_LAYER_CTL_INFO_S *layer1Ctl = &voCtl->layer1Ctl;
-    layer1Ctl->layer_en = FALSE;
-    layer1Ctl->layerMix_en = FALSE;
-    layer1Ctl->layerMix_glbalp = 0xff;
-    //LAYER2
-    VO_LAYER_CTL_INFO_S *layer2Ctl = &voCtl->layer2Ctl;
-    layer2Ctl->layer_en = FALSE;
-    layer2Ctl->layerMix_en = FALSE;
-    layer2Ctl->layerMix_glbalp = 0xff;
-    //LAYER3
-    VO_LAYER_CTL_INFO_S *layer3Ctl = &voCtl->layer3Ctl;
-    layer3Ctl->layer_en = FALSE;
-    layer3Ctl->layerMix_en = FALSE;
-    layer3Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_LAYER_OSD_CTL_INFO_S   *layer4osd0Ctl = &voCtl->layer4osd0Ctl;
-    layer4osd0Ctl->layer_en = TRUE;
-    layer4osd0Ctl->osdrgb2yuvEn = TRUE;
-    layer4osd0Ctl->osdtype = OSD_MONOCHROME_8BIT;
-    layer4osd0Ctl->alphatpye = OSD_FIXED_VALUE;
-    layer4osd0Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
-    layer4osd0Ctl->active_size.Width = 216;
-    layer4osd0Ctl->active_size.Height = 172;
-    layer4osd0Ctl->ctl_offset.Width = 1280 + 200;
-    layer4osd0Ctl->ctl_offset.Height = 200;
-    layer4osd0Ctl->osdBufInfo.alp_addr0= TOF_BUF_DEPTH + 0x100;//0x20000100;
-    layer4osd0Ctl->osdBufInfo.alp_addr1= TOF_BUF_DEPTH + 0x100;//0x20000100;
-    layer4osd0Ctl->osdBufInfo.alpstride= 256/8;
-    layer4osd0Ctl->osdBufInfo.vlu_addr0= TOF_BUF_DEPTH + 0x100;//0x20000100;
-    layer4osd0Ctl->osdBufInfo.vlu_addr1= TOF_BUF_DEPTH + 0x100;//0x20000100;
-    layer4osd0Ctl->osdBufInfo.osdstride= 256/8;
-    layer4osd0Ctl->osdDmaInfo.dmarequestlen = 0xf;
-    layer4osd0Ctl->osdDmaInfo.dmamap = OSD_ORIGINAL_ORDER;
-    layer4osd0Ctl->osdDmaInfo.rgbrev = OSD_RGB_REV_R;
-    layer4osd0Ctl->layerMix_en = TRUE;
-    layer4osd0Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_LAYER_OSD_CTL_INFO_S   *layer5osd1Ctl = &voCtl->layer5osd1Ctl;
-    layer5osd1Ctl->layer_en = TRUE;
-    layer5osd1Ctl->osdrgb2yuvEn = TRUE;
-    layer5osd1Ctl->osdtype = OSD_MONOCHROME_8BIT;
-    layer5osd1Ctl->alphatpye = OSD_FIXED_VALUE;
-    layer5osd1Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
-    layer5osd1Ctl->active_size.Width = 216;
-    layer5osd1Ctl->active_size.Height = 172;
-    layer5osd1Ctl->ctl_offset.Width = 1280 + 200;//800;
-    layer5osd1Ctl->ctl_offset.Height = 500;//200;
-    layer5osd1Ctl->osdBufInfo.alp_addr0= TOF_BUF_GRAY + 0x100;//0x20200100;
-    layer5osd1Ctl->osdBufInfo.alp_addr1= TOF_BUF_GRAY + 0x100;//0x20200100;
-    layer5osd1Ctl->osdBufInfo.alpstride= 256/8;
-    layer5osd1Ctl->osdBufInfo.vlu_addr0= TOF_BUF_GRAY + 0x100;//0x20200100;
-    layer5osd1Ctl->osdBufInfo.vlu_addr1= TOF_BUF_GRAY + 0x100;//0x20200100;
-    layer5osd1Ctl->osdBufInfo.osdstride= 256/8;
-    layer5osd1Ctl->osdDmaInfo.dmarequestlen = 0xf;
-    layer5osd1Ctl->osdDmaInfo.dmamap = OSD_ORIGINAL_ORDER;
-    layer5osd1Ctl->osdDmaInfo.rgbrev = OSD_RGB_REV_R;
-    layer5osd1Ctl->layerMix_en = TRUE;
-    layer5osd1Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_LAYER_OSD_CTL_INFO_S *layer6osd2Ctl = &voCtl->layer6osd2Ctl;
-    layer6osd2Ctl->layer_en = FALSE;
-    layer6osd2Ctl->osdrgb2yuvEn = FALSE;
-    layer6osd2Ctl->layerMix_en = FALSE;
-    layer6osd2Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_DISP_BACK_GROUD_INFO_S *dispBackGroudInfo = &voCtl->dispBackGroudInfo;
-    dispBackGroudInfo->y = 0x00;
-    dispBackGroudInfo->u = 0xff;
-    dispBackGroudInfo->v = 0x00;
-    //
-    voCtl->yuv2rgb_ctl_en = FALSE;
-    voCtl->ditherctlen = TRUE;
-    voCtl->clutctlen = FALSE;
-
-    return 0;
+	layer0Ctl->layerMix_glbalp = 0xff;
+	//LAYER1
+	VO_LAYER_CTL_INFO_S *layer1Ctl = &voCtl->layer1Ctl;
+	layer1Ctl->layer_en = FALSE;
+	layer1Ctl->layerMix_en = FALSE;
+	layer1Ctl->layerMix_glbalp = 0xff;
+	//LAYER2
+	VO_LAYER_CTL_INFO_S *layer2Ctl = &voCtl->layer2Ctl;
+	layer2Ctl->layer_en = FALSE;
+	layer2Ctl->layerMix_en = FALSE;
+	layer2Ctl->layerMix_glbalp = 0xff;
+	//LAYER3
+	VO_LAYER_CTL_INFO_S *layer3Ctl = &voCtl->layer3Ctl;
+	layer3Ctl->layer_en = FALSE;
+	layer3Ctl->layerMix_en = FALSE;
+	layer3Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_LAYER_OSD_CTL_INFO_S   *layer4osd0Ctl = &voCtl->layer4osd0Ctl;
+	layer4osd0Ctl->layer_en = TRUE;
+	layer4osd0Ctl->osdrgb2yuvEn = TRUE;
+	layer4osd0Ctl->osdtype = OSD_MONOCHROME_8BIT;
+	layer4osd0Ctl->alphatpye = OSD_FIXED_VALUE;
+	layer4osd0Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
+	layer4osd0Ctl->active_size.Width = 216;
+	layer4osd0Ctl->active_size.Height = 172;
+	layer4osd0Ctl->ctl_offset.Width = 1280 + 200;
+	layer4osd0Ctl->ctl_offset.Height = 200;
+	layer4osd0Ctl->osdBufInfo.alp_addr0= TOF_BUF_DEPTH + 0x100;//0x20000100;
+	layer4osd0Ctl->osdBufInfo.alp_addr1= TOF_BUF_DEPTH + 0x100;//0x20000100;
+	layer4osd0Ctl->osdBufInfo.alpstride= 256/8;
+	layer4osd0Ctl->osdBufInfo.vlu_addr0= TOF_BUF_DEPTH + 0x100;//0x20000100;
+	layer4osd0Ctl->osdBufInfo.vlu_addr1= TOF_BUF_DEPTH + 0x100;//0x20000100;
+	layer4osd0Ctl->osdBufInfo.osdstride= 256/8;
+	layer4osd0Ctl->osdDmaInfo.dmarequestlen = 0xf;
+	layer4osd0Ctl->osdDmaInfo.dmamap = OSD_ORIGINAL_ORDER;
+	layer4osd0Ctl->osdDmaInfo.rgbrev = OSD_RGB_REV_R;
+	layer4osd0Ctl->layerMix_en = TRUE;
+	layer4osd0Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_LAYER_OSD_CTL_INFO_S   *layer5osd1Ctl = &voCtl->layer5osd1Ctl;
+	layer5osd1Ctl->layer_en = TRUE;
+	layer5osd1Ctl->osdrgb2yuvEn = TRUE;
+	layer5osd1Ctl->osdtype = OSD_MONOCHROME_8BIT;
+	layer5osd1Ctl->alphatpye = OSD_FIXED_VALUE;
+	layer5osd1Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
+	layer5osd1Ctl->active_size.Width = 216;
+	layer5osd1Ctl->active_size.Height = 172;
+	layer5osd1Ctl->ctl_offset.Width = 1280 + 200;//800;
+	layer5osd1Ctl->ctl_offset.Height = 500;//200;
+	layer5osd1Ctl->osdBufInfo.alp_addr0= TOF_BUF_GRAY + 0x100;//0x20200100;
+	layer5osd1Ctl->osdBufInfo.alp_addr1= TOF_BUF_GRAY + 0x100;//0x20200100;
+	layer5osd1Ctl->osdBufInfo.alpstride= 256/8;
+	layer5osd1Ctl->osdBufInfo.vlu_addr0= TOF_BUF_GRAY + 0x100;//0x20200100;
+	layer5osd1Ctl->osdBufInfo.vlu_addr1= TOF_BUF_GRAY + 0x100;//0x20200100;
+	layer5osd1Ctl->osdBufInfo.osdstride= 256/8;
+	layer5osd1Ctl->osdDmaInfo.dmarequestlen = 0xf;
+	layer5osd1Ctl->osdDmaInfo.dmamap = OSD_ORIGINAL_ORDER;
+	layer5osd1Ctl->osdDmaInfo.rgbrev = OSD_RGB_REV_R;
+	layer5osd1Ctl->layerMix_en = TRUE;
+	layer5osd1Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_LAYER_OSD_CTL_INFO_S *layer6osd2Ctl = &voCtl->layer6osd2Ctl;
+	layer6osd2Ctl->layer_en = FALSE;
+	layer6osd2Ctl->osdrgb2yuvEn = FALSE;
+	layer6osd2Ctl->layerMix_en = FALSE;
+	layer6osd2Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_DISP_BACK_GROUD_INFO_S *dispBackGroudInfo = &voCtl->dispBackGroudInfo;
+	dispBackGroudInfo->y = 0x00;
+	dispBackGroudInfo->u = 0xff;
+	dispBackGroudInfo->v = 0x00;
+	//
+	voCtl->yuv2rgb_ctl_en = FALSE;
+	voCtl->ditherctlen = TRUE;
+	voCtl->clutctlen = FALSE;
+
+	return 0;
 }
 /*
-*
-*/
+ *
+ */
 static int VO_TEST_LAYER0_1920x1080_YUV420_1280x720_GetCtl(VO_CTL_S *voCtl)
 {
-    VO_CHECK_POINTER(voCtl);
-    memset(voCtl,0x0,sizeof(voCtl));
-    //
-    VO_DISP_CTL_INFO_S *dispCtl= &voCtl->dispCtl;
-    dispCtl->Disp_en = TRUE;
-    dispCtl->SyncMode = VO_SYSTEM_MODE_1920x1080x30P;
-    dispCtl->total_size.Width = 0x898;
-    dispCtl->total_size.Height = 0x465;
-    dispCtl->disp_start.Width = VIDEO_DISP_ZONE_X_START;
-    dispCtl->disp_stop.Width = VIDEO_DISP_ZONE_X_STOP;
-    dispCtl->disp_start.Height = VIDEO_DISP_ZONE_Y_START;
-    dispCtl->disp_stop.Height = VIDEO_DISP_ZONE_Y_STOP;
-    //
-    VO_LAYER_CTL_INFO_S *layer0Ctl = &voCtl->layer0Ctl;
-    layer0Ctl->layer_en = TRUE;
-    layer0Ctl->layer0_mfbd_en = FALSE;
-    layer0Ctl->endiany = VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
-    layer0Ctl->endianuv = VO_VIDEO_LAYER_UV_ENDIAN_MODE2;//VO_VIDEO_LAYER_UV_ENDIAN_MODE3
-    layer0Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
-    layer0Ctl->active_size.Width = VIDEO_LAYER0_H_IN_SIZE;//1920;
-    layer0Ctl->active_size.Height = VIDEO_LAYER0_V_IN_SIZE;//1080;
-    layer0Ctl->out_size.Width = 1280;// VIDEO_LAYER0_H_OUT_SIZE; //1920
-    layer0Ctl->out_size.Height = 720;//VIDEO_LAYER0_V_OUT_SIZE; //1080
-    layer0Ctl->ctl_offset.Width = VIDEO_LAYER0_H_POSITION;//198;
-    layer0Ctl->ctl_offset.Height = VIDEO_LAYER0_V_POSITION;//42;
-    layer0Ctl->size_offset.Width = 0x0;
-    layer0Ctl->size_offset.Height = 0x0;
-    layer0Ctl->bufInfo.yAddr0= LAYER0_Y_BASEAddr0;
-    layer0Ctl->bufInfo.yAddr1= LAYER0_Y_BASEAddr0;
-    layer0Ctl->bufInfo.uvAddr0= LAYER0_UV_BASEaddr0;
-    layer0Ctl->bufInfo.uvAddr1= LAYER0_UV_BASEaddr0;
-    layer0Ctl->bufInfo.hsize_stride= 0xff;//VIDEO_LAYER2_RD_STRIDE;
-    layer0Ctl->bufInfo.vsize_stride= 0x437;//0; 
-    layer0Ctl->layerMix_en = TRUE;
-    layer0Ctl->layerMix_glbalp = 0xff;
-    //LAYER1
-    VO_LAYER_CTL_INFO_S *layer1Ctl = &voCtl->layer1Ctl;
-    layer1Ctl->layer_en = FALSE;
-    layer1Ctl->layerMix_en = TRUE;
-    layer1Ctl->layerMix_glbalp = 0xff;
-    //LAYER2
-    VO_LAYER_CTL_INFO_S *layer2Ctl = &voCtl->layer2Ctl;
-    layer2Ctl->layer_en = FALSE;
-    layer2Ctl->layerMix_en = TRUE;
-    layer2Ctl->layerMix_glbalp = 0xff;
-    //LAYER3
-    VO_LAYER_CTL_INFO_S *layer3Ctl = &voCtl->layer3Ctl;
-    layer3Ctl->layer_en = FALSE;
-    layer3Ctl->layerMix_en = TRUE;
-    layer3Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_LAYER_OSD_CTL_INFO_S *layer4osd0Ctl = &voCtl->layer4osd0Ctl;
-    layer4osd0Ctl->layer_en = FALSE;
-    layer4osd0Ctl->osdrgb2yuvEn = TRUE;
-    layer4osd0Ctl->layerMix_en = TRUE;
-    layer4osd0Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_LAYER_OSD_CTL_INFO_S *layer5osd1Ctl = &voCtl->layer5osd1Ctl;
-    layer5osd1Ctl->layer_en = FALSE;
-    layer5osd1Ctl->osdrgb2yuvEn = TRUE;
-    layer5osd1Ctl->layerMix_en = TRUE;
-    layer5osd1Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_LAYER_OSD_CTL_INFO_S *layer6osd2Ctl = &voCtl->layer6osd2Ctl;
-    layer6osd2Ctl->layer_en = FALSE;
-    layer6osd2Ctl->osdrgb2yuvEn = TRUE;
-    layer6osd2Ctl->layerMix_en = TRUE;
-    layer6osd2Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_DISP_BACK_GROUD_INFO_S *dispBackGroudInfo = &voCtl->dispBackGroudInfo;
-    dispBackGroudInfo->y = 0x00;
-    dispBackGroudInfo->u = 0x80;
-    dispBackGroudInfo->v = 0x80;
-    //
-    voCtl->yuv2rgb_ctl_en = FALSE;
-    voCtl->ditherctlen = TRUE;
-    voCtl->clutctlen = FALSE;
-//
-    return 0;
+	VO_CHECK_POINTER(voCtl);
+	memset(voCtl,0x0,sizeof(voCtl));
+	//
+	VO_DISP_CTL_INFO_S *dispCtl= &voCtl->dispCtl;
+	dispCtl->Disp_en = TRUE;
+	dispCtl->SyncMode = VO_SYSTEM_MODE_1920x1080x30P;
+	dispCtl->total_size.Width = 0x898;
+	dispCtl->total_size.Height = 0x465;
+	dispCtl->disp_start.Width = VIDEO_DISP_ZONE_X_START;
+	dispCtl->disp_stop.Width = VIDEO_DISP_ZONE_X_STOP;
+	dispCtl->disp_start.Height = VIDEO_DISP_ZONE_Y_START;
+	dispCtl->disp_stop.Height = VIDEO_DISP_ZONE_Y_STOP;
+	//
+	VO_LAYER_CTL_INFO_S *layer0Ctl = &voCtl->layer0Ctl;
+	layer0Ctl->layer_en = TRUE;
+	layer0Ctl->layer0_mfbd_en = FALSE;
+	layer0Ctl->endiany = VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
+	layer0Ctl->endianuv = VO_VIDEO_LAYER_UV_ENDIAN_MODE2;//VO_VIDEO_LAYER_UV_ENDIAN_MODE3
+	layer0Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
+	layer0Ctl->active_size.Width = VIDEO_LAYER0_H_IN_SIZE;//1920;
+	layer0Ctl->active_size.Height = VIDEO_LAYER0_V_IN_SIZE;//1080;
+	layer0Ctl->out_size.Width = 1280;// VIDEO_LAYER0_H_OUT_SIZE; //1920
+	layer0Ctl->out_size.Height = 720;//VIDEO_LAYER0_V_OUT_SIZE; //1080
+	layer0Ctl->ctl_offset.Width = VIDEO_LAYER0_H_POSITION;//198;
+	layer0Ctl->ctl_offset.Height = VIDEO_LAYER0_V_POSITION;//42;
+	layer0Ctl->size_offset.Width = 0x0;
+	layer0Ctl->size_offset.Height = 0x0;
+	layer0Ctl->bufInfo.yAddr0= LAYER0_Y_BASEAddr0;
+	layer0Ctl->bufInfo.yAddr1= LAYER0_Y_BASEAddr0;
+	layer0Ctl->bufInfo.uvAddr0= LAYER0_UV_BASEaddr0;
+	layer0Ctl->bufInfo.uvAddr1= LAYER0_UV_BASEaddr0;
+	layer0Ctl->bufInfo.hsize_stride= 0xff;//VIDEO_LAYER2_RD_STRIDE;
+	layer0Ctl->bufInfo.vsize_stride= 0x437;//0;
+	layer0Ctl->layerMix_en = TRUE;
+	layer0Ctl->layerMix_glbalp = 0xff;
+	//LAYER1
+	VO_LAYER_CTL_INFO_S *layer1Ctl = &voCtl->layer1Ctl;
+	layer1Ctl->layer_en = FALSE;
+	layer1Ctl->layerMix_en = TRUE;
+	layer1Ctl->layerMix_glbalp = 0xff;
+	//LAYER2
+	VO_LAYER_CTL_INFO_S *layer2Ctl = &voCtl->layer2Ctl;
+	layer2Ctl->layer_en = FALSE;
+	layer2Ctl->layerMix_en = TRUE;
+	layer2Ctl->layerMix_glbalp = 0xff;
+	//LAYER3
+	VO_LAYER_CTL_INFO_S *layer3Ctl = &voCtl->layer3Ctl;
+	layer3Ctl->layer_en = FALSE;
+	layer3Ctl->layerMix_en = TRUE;
+	layer3Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_LAYER_OSD_CTL_INFO_S *layer4osd0Ctl = &voCtl->layer4osd0Ctl;
+	layer4osd0Ctl->layer_en = FALSE;
+	layer4osd0Ctl->osdrgb2yuvEn = TRUE;
+	layer4osd0Ctl->layerMix_en = TRUE;
+	layer4osd0Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_LAYER_OSD_CTL_INFO_S *layer5osd1Ctl = &voCtl->layer5osd1Ctl;
+	layer5osd1Ctl->layer_en = FALSE;
+	layer5osd1Ctl->osdrgb2yuvEn = TRUE;
+	layer5osd1Ctl->layerMix_en = TRUE;
+	layer5osd1Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_LAYER_OSD_CTL_INFO_S *layer6osd2Ctl = &voCtl->layer6osd2Ctl;
+	layer6osd2Ctl->layer_en = FALSE;
+	layer6osd2Ctl->osdrgb2yuvEn = TRUE;
+	layer6osd2Ctl->layerMix_en = TRUE;
+	layer6osd2Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_DISP_BACK_GROUD_INFO_S *dispBackGroudInfo = &voCtl->dispBackGroudInfo;
+	dispBackGroudInfo->y = 0x00;
+	dispBackGroudInfo->u = 0x80;
+	dispBackGroudInfo->v = 0x80;
+	//
+	voCtl->yuv2rgb_ctl_en = FALSE;
+	voCtl->ditherctlen = TRUE;
+	voCtl->clutctlen = FALSE;
+	//
+	return 0;
 }
 /*
-*
-*/
+ *
+ */
 static int VO_TEST_LAYER0_MFBD_GetCtl(VO_CTL_S *voCtl)
 {
-    VO_CHECK_POINTER(voCtl);
-    memset(voCtl,0x0,sizeof(voCtl));
-    //
-    VO_DISP_CTL_INFO_S *dispCtl= &voCtl->dispCtl;
-    dispCtl->Disp_en = TRUE;
-    dispCtl->SyncMode = VO_SYSTEM_MODE_1920x1080x30P;
-    dispCtl->total_size.Width = 0x898;
-    dispCtl->total_size.Height = 0x465;
-    dispCtl->disp_start.Width = VIDEO_DISP_ZONE_X_START;
-    dispCtl->disp_stop.Width = VIDEO_DISP_ZONE_X_STOP;
-    dispCtl->disp_start.Height = VIDEO_DISP_ZONE_Y_START;
-    dispCtl->disp_stop.Height = VIDEO_DISP_ZONE_Y_STOP;
-    //
-    VO_LAYER_CTL_INFO_S *layer0Ctl = &voCtl->layer0Ctl;
-    layer0Ctl->layer_en = TRUE;
-    layer0Ctl->layer0_mfbd_en = TRUE;//FALSE;
-    layer0Ctl->endiany = VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
-    layer0Ctl->endianuv = VO_VIDEO_LAYER_UV_ENDIAN_MODE2;//VO_VIDEO_LAYER_UV_ENDIAN_MODE3
-    layer0Ctl->uvswap = FALSE;//TRUE;
-    layer0Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
-    layer0Ctl->active_size.Width = VIDEO_LAYER0_H_IN_SIZE;//1920;
-    layer0Ctl->active_size.Height = VIDEO_LAYER0_V_IN_SIZE;//1080;
-    layer0Ctl->out_size.Width = VIDEO_LAYER0_H_OUT_SIZE; //1920
-    layer0Ctl->out_size.Height = VIDEO_LAYER0_V_OUT_SIZE; //1080
-    layer0Ctl->ctl_offset.Width = VIDEO_LAYER0_H_POSITION;//198;
-    layer0Ctl->ctl_offset.Height = VIDEO_LAYER0_V_POSITION;//42;
-    layer0Ctl->size_offset.Width = 0x0;
-    layer0Ctl->size_offset.Height = 0x0;
-    layer0Ctl->bufInfo.yAddr0= LAYER0_Y_BASEAddr0;
-    layer0Ctl->bufInfo.yAddr1= LAYER0_Y_BASEAddr0;
-    layer0Ctl->bufInfo.uvAddr0= LAYER0_UV_BASEaddr0;
-    layer0Ctl->bufInfo.uvAddr1= LAYER0_UV_BASEaddr0;
-    layer0Ctl->bufInfo.hsize_stride= 0xff;//VIDEO_LAYER2_RD_STRIDE;
-    layer0Ctl->bufInfo.vsize_stride= 0x437;//0;
-    layer0Ctl->layerMix_en = TRUE;
-    layer0Ctl->layerMix_glbalp = 0xff;
-    //LAYER1
-    VO_LAYER_CTL_INFO_S *layer1Ctl = &voCtl->layer1Ctl;
-    layer1Ctl->layer_en = FALSE;
-    layer1Ctl->layerMix_en = TRUE;
-    layer1Ctl->layerMix_glbalp = 0xff;
-    //LAYER2
-    VO_LAYER_CTL_INFO_S *layer2Ctl = &voCtl->layer2Ctl;
-    layer2Ctl->layer_en = FALSE;
-    layer2Ctl->layerMix_en = TRUE;
-    layer2Ctl->layerMix_glbalp = 0xff;
-    //LAYER3
-    VO_LAYER_CTL_INFO_S *layer3Ctl = &voCtl->layer3Ctl;
-    layer3Ctl->layer_en = FALSE;
-    layer3Ctl->layerMix_en = TRUE;
-    layer3Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_LAYER_OSD_CTL_INFO_S *layer4osd0Ctl = &voCtl->layer4osd0Ctl;
-    layer4osd0Ctl->layer_en = FALSE;
-    layer4osd0Ctl->osdrgb2yuvEn = TRUE;
-    layer4osd0Ctl->layerMix_en = TRUE;
-    layer4osd0Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_LAYER_OSD_CTL_INFO_S *layer5osd1Ctl = &voCtl->layer5osd1Ctl;
-    layer5osd1Ctl->layer_en = FALSE;
-    layer5osd1Ctl->osdrgb2yuvEn = TRUE;
-    layer5osd1Ctl->layerMix_en = TRUE;
-    layer5osd1Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_LAYER_OSD_CTL_INFO_S *layer6osd2Ctl = &voCtl->layer6osd2Ctl;
-    layer6osd2Ctl->layer_en = FALSE;
-    layer6osd2Ctl->osdrgb2yuvEn = TRUE;
-    layer6osd2Ctl->layerMix_en = TRUE;
-    layer6osd2Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_DISP_BACK_GROUD_INFO_S *dispBackGroudInfo = &voCtl->dispBackGroudInfo;
-    dispBackGroudInfo->y = 0x00;
-    dispBackGroudInfo->u = 0x80;
-    dispBackGroudInfo->v = 0x80;
-    //
-    voCtl->yuv2rgb_ctl_en = FALSE;
-    voCtl->ditherctlen = TRUE;
-    voCtl->clutctlen = FALSE;
-
-    return 0;
+	VO_CHECK_POINTER(voCtl);
+	memset(voCtl,0x0,sizeof(voCtl));
+	//
+	VO_DISP_CTL_INFO_S *dispCtl= &voCtl->dispCtl;
+	dispCtl->Disp_en = TRUE;
+	dispCtl->SyncMode = VO_SYSTEM_MODE_1920x1080x30P;
+	dispCtl->total_size.Width = 0x898;
+	dispCtl->total_size.Height = 0x465;
+	dispCtl->disp_start.Width = VIDEO_DISP_ZONE_X_START;
+	dispCtl->disp_stop.Width = VIDEO_DISP_ZONE_X_STOP;
+	dispCtl->disp_start.Height = VIDEO_DISP_ZONE_Y_START;
+	dispCtl->disp_stop.Height = VIDEO_DISP_ZONE_Y_STOP;
+	//
+	VO_LAYER_CTL_INFO_S *layer0Ctl = &voCtl->layer0Ctl;
+	layer0Ctl->layer_en = TRUE;
+	layer0Ctl->layer0_mfbd_en = TRUE;//FALSE;
+	layer0Ctl->endiany = VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
+	layer0Ctl->endianuv = VO_VIDEO_LAYER_UV_ENDIAN_MODE2;//VO_VIDEO_LAYER_UV_ENDIAN_MODE3
+	layer0Ctl->uvswap = FALSE;//TRUE;
+	layer0Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
+	layer0Ctl->active_size.Width = VIDEO_LAYER0_H_IN_SIZE;//1920;
+	layer0Ctl->active_size.Height = VIDEO_LAYER0_V_IN_SIZE;//1080;
+	layer0Ctl->out_size.Width = VIDEO_LAYER0_H_OUT_SIZE; //1920
+	layer0Ctl->out_size.Height = VIDEO_LAYER0_V_OUT_SIZE; //1080
+	layer0Ctl->ctl_offset.Width = VIDEO_LAYER0_H_POSITION;//198;
+	layer0Ctl->ctl_offset.Height = VIDEO_LAYER0_V_POSITION;//42;
+	layer0Ctl->size_offset.Width = 0x0;
+	layer0Ctl->size_offset.Height = 0x0;
+	layer0Ctl->bufInfo.yAddr0= LAYER0_Y_BASEAddr0;
+	layer0Ctl->bufInfo.yAddr1= LAYER0_Y_BASEAddr0;
+	layer0Ctl->bufInfo.uvAddr0= LAYER0_UV_BASEaddr0;
+	layer0Ctl->bufInfo.uvAddr1= LAYER0_UV_BASEaddr0;
+	layer0Ctl->bufInfo.hsize_stride= 0xff;//VIDEO_LAYER2_RD_STRIDE;
+	layer0Ctl->bufInfo.vsize_stride= 0x437;//0;
+	layer0Ctl->layerMix_en = TRUE;
+	layer0Ctl->layerMix_glbalp = 0xff;
+	//LAYER1
+	VO_LAYER_CTL_INFO_S *layer1Ctl = &voCtl->layer1Ctl;
+	layer1Ctl->layer_en = FALSE;
+	layer1Ctl->layerMix_en = TRUE;
+	layer1Ctl->layerMix_glbalp = 0xff;
+	//LAYER2
+	VO_LAYER_CTL_INFO_S *layer2Ctl = &voCtl->layer2Ctl;
+	layer2Ctl->layer_en = FALSE;
+	layer2Ctl->layerMix_en = TRUE;
+	layer2Ctl->layerMix_glbalp = 0xff;
+	//LAYER3
+	VO_LAYER_CTL_INFO_S *layer3Ctl = &voCtl->layer3Ctl;
+	layer3Ctl->layer_en = FALSE;
+	layer3Ctl->layerMix_en = TRUE;
+	layer3Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_LAYER_OSD_CTL_INFO_S *layer4osd0Ctl = &voCtl->layer4osd0Ctl;
+	layer4osd0Ctl->layer_en = FALSE;
+	layer4osd0Ctl->osdrgb2yuvEn = TRUE;
+	layer4osd0Ctl->layerMix_en = TRUE;
+	layer4osd0Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_LAYER_OSD_CTL_INFO_S *layer5osd1Ctl = &voCtl->layer5osd1Ctl;
+	layer5osd1Ctl->layer_en = FALSE;
+	layer5osd1Ctl->osdrgb2yuvEn = TRUE;
+	layer5osd1Ctl->layerMix_en = TRUE;
+	layer5osd1Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_LAYER_OSD_CTL_INFO_S *layer6osd2Ctl = &voCtl->layer6osd2Ctl;
+	layer6osd2Ctl->layer_en = FALSE;
+	layer6osd2Ctl->osdrgb2yuvEn = TRUE;
+	layer6osd2Ctl->layerMix_en = TRUE;
+	layer6osd2Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_DISP_BACK_GROUD_INFO_S *dispBackGroudInfo = &voCtl->dispBackGroudInfo;
+	dispBackGroudInfo->y = 0x00;
+	dispBackGroudInfo->u = 0x80;
+	dispBackGroudInfo->v = 0x80;
+	//
+	voCtl->yuv2rgb_ctl_en = FALSE;
+	voCtl->ditherctlen = TRUE;
+	voCtl->clutctlen = FALSE;
+
+	return 0;
 }
 /************************************************************************
-*LAYER1_1920x1080_YUV420*
-*************************************************************************/
+ *LAYER1_1920x1080_YUV420*
+ *************************************************************************/
 /*
-*
-*/
+ *
+ */
 static int VO_TEST_LAYER1_1920x1080_YUV420_GetCtl(VO_CTL_S *voCtl)
 {
-    VO_CHECK_POINTER(voCtl);
-    memset(voCtl,0x0,sizeof(voCtl));
-    //
-    VO_DISP_CTL_INFO_S *dispCtl= &voCtl->dispCtl;
-    dispCtl->Disp_en = TRUE;
-    dispCtl->SyncMode = VO_SYSTEM_MODE_1920x1080x30P;
-    dispCtl->total_size.Width = 0x898;
-    dispCtl->total_size.Height = 0x465;
-    dispCtl->disp_start.Width = VIDEO_DISP_ZONE_X_START;
-    dispCtl->disp_stop.Width = VIDEO_DISP_ZONE_X_STOP;
-    dispCtl->disp_start.Height = VIDEO_DISP_ZONE_Y_START;
-    dispCtl->disp_stop.Height = VIDEO_DISP_ZONE_Y_STOP;
-    //LAYER0
-    VO_LAYER_CTL_INFO_S *layer0Ctl = &voCtl->layer0Ctl;
-    layer0Ctl->layer_en = FALSE;
-    layer0Ctl->layer0_mfbd_en = FALSE;
-    layer0Ctl->layerMix_en = FALSE;
-    layer0Ctl->layerMix_glbalp = 0xff;
-    //LAYER1
-    VO_LAYER_CTL_INFO_S *layer1Ctl = &voCtl->layer1Ctl;
-    layer1Ctl->layer_en = TRUE;
-    layer1Ctl->endiany = VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
-    layer1Ctl->endianuv = VO_VIDEO_LAYER_UV_ENDIAN_MODE2;//VO_VIDEO_LAYER_UV_ENDIAN_MODE2;
-    layer1Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
-    layer1Ctl->uvswap = TRUE;
-    layer1Ctl->active_size.Width = 1920;
-    layer1Ctl->active_size.Height = 1080;
-    layer1Ctl->ctl_offset.Width = 198;
-    layer1Ctl->ctl_offset.Height = 42;
-    layer1Ctl->size_offset.Width = 0x0;
-    layer1Ctl->size_offset.Height = 0x0;
-    layer1Ctl->bufInfo.yAddr0= LAYER0_Y_BASEAddr0;
-    layer1Ctl->bufInfo.yAddr1= LAYER0_Y_BASEAddr0;
-    layer1Ctl->bufInfo.uvAddr0= LAYER0_UV_BASEaddr0;
-    layer1Ctl->bufInfo.uvAddr1= LAYER0_UV_BASEaddr0;
-    layer1Ctl->bufInfo.hsize_stride= 0xff;//VIDEO_LAYER2_RD_STRIDE;
-    layer1Ctl->bufInfo.vsize_stride= 0x437;//0;
-    layer1Ctl->layerMix_en = TRUE;
-    layer1Ctl->layerMix_glbalp = 0xff;
-    //LAYER2
-    VO_LAYER_CTL_INFO_S *layer2Ctl = &voCtl->layer2Ctl;
-    layer2Ctl->layer_en = FALSE;
-    layer2Ctl->layerMix_en = FALSE;
-    layer2Ctl->layerMix_glbalp = 0xff;
-    //LAYER3
-    VO_LAYER_CTL_INFO_S *layer3Ctl = &voCtl->layer3Ctl;
-    layer3Ctl->layer_en = FALSE;
-    layer3Ctl->layerMix_en = FALSE;
-    layer3Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_LAYER_OSD_CTL_INFO_S *layer4osd0Ctl = &voCtl->layer4osd0Ctl;
-    layer4osd0Ctl->layer_en = FALSE;
-    layer4osd0Ctl->osdrgb2yuvEn = FALSE;
-    layer4osd0Ctl->layerMix_en = FALSE;
-    layer4osd0Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_LAYER_OSD_CTL_INFO_S *layer5osd1Ctl = &voCtl->layer5osd1Ctl;
-    layer5osd1Ctl->layer_en = FALSE;
-    layer5osd1Ctl->osdrgb2yuvEn = FALSE;
-    layer5osd1Ctl->layerMix_en = FALSE;
-    layer5osd1Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_LAYER_OSD_CTL_INFO_S *layer6osd2Ctl = &voCtl->layer6osd2Ctl;
-    layer6osd2Ctl->layer_en = FALSE;
-    layer6osd2Ctl->osdrgb2yuvEn = FALSE;
-    layer6osd2Ctl->layerMix_en = FALSE;
-    layer6osd2Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_DISP_BACK_GROUD_INFO_S *dispBackGroudInfo = &voCtl->dispBackGroudInfo;
-    dispBackGroudInfo->y = 0x00;
-    dispBackGroudInfo->u = 0x80;
-    dispBackGroudInfo->v = 0x80;
-    //
-    voCtl->yuv2rgb_ctl_en = FALSE;//TRUE;
-    voCtl->ditherctlen = TRUE;
-    voCtl->clutctlen = FALSE;
-
-    return 0;
+	VO_CHECK_POINTER(voCtl);
+	memset(voCtl,0x0,sizeof(voCtl));
+	//
+	VO_DISP_CTL_INFO_S *dispCtl= &voCtl->dispCtl;
+	dispCtl->Disp_en = TRUE;
+	dispCtl->SyncMode = VO_SYSTEM_MODE_1920x1080x30P;
+	dispCtl->total_size.Width = 0x898;
+	dispCtl->total_size.Height = 0x465;
+	dispCtl->disp_start.Width = VIDEO_DISP_ZONE_X_START;
+	dispCtl->disp_stop.Width = VIDEO_DISP_ZONE_X_STOP;
+	dispCtl->disp_start.Height = VIDEO_DISP_ZONE_Y_START;
+	dispCtl->disp_stop.Height = VIDEO_DISP_ZONE_Y_STOP;
+	//LAYER0
+	VO_LAYER_CTL_INFO_S *layer0Ctl = &voCtl->layer0Ctl;
+	layer0Ctl->layer_en = FALSE;
+	layer0Ctl->layer0_mfbd_en = FALSE;
+	layer0Ctl->layerMix_en = FALSE;
+	layer0Ctl->layerMix_glbalp = 0xff;
+	//LAYER1
+	VO_LAYER_CTL_INFO_S *layer1Ctl = &voCtl->layer1Ctl;
+	layer1Ctl->layer_en = TRUE;
+	layer1Ctl->endiany = VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
+	layer1Ctl->endianuv = VO_VIDEO_LAYER_UV_ENDIAN_MODE2;//VO_VIDEO_LAYER_UV_ENDIAN_MODE2;
+	layer1Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
+	layer1Ctl->uvswap = TRUE;
+	layer1Ctl->active_size.Width = 1920;
+	layer1Ctl->active_size.Height = 1080;
+	layer1Ctl->ctl_offset.Width = 198;
+	layer1Ctl->ctl_offset.Height = 42;
+	layer1Ctl->size_offset.Width = 0x0;
+	layer1Ctl->size_offset.Height = 0x0;
+	layer1Ctl->bufInfo.yAddr0= LAYER0_Y_BASEAddr0;
+	layer1Ctl->bufInfo.yAddr1= LAYER0_Y_BASEAddr0;
+	layer1Ctl->bufInfo.uvAddr0= LAYER0_UV_BASEaddr0;
+	layer1Ctl->bufInfo.uvAddr1= LAYER0_UV_BASEaddr0;
+	layer1Ctl->bufInfo.hsize_stride= 0xff;//VIDEO_LAYER2_RD_STRIDE;
+	layer1Ctl->bufInfo.vsize_stride= 0x437;//0;
+	layer1Ctl->layerMix_en = TRUE;
+	layer1Ctl->layerMix_glbalp = 0xff;
+	//LAYER2
+	VO_LAYER_CTL_INFO_S *layer2Ctl = &voCtl->layer2Ctl;
+	layer2Ctl->layer_en = FALSE;
+	layer2Ctl->layerMix_en = FALSE;
+	layer2Ctl->layerMix_glbalp = 0xff;
+	//LAYER3
+	VO_LAYER_CTL_INFO_S *layer3Ctl = &voCtl->layer3Ctl;
+	layer3Ctl->layer_en = FALSE;
+	layer3Ctl->layerMix_en = FALSE;
+	layer3Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_LAYER_OSD_CTL_INFO_S *layer4osd0Ctl = &voCtl->layer4osd0Ctl;
+	layer4osd0Ctl->layer_en = FALSE;
+	layer4osd0Ctl->osdrgb2yuvEn = FALSE;
+	layer4osd0Ctl->layerMix_en = FALSE;
+	layer4osd0Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_LAYER_OSD_CTL_INFO_S *layer5osd1Ctl = &voCtl->layer5osd1Ctl;
+	layer5osd1Ctl->layer_en = FALSE;
+	layer5osd1Ctl->osdrgb2yuvEn = FALSE;
+	layer5osd1Ctl->layerMix_en = FALSE;
+	layer5osd1Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_LAYER_OSD_CTL_INFO_S *layer6osd2Ctl = &voCtl->layer6osd2Ctl;
+	layer6osd2Ctl->layer_en = FALSE;
+	layer6osd2Ctl->osdrgb2yuvEn = FALSE;
+	layer6osd2Ctl->layerMix_en = FALSE;
+	layer6osd2Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_DISP_BACK_GROUD_INFO_S *dispBackGroudInfo = &voCtl->dispBackGroudInfo;
+	dispBackGroudInfo->y = 0x00;
+	dispBackGroudInfo->u = 0x80;
+	dispBackGroudInfo->v = 0x80;
+	//
+	voCtl->yuv2rgb_ctl_en = FALSE;//TRUE;
+	voCtl->ditherctlen = TRUE;
+	voCtl->clutctlen = FALSE;
+
+	return 0;
 }
 /************************************************************************
-*LAYER2_1920x1080_YUV420*
-*************************************************************************/
+ *LAYER2_1920x1080_YUV420*
+ *************************************************************************/
 /*
-*
-*/
+ *
+ */
 static int VO_TEST_LAYER2_1920x1080_YUV420_GetCtl(VO_CTL_S *voCtl)
 {
-    VO_CHECK_POINTER(voCtl);
-    memset(voCtl,0x0,sizeof(voCtl));
-    //
-    VO_DISP_CTL_INFO_S *dispCtl= &voCtl->dispCtl;
-    dispCtl->Disp_en = TRUE;
-    dispCtl->SyncMode = VO_SYSTEM_MODE_1920x1080x30P;
-    dispCtl->total_size.Width = 0x898;
-    dispCtl->total_size.Height = 0x465;
-    dispCtl->disp_start.Width = VIDEO_DISP_ZONE_X_START;
-    dispCtl->disp_stop.Width = VIDEO_DISP_ZONE_X_STOP;
-    dispCtl->disp_start.Height = VIDEO_DISP_ZONE_Y_START;
-    dispCtl->disp_stop.Height = VIDEO_DISP_ZONE_Y_STOP;
-    //LAYER0
-    VO_LAYER_CTL_INFO_S *layer0Ctl = &voCtl->layer0Ctl;
-    layer0Ctl->layer_en = FALSE;
-    layer0Ctl->layer0_mfbd_en = FALSE;
-    layer0Ctl->layerMix_en = TRUE;
-    layer0Ctl->layerMix_glbalp = 0xff;
-    //LAYER1
-    VO_LAYER_CTL_INFO_S *layer1Ctl = &voCtl->layer1Ctl;
-    layer1Ctl->layer_en = FALSE; 
-    layer1Ctl->layerMix_en = TRUE;
-    layer1Ctl->layerMix_glbalp = 0xff;
-    //LAYER2
-    VO_LAYER_CTL_INFO_S *layer2Ctl = &voCtl->layer2Ctl;
-    layer2Ctl->layer_en = TRUE;
-    layer2Ctl->endiany = VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
-    layer2Ctl->endianuv = VO_VIDEO_LAYER_UV_ENDIAN_MODE2;
-    layer2Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
-    layer2Ctl->uvswap = FALSE;//TRUE;
-    layer2Ctl->active_size.Width = 1920;
-    layer2Ctl->active_size.Height = 1080;
-    layer2Ctl->ctl_offset.Width = 198;
-    layer2Ctl->ctl_offset.Height = 42;
-    layer2Ctl->size_offset.Width = 0x0;
-    layer2Ctl->size_offset.Height = 0x0;
-    layer2Ctl->bufInfo.yAddr0= LAYER0_Y_BASEAddr0;
-    layer2Ctl->bufInfo.yAddr1= LAYER0_Y_BASEAddr0;
-    layer2Ctl->bufInfo.uvAddr0= LAYER0_UV_BASEaddr0;
-    layer2Ctl->bufInfo.uvAddr1= LAYER0_UV_BASEaddr0;
-    layer2Ctl->bufInfo.hsize_stride= 0xff;//VIDEO_LAYER2_RD_STRIDE;
-    layer2Ctl->bufInfo.vsize_stride= 0x437;//0;
-    layer2Ctl->layerMix_en = TRUE;
-    layer2Ctl->layerMix_glbalp = 0xff;
-    //LAYER3
-    VO_LAYER_CTL_INFO_S *layer3Ctl = &voCtl->layer3Ctl;
-    layer3Ctl->layer_en = FALSE; 
-    layer3Ctl->layerMix_en = TRUE;
-    layer3Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_LAYER_OSD_CTL_INFO_S *layer4osd0Ctl = &voCtl->layer4osd0Ctl;
-    layer4osd0Ctl->layer_en = FALSE;
-    layer4osd0Ctl->osdrgb2yuvEn = TRUE;
-    layer4osd0Ctl->layerMix_en = TRUE;
-    layer4osd0Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_LAYER_OSD_CTL_INFO_S *layer5osd1Ctl = &voCtl->layer5osd1Ctl;
-    layer5osd1Ctl->layer_en = FALSE;
-    layer5osd1Ctl->osdrgb2yuvEn = TRUE;
-    layer5osd1Ctl->layerMix_en = TRUE;
-    layer5osd1Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_LAYER_OSD_CTL_INFO_S *layer6osd2Ctl = &voCtl->layer6osd2Ctl;
-    layer6osd2Ctl->layer_en = FALSE;
-    layer6osd2Ctl->osdrgb2yuvEn = TRUE;
-    layer6osd2Ctl->layerMix_en = TRUE;
-    layer6osd2Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_DISP_BACK_GROUD_INFO_S *dispBackGroudInfo = &voCtl->dispBackGroudInfo;
-    dispBackGroudInfo->y = 0x00;
-    dispBackGroudInfo->u = 0x80;
-    dispBackGroudInfo->v = 0x80;
-    // 
-    voCtl->yuv2rgb_ctl_en = TRUE;//FALSE;
-    voCtl->ditherctlen = TRUE;
-    voCtl->clutctlen = FALSE;
-    return 0;
+	VO_CHECK_POINTER(voCtl);
+	memset(voCtl,0x0,sizeof(voCtl));
+	//
+	VO_DISP_CTL_INFO_S *dispCtl= &voCtl->dispCtl;
+	dispCtl->Disp_en = TRUE;
+	dispCtl->SyncMode = VO_SYSTEM_MODE_1920x1080x30P;
+	dispCtl->total_size.Width = 0x898;
+	dispCtl->total_size.Height = 0x465;
+	dispCtl->disp_start.Width = VIDEO_DISP_ZONE_X_START;
+	dispCtl->disp_stop.Width = VIDEO_DISP_ZONE_X_STOP;
+	dispCtl->disp_start.Height = VIDEO_DISP_ZONE_Y_START;
+	dispCtl->disp_stop.Height = VIDEO_DISP_ZONE_Y_STOP;
+	//LAYER0
+	VO_LAYER_CTL_INFO_S *layer0Ctl = &voCtl->layer0Ctl;
+	layer0Ctl->layer_en = FALSE;
+	layer0Ctl->layer0_mfbd_en = FALSE;
+	layer0Ctl->layerMix_en = TRUE;
+	layer0Ctl->layerMix_glbalp = 0xff;
+	//LAYER1
+	VO_LAYER_CTL_INFO_S *layer1Ctl = &voCtl->layer1Ctl;
+	layer1Ctl->layer_en = FALSE;
+	layer1Ctl->layerMix_en = TRUE;
+	layer1Ctl->layerMix_glbalp = 0xff;
+	//LAYER2
+	VO_LAYER_CTL_INFO_S *layer2Ctl = &voCtl->layer2Ctl;
+	layer2Ctl->layer_en = TRUE;
+	layer2Ctl->endiany = VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
+	layer2Ctl->endianuv = VO_VIDEO_LAYER_UV_ENDIAN_MODE2;
+	layer2Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
+	layer2Ctl->uvswap = FALSE;//TRUE;
+	layer2Ctl->active_size.Width = 1920;
+	layer2Ctl->active_size.Height = 1080;
+	layer2Ctl->ctl_offset.Width = 198;
+	layer2Ctl->ctl_offset.Height = 42;
+	layer2Ctl->size_offset.Width = 0x0;
+	layer2Ctl->size_offset.Height = 0x0;
+	layer2Ctl->bufInfo.yAddr0= LAYER0_Y_BASEAddr0;
+	layer2Ctl->bufInfo.yAddr1= LAYER0_Y_BASEAddr0;
+	layer2Ctl->bufInfo.uvAddr0= LAYER0_UV_BASEaddr0;
+	layer2Ctl->bufInfo.uvAddr1= LAYER0_UV_BASEaddr0;
+	layer2Ctl->bufInfo.hsize_stride= 0xff;//VIDEO_LAYER2_RD_STRIDE;
+	layer2Ctl->bufInfo.vsize_stride= 0x437;//0;
+	layer2Ctl->layerMix_en = TRUE;
+	layer2Ctl->layerMix_glbalp = 0xff;
+	//LAYER3
+	VO_LAYER_CTL_INFO_S *layer3Ctl = &voCtl->layer3Ctl;
+	layer3Ctl->layer_en = FALSE;
+	layer3Ctl->layerMix_en = TRUE;
+	layer3Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_LAYER_OSD_CTL_INFO_S *layer4osd0Ctl = &voCtl->layer4osd0Ctl;
+	layer4osd0Ctl->layer_en = FALSE;
+	layer4osd0Ctl->osdrgb2yuvEn = TRUE;
+	layer4osd0Ctl->layerMix_en = TRUE;
+	layer4osd0Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_LAYER_OSD_CTL_INFO_S *layer5osd1Ctl = &voCtl->layer5osd1Ctl;
+	layer5osd1Ctl->layer_en = FALSE;
+	layer5osd1Ctl->osdrgb2yuvEn = TRUE;
+	layer5osd1Ctl->layerMix_en = TRUE;
+	layer5osd1Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_LAYER_OSD_CTL_INFO_S *layer6osd2Ctl = &voCtl->layer6osd2Ctl;
+	layer6osd2Ctl->layer_en = FALSE;
+	layer6osd2Ctl->osdrgb2yuvEn = TRUE;
+	layer6osd2Ctl->layerMix_en = TRUE;
+	layer6osd2Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_DISP_BACK_GROUD_INFO_S *dispBackGroudInfo = &voCtl->dispBackGroudInfo;
+	dispBackGroudInfo->y = 0x00;
+	dispBackGroudInfo->u = 0x80;
+	dispBackGroudInfo->v = 0x80;
+	//
+	voCtl->yuv2rgb_ctl_en = TRUE;//FALSE;
+	voCtl->ditherctlen = TRUE;
+	voCtl->clutctlen = FALSE;
+	return 0;
 }
 /************************************************************************
-*LAYER2_DS0_1080x720_YUV420*
-*************************************************************************/
+ *LAYER2_DS0_1080x720_YUV420*
+ *************************************************************************/
 /*
-*
-*/
+ *
+ */
 static int VO_TEST_LAYER2_DS0_1080x720_YUV420_GetCtl(VO_CTL_S *voCtl)
 {
-    VO_CHECK_POINTER(voCtl);
-    memset(voCtl,0x0,sizeof(voCtl));
-    //
-    VO_DISP_CTL_INFO_S *dispCtl= &voCtl->dispCtl;
-    dispCtl->Disp_en = TRUE;
-    dispCtl->SyncMode = VO_SYSTEM_MODE_1280x720x30P;//VO_SYSTEM_MODE_1920x1080x30P;
-    dispCtl->total_size.Width = 0xce4;//0x898;
-    dispCtl->total_size.Height = 0x2ee;//0x465;
-    dispCtl->disp_start.Width = VIDEO_DISP_ZONE_X_START;
-    dispCtl->disp_stop.Width = VIDEO_DISP_ZONE_X_STOP;
-    dispCtl->disp_start.Height = VIDEO_DISP_ZONE_Y_START;
-    dispCtl->disp_stop.Height = VIDEO_DISP_ZONE_Y_STOP;
-    //LAYER0
-    VO_LAYER_CTL_INFO_S *layer0Ctl = &voCtl->layer0Ctl;
-    layer0Ctl->layer_en = FALSE;
-    layer0Ctl->layer0_mfbd_en = FALSE;
-    layer0Ctl->layerMix_en = TRUE;
-    layer0Ctl->layerMix_glbalp = 0xff;
-    //LAYER1
-    VO_LAYER_CTL_INFO_S *layer1Ctl = &voCtl->layer1Ctl;
-    layer1Ctl->layer_en = FALSE;
-    layer1Ctl->layerMix_en = TRUE;
-    layer1Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_LAYER_CTL_INFO_S *layer2Ctl = &voCtl->layer2Ctl;
-    layer2Ctl->layer_en = TRUE;
-    layer2Ctl->endiany = VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
-    layer2Ctl->endianuv = VO_VIDEO_LAYER_UV_ENDIAN_MODE2;
-    layer2Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
-    layer2Ctl->uvswap = TRUE;
-    layer2Ctl->active_size.Width = 1280;//1920;
-    layer2Ctl->active_size.Height = 720;//1080;
-    layer2Ctl->ctl_offset.Width = 198;
-    layer2Ctl->ctl_offset.Height = 42;
-    layer2Ctl->size_offset.Width = 0x0;
-    layer2Ctl->size_offset.Height = 0x0;
-    layer2Ctl->layerMix_en = TRUE;
-    layer2Ctl->layerMix_glbalp = 0xff;
-
-    //LAYER3
-    VO_LAYER_CTL_INFO_S *layer3Ctl = &voCtl->layer3Ctl;
-    layer3Ctl->layer_en = FALSE;
-    layer3Ctl->layerMix_en = TRUE;
-    layer3Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_LAYER_OSD_CTL_INFO_S *layer4osd0Ctl = &voCtl->layer4osd0Ctl;
-    layer4osd0Ctl->layer_en = FALSE;
-    layer4osd0Ctl->osdrgb2yuvEn = TRUE;
-    layer4osd0Ctl->layerMix_en = TRUE;
-    layer4osd0Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_LAYER_OSD_CTL_INFO_S *layer5osd1Ctl = &voCtl->layer5osd1Ctl;
-    layer5osd1Ctl->layer_en = FALSE;
-    layer5osd1Ctl->osdrgb2yuvEn = TRUE;
-    layer5osd1Ctl->layerMix_en = TRUE;
-    layer5osd1Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_LAYER_OSD_CTL_INFO_S *layer6osd2Ctl = &voCtl->layer6osd2Ctl;
-    layer6osd2Ctl->layer_en = FALSE;
-    layer6osd2Ctl->osdrgb2yuvEn = TRUE;
-    layer6osd2Ctl->layerMix_en = TRUE;
-    layer6osd2Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_DISP_BACK_GROUD_INFO_S *dispBackGroudInfo = &voCtl->dispBackGroudInfo;
-    dispBackGroudInfo->y = 0x00;
-    dispBackGroudInfo->u = 0x80;
-    dispBackGroudInfo->v = 0x80;
-    //
-    voCtl->yuv2rgb_ctl_en = FALSE;
-    voCtl->ditherctlen = TRUE;
-    voCtl->clutctlen = FALSE;
-    return 0;
+	VO_CHECK_POINTER(voCtl);
+	memset(voCtl,0x0,sizeof(voCtl));
+	//
+	VO_DISP_CTL_INFO_S *dispCtl= &voCtl->dispCtl;
+	dispCtl->Disp_en = TRUE;
+	dispCtl->SyncMode = VO_SYSTEM_MODE_1280x720x30P;//VO_SYSTEM_MODE_1920x1080x30P;
+	dispCtl->total_size.Width = 0xce4;//0x898;
+	dispCtl->total_size.Height = 0x2ee;//0x465;
+	dispCtl->disp_start.Width = VIDEO_DISP_ZONE_X_START;
+	dispCtl->disp_stop.Width = VIDEO_DISP_ZONE_X_STOP;
+	dispCtl->disp_start.Height = VIDEO_DISP_ZONE_Y_START;
+	dispCtl->disp_stop.Height = VIDEO_DISP_ZONE_Y_STOP;
+	//LAYER0
+	VO_LAYER_CTL_INFO_S *layer0Ctl = &voCtl->layer0Ctl;
+	layer0Ctl->layer_en = FALSE;
+	layer0Ctl->layer0_mfbd_en = FALSE;
+	layer0Ctl->layerMix_en = TRUE;
+	layer0Ctl->layerMix_glbalp = 0xff;
+	//LAYER1
+	VO_LAYER_CTL_INFO_S *layer1Ctl = &voCtl->layer1Ctl;
+	layer1Ctl->layer_en = FALSE;
+	layer1Ctl->layerMix_en = TRUE;
+	layer1Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_LAYER_CTL_INFO_S *layer2Ctl = &voCtl->layer2Ctl;
+	layer2Ctl->layer_en = TRUE;
+	layer2Ctl->endiany = VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
+	layer2Ctl->endianuv = VO_VIDEO_LAYER_UV_ENDIAN_MODE2;
+	layer2Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
+	layer2Ctl->uvswap = TRUE;
+	layer2Ctl->active_size.Width = 1280;//1920;
+	layer2Ctl->active_size.Height = 720;//1080;
+	layer2Ctl->ctl_offset.Width = 198;
+	layer2Ctl->ctl_offset.Height = 42;
+	layer2Ctl->size_offset.Width = 0x0;
+	layer2Ctl->size_offset.Height = 0x0;
+	layer2Ctl->layerMix_en = TRUE;
+	layer2Ctl->layerMix_glbalp = 0xff;
+
+	//LAYER3
+	VO_LAYER_CTL_INFO_S *layer3Ctl = &voCtl->layer3Ctl;
+	layer3Ctl->layer_en = FALSE;
+	layer3Ctl->layerMix_en = TRUE;
+	layer3Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_LAYER_OSD_CTL_INFO_S *layer4osd0Ctl = &voCtl->layer4osd0Ctl;
+	layer4osd0Ctl->layer_en = FALSE;
+	layer4osd0Ctl->osdrgb2yuvEn = TRUE;
+	layer4osd0Ctl->layerMix_en = TRUE;
+	layer4osd0Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_LAYER_OSD_CTL_INFO_S *layer5osd1Ctl = &voCtl->layer5osd1Ctl;
+	layer5osd1Ctl->layer_en = FALSE;
+	layer5osd1Ctl->osdrgb2yuvEn = TRUE;
+	layer5osd1Ctl->layerMix_en = TRUE;
+	layer5osd1Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_LAYER_OSD_CTL_INFO_S *layer6osd2Ctl = &voCtl->layer6osd2Ctl;
+	layer6osd2Ctl->layer_en = FALSE;
+	layer6osd2Ctl->osdrgb2yuvEn = TRUE;
+	layer6osd2Ctl->layerMix_en = TRUE;
+	layer6osd2Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_DISP_BACK_GROUD_INFO_S *dispBackGroudInfo = &voCtl->dispBackGroudInfo;
+	dispBackGroudInfo->y = 0x00;
+	dispBackGroudInfo->u = 0x80;
+	dispBackGroudInfo->v = 0x80;
+	//
+	voCtl->yuv2rgb_ctl_en = FALSE;
+	voCtl->ditherctlen = TRUE;
+	voCtl->clutctlen = FALSE;
+	return 0;
 }
 /************************************************************************
-*LAYER_420_DS_OUT_ALL_YUV420*
-*************************************************************************/
+ *LAYER_420_DS_OUT_ALL_YUV420*
+ *************************************************************************/
 /*
-*
-*/
+ *
+ */
 static int VO_TEST_LAYER_420_DS_OUT_ALL_YUV420_GetCtl(VO_CTL_S *voCtl)
 {
-    VO_CHECK_POINTER(voCtl);
-    memset(voCtl,0x0,sizeof(voCtl));
-    //
-    VO_DISP_CTL_INFO_S *dispCtl= &voCtl->dispCtl;
-    dispCtl->Disp_en = TRUE;
-    dispCtl->SyncMode = VO_SYSTEM_MODE_1920x1080x30P;
-    dispCtl->total_size.Width = 0x898;
-    dispCtl->total_size.Height = 0x465;
-    dispCtl->disp_start.Width = VIDEO_DISP_ZONE_X_START;
-    dispCtl->disp_stop.Width = VIDEO_DISP_ZONE_X_STOP;
-    dispCtl->disp_start.Height = VIDEO_DISP_ZONE_Y_START;
-    dispCtl->disp_stop.Height = VIDEO_DISP_ZONE_Y_STOP;
-    //layer0
-    VO_LAYER_CTL_INFO_S *layer0Ctl = &voCtl->layer0Ctl;
-    layer0Ctl->layer_en = TRUE;
-    layer0Ctl->layer0_mfbd_en = FALSE;
-    layer0Ctl->endiany = VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
-    layer0Ctl->endianuv = VO_VIDEO_LAYER_UV_ENDIAN_MODE3;//VO_VIDEO_LAYER_UV_ENDIAN_MODE3
-    layer0Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
-    layer0Ctl->uvswap = TRUE;//FALSE;
-    layer0Ctl->active_size.Width = 1920;
-    layer0Ctl->active_size.Height = 1080;
-    layer0Ctl->out_size.Width = 1920;
-    layer0Ctl->out_size.Height = 1080;
-    layer0Ctl->ctl_offset.Width = 198;
-    layer0Ctl->ctl_offset.Height = 42;
-    layer0Ctl->size_offset.Width = 0x0;
-    layer0Ctl->size_offset.Height = 0x0;
-    layer0Ctl->bufInfo.yAddr0= LAYER0_Y_BASEAddr0;
-    layer0Ctl->bufInfo.yAddr1= LAYER0_Y_BASEAddr1;
-    layer0Ctl->bufInfo.uvAddr0= LAYER0_UV_BASEaddr0;
-    layer0Ctl->bufInfo.uvAddr1= LAYER0_UV_BASEaddr1;
-    layer0Ctl->bufInfo.hsize_stride= 0xff;//2048;VIDEO_LAYER2_RD_STRIDE;
-    layer0Ctl->bufInfo.vsize_stride= 0x437;//0;
-    layer0Ctl->layerMix_en = TRUE;
-    layer0Ctl->layerMix_glbalp = 0xff;
-    //layer1
-    VO_LAYER_CTL_INFO_S *layer1Ctl = &voCtl->layer1Ctl;
-    layer1Ctl->layer_en = TRUE;
-    layer1Ctl->endiany = VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
-    layer1Ctl->endianuv = VO_VIDEO_LAYER_Y_ENDIAN_MODE2;
-    layer1Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
-    layer1Ctl->uvswap = FALSE;//TRUE;
-    layer1Ctl->active_size.Width = 320;//1920;
-    layer1Ctl->active_size.Height = 240;//1080;
-    layer1Ctl->ctl_offset.Width = 198 + 1400;
-    layer1Ctl->ctl_offset.Height = 100;
-    layer1Ctl->size_offset.Width = 0x0;
-    layer1Ctl->size_offset.Height = 0x0;
-    layer1Ctl->bufInfo.yAddr0= LAYER1_Y_BASEAddr0;
-    layer1Ctl->bufInfo.yAddr1= LAYER1_Y_BASEAddr0;
-    layer1Ctl->bufInfo.uvAddr0= LAYER1_UV_BASEaddr0;
-    layer1Ctl->bufInfo.uvAddr1= LAYER1_UV_BASEaddr0;
-    layer1Ctl->bufInfo.hsize_stride= VIDEO_LAYER2_RD_STRIDE/8-1;//0xff;//VIDEO_LAYER2_RD_STRIDE;
-    layer1Ctl->bufInfo.vsize_stride= 0xef;//0;//0x437;//0; 
-    layer1Ctl->layerMix_en = TRUE;
-    layer1Ctl->layerMix_glbalp = 0xff;
-    //layer2
-    VO_LAYER_CTL_INFO_S *layer2Ctl = &voCtl->layer2Ctl;
-    layer2Ctl->layer_en = TRUE;
-    layer2Ctl->endiany = VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
-    layer2Ctl->endianuv = VO_VIDEO_LAYER_UV_ENDIAN_MODE2;
-    layer2Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
-    layer2Ctl->uvswap = FALSE;//TRUE;
-    layer2Ctl->active_size.Width = 320;//1920;
-    layer2Ctl->active_size.Height = 240;//1080;
-    layer2Ctl->ctl_offset.Width = 198 + 1400;
-    layer2Ctl->ctl_offset.Height = 500;
-    layer2Ctl->size_offset.Width = 0x0;
-    layer2Ctl->size_offset.Height = 0x0;
-    layer2Ctl->bufInfo.yAddr0= LAYER2_Y_BASEAddr0;
-    layer2Ctl->bufInfo.yAddr1= LAYER2_Y_BASEAddr0;
-    layer2Ctl->bufInfo.uvAddr0= LAYER2_UV_BASEaddr0;
-    layer2Ctl->bufInfo.uvAddr1= LAYER2_UV_BASEaddr0;
-    layer2Ctl->bufInfo.hsize_stride= VIDEO_LAYER2_RD_STRIDE/8-1;//2048;//0xff;//;
-    layer2Ctl->bufInfo.vsize_stride= 0xef;//0;//0x437;//0;
-    layer2Ctl->layerMix_en = TRUE;
-    layer2Ctl->layerMix_glbalp = 0xff;
-    //layer3
-    VO_LAYER_CTL_INFO_S *layer3Ctl = &voCtl->layer3Ctl;
-    layer3Ctl->layer_en = TRUE;
-    layer3Ctl->endiany = VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
-    layer3Ctl->endianuv = VO_VIDEO_LAYER_UV_ENDIAN_MODE2;
-    layer3Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
-    layer3Ctl->uvswap = FALSE;//TRUE;
-    layer3Ctl->active_size.Width = 320;//1920;
-    layer3Ctl->active_size.Height = 240;//1080;
-    layer3Ctl->ctl_offset.Width = 198;
-    layer3Ctl->ctl_offset.Height = 42;
-    layer3Ctl->size_offset.Width = 0x0;
-    layer3Ctl->size_offset.Height = 0x0;
-    layer3Ctl->bufInfo.yAddr0= 0x22000000;//LAYER2_Y_BASEAddr0;
-    layer3Ctl->bufInfo.yAddr1= 0x22000000;//LAYER2_Y_BASEAddr0;
-    layer3Ctl->bufInfo.uvAddr0= 0x22400000;//LAYER2_UV_BASEaddr0;
-    layer3Ctl->bufInfo.uvAddr1= 0x22400000;//LAYER2_UV_BASEaddr0;
-    layer3Ctl->bufInfo.hsize_stride= 0xff;//2048;//0xff;//VIDEO_LAYER2_RD_STRIDE;
-    layer3Ctl->bufInfo.vsize_stride= 0xef;//0;//0x437;//0; 
-    layer3Ctl->layerMix_en = TRUE;
-    layer3Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_LAYER_OSD_CTL_INFO_S *layer4osd0Ctl = &voCtl->layer4osd0Ctl;
-    layer4osd0Ctl->layer_en = FALSE;
-    layer4osd0Ctl->osdrgb2yuvEn = TRUE;
-    layer4osd0Ctl->layerMix_en = TRUE;
-    layer4osd0Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_LAYER_OSD_CTL_INFO_S *layer5osd1Ctl = &voCtl->layer5osd1Ctl;
-    layer5osd1Ctl->layer_en = FALSE;
-    layer5osd1Ctl->osdrgb2yuvEn = TRUE;
-    layer5osd1Ctl->layerMix_en = TRUE;
-    layer5osd1Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_LAYER_OSD_CTL_INFO_S *layer6osd2Ctl = &voCtl->layer6osd2Ctl;
-    layer6osd2Ctl->layer_en = FALSE;
-    layer6osd2Ctl->osdrgb2yuvEn = TRUE;
-    layer6osd2Ctl->layerMix_en = TRUE;
-    layer6osd2Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_DISP_BACK_GROUD_INFO_S *dispBackGroudInfo = &voCtl->dispBackGroudInfo;
-    dispBackGroudInfo->y = 0x00;
-    dispBackGroudInfo->u = 0x80;
-    dispBackGroudInfo->v = 0x80;
-    //
-    voCtl->yuv2rgb_ctl_en = TRUE;
-    voCtl->ditherctlen = TRUE;
-    voCtl->clutctlen = FALSE;
-    return 0;
+	VO_CHECK_POINTER(voCtl);
+	memset(voCtl,0x0,sizeof(voCtl));
+	//
+	VO_DISP_CTL_INFO_S *dispCtl= &voCtl->dispCtl;
+	dispCtl->Disp_en = TRUE;
+	dispCtl->SyncMode = VO_SYSTEM_MODE_1920x1080x30P;
+	dispCtl->total_size.Width = 0x898;
+	dispCtl->total_size.Height = 0x465;
+	dispCtl->disp_start.Width = VIDEO_DISP_ZONE_X_START;
+	dispCtl->disp_stop.Width = VIDEO_DISP_ZONE_X_STOP;
+	dispCtl->disp_start.Height = VIDEO_DISP_ZONE_Y_START;
+	dispCtl->disp_stop.Height = VIDEO_DISP_ZONE_Y_STOP;
+	//layer0
+	VO_LAYER_CTL_INFO_S *layer0Ctl = &voCtl->layer0Ctl;
+	layer0Ctl->layer_en = TRUE;
+	layer0Ctl->layer0_mfbd_en = FALSE;
+	layer0Ctl->endiany = VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
+	layer0Ctl->endianuv = VO_VIDEO_LAYER_UV_ENDIAN_MODE3;//VO_VIDEO_LAYER_UV_ENDIAN_MODE3
+	layer0Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
+	layer0Ctl->uvswap = TRUE;//FALSE;
+	layer0Ctl->active_size.Width = 1920;
+	layer0Ctl->active_size.Height = 1080;
+	layer0Ctl->out_size.Width = 1920;
+	layer0Ctl->out_size.Height = 1080;
+	layer0Ctl->ctl_offset.Width = 198;
+	layer0Ctl->ctl_offset.Height = 42;
+	layer0Ctl->size_offset.Width = 0x0;
+	layer0Ctl->size_offset.Height = 0x0;
+	layer0Ctl->bufInfo.yAddr0= LAYER0_Y_BASEAddr0;
+	layer0Ctl->bufInfo.yAddr1= LAYER0_Y_BASEAddr1;
+	layer0Ctl->bufInfo.uvAddr0= LAYER0_UV_BASEaddr0;
+	layer0Ctl->bufInfo.uvAddr1= LAYER0_UV_BASEaddr1;
+	layer0Ctl->bufInfo.hsize_stride= 0xff;//2048;VIDEO_LAYER2_RD_STRIDE;
+	layer0Ctl->bufInfo.vsize_stride= 0x437;//0;
+	layer0Ctl->layerMix_en = TRUE;
+	layer0Ctl->layerMix_glbalp = 0xff;
+	//layer1
+	VO_LAYER_CTL_INFO_S *layer1Ctl = &voCtl->layer1Ctl;
+	layer1Ctl->layer_en = TRUE;
+	layer1Ctl->endiany = VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
+	layer1Ctl->endianuv = VO_VIDEO_LAYER_Y_ENDIAN_MODE2;
+	layer1Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
+	layer1Ctl->uvswap = FALSE;//TRUE;
+	layer1Ctl->active_size.Width = 320;//1920;
+	layer1Ctl->active_size.Height = 240;//1080;
+	layer1Ctl->ctl_offset.Width = 198 + 1400;
+	layer1Ctl->ctl_offset.Height = 100;
+	layer1Ctl->size_offset.Width = 0x0;
+	layer1Ctl->size_offset.Height = 0x0;
+	layer1Ctl->bufInfo.yAddr0= LAYER1_Y_BASEAddr0;
+	layer1Ctl->bufInfo.yAddr1= LAYER1_Y_BASEAddr0;
+	layer1Ctl->bufInfo.uvAddr0= LAYER1_UV_BASEaddr0;
+	layer1Ctl->bufInfo.uvAddr1= LAYER1_UV_BASEaddr0;
+	layer1Ctl->bufInfo.hsize_stride= VIDEO_LAYER2_RD_STRIDE/8-1;//0xff;//VIDEO_LAYER2_RD_STRIDE;
+	layer1Ctl->bufInfo.vsize_stride= 0xef;//0;//0x437;//0;
+	layer1Ctl->layerMix_en = TRUE;
+	layer1Ctl->layerMix_glbalp = 0xff;
+	//layer2
+	VO_LAYER_CTL_INFO_S *layer2Ctl = &voCtl->layer2Ctl;
+	layer2Ctl->layer_en = TRUE;
+	layer2Ctl->endiany = VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
+	layer2Ctl->endianuv = VO_VIDEO_LAYER_UV_ENDIAN_MODE2;
+	layer2Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
+	layer2Ctl->uvswap = FALSE;//TRUE;
+	layer2Ctl->active_size.Width = 320;//1920;
+	layer2Ctl->active_size.Height = 240;//1080;
+	layer2Ctl->ctl_offset.Width = 198 + 1400;
+	layer2Ctl->ctl_offset.Height = 500;
+	layer2Ctl->size_offset.Width = 0x0;
+	layer2Ctl->size_offset.Height = 0x0;
+	layer2Ctl->bufInfo.yAddr0= LAYER2_Y_BASEAddr0;
+	layer2Ctl->bufInfo.yAddr1= LAYER2_Y_BASEAddr0;
+	layer2Ctl->bufInfo.uvAddr0= LAYER2_UV_BASEaddr0;
+	layer2Ctl->bufInfo.uvAddr1= LAYER2_UV_BASEaddr0;
+	layer2Ctl->bufInfo.hsize_stride= VIDEO_LAYER2_RD_STRIDE/8-1;//2048;//0xff;//;
+	layer2Ctl->bufInfo.vsize_stride= 0xef;//0;//0x437;//0;
+	layer2Ctl->layerMix_en = TRUE;
+	layer2Ctl->layerMix_glbalp = 0xff;
+	//layer3
+	VO_LAYER_CTL_INFO_S *layer3Ctl = &voCtl->layer3Ctl;
+	layer3Ctl->layer_en = TRUE;
+	layer3Ctl->endiany = VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
+	layer3Ctl->endianuv = VO_VIDEO_LAYER_UV_ENDIAN_MODE2;
+	layer3Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
+	layer3Ctl->uvswap = FALSE;//TRUE;
+	layer3Ctl->active_size.Width = 320;//1920;
+	layer3Ctl->active_size.Height = 240;//1080;
+	layer3Ctl->ctl_offset.Width = 198;
+	layer3Ctl->ctl_offset.Height = 42;
+	layer3Ctl->size_offset.Width = 0x0;
+	layer3Ctl->size_offset.Height = 0x0;
+	layer3Ctl->bufInfo.yAddr0= 0x22000000;//LAYER2_Y_BASEAddr0;
+	layer3Ctl->bufInfo.yAddr1= 0x22000000;//LAYER2_Y_BASEAddr0;
+	layer3Ctl->bufInfo.uvAddr0= 0x22400000;//LAYER2_UV_BASEaddr0;
+	layer3Ctl->bufInfo.uvAddr1= 0x22400000;//LAYER2_UV_BASEaddr0;
+	layer3Ctl->bufInfo.hsize_stride= 0xff;//2048;//0xff;//VIDEO_LAYER2_RD_STRIDE;
+	layer3Ctl->bufInfo.vsize_stride= 0xef;//0;//0x437;//0;
+	layer3Ctl->layerMix_en = TRUE;
+	layer3Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_LAYER_OSD_CTL_INFO_S *layer4osd0Ctl = &voCtl->layer4osd0Ctl;
+	layer4osd0Ctl->layer_en = FALSE;
+	layer4osd0Ctl->osdrgb2yuvEn = TRUE;
+	layer4osd0Ctl->layerMix_en = TRUE;
+	layer4osd0Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_LAYER_OSD_CTL_INFO_S *layer5osd1Ctl = &voCtl->layer5osd1Ctl;
+	layer5osd1Ctl->layer_en = FALSE;
+	layer5osd1Ctl->osdrgb2yuvEn = TRUE;
+	layer5osd1Ctl->layerMix_en = TRUE;
+	layer5osd1Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_LAYER_OSD_CTL_INFO_S *layer6osd2Ctl = &voCtl->layer6osd2Ctl;
+	layer6osd2Ctl->layer_en = FALSE;
+	layer6osd2Ctl->osdrgb2yuvEn = TRUE;
+	layer6osd2Ctl->layerMix_en = TRUE;
+	layer6osd2Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_DISP_BACK_GROUD_INFO_S *dispBackGroudInfo = &voCtl->dispBackGroudInfo;
+	dispBackGroudInfo->y = 0x00;
+	dispBackGroudInfo->u = 0x80;
+	dispBackGroudInfo->v = 0x80;
+	//
+	voCtl->yuv2rgb_ctl_en = TRUE;
+	voCtl->ditherctlen = TRUE;
+	voCtl->clutctlen = FALSE;
+	return 0;
 }
 /************************************************************************
-*ALL_LAYERS*
-*************************************************************************/
+ *ALL_LAYERS*
+ *************************************************************************/
 static int VO_TEST_LAYER_420_DS_FRAME_DRAW_YUV420_GetCtl(VO_CTL_S *voCtl)
 {
-    VO_CHECK_POINTER(voCtl);
-    memset(voCtl,0x0,sizeof(voCtl));
-    //
-    VO_DISP_CTL_INFO_S *dispCtl= &voCtl->dispCtl;
-    dispCtl->Disp_en = TRUE;
-    dispCtl->SyncMode = VO_SYSTEM_MODE_1920x1080x30P;
-    dispCtl->total_size.Width = 0x898;
-    dispCtl->total_size.Height = 0x465;
-    dispCtl->disp_start.Width = VIDEO_DISP_ZONE_X_START;
-    dispCtl->disp_stop.Width = VIDEO_DISP_ZONE_X_STOP;
-    dispCtl->disp_start.Height = VIDEO_DISP_ZONE_Y_START;
-    dispCtl->disp_stop.Height = VIDEO_DISP_ZONE_Y_STOP;
-    //
-    VO_LAYER_CTL_INFO_S *layer0Ctl = &voCtl->layer0Ctl;
-    layer0Ctl->layer_en = TRUE;
-    layer0Ctl->layer0_mfbd_en = FALSE;
-    layer0Ctl->endiany = VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
-    layer0Ctl->endianuv = VO_VIDEO_LAYER_UV_ENDIAN_MODE3;//VO_VIDEO_LAYER_UV_ENDIAN_MODE3
-    layer0Ctl->uvswap = FALSE;//TRUE;
-    layer0Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
-    layer0Ctl->active_size.Width = VIDEO_LAYER0_H_IN_SIZE;//1920;
-    layer0Ctl->active_size.Height = VIDEO_LAYER0_V_IN_SIZE;//1080;
-    layer0Ctl->out_size.Width = VIDEO_LAYER0_H_OUT_SIZE; //1920
-    layer0Ctl->out_size.Height = VIDEO_LAYER0_V_OUT_SIZE; //1080
-    layer0Ctl->ctl_offset.Width = VIDEO_LAYER0_H_POSITION;//198;
-    layer0Ctl->ctl_offset.Height = VIDEO_LAYER0_V_POSITION;//42;
-    layer0Ctl->size_offset.Width = 0x0;
-    layer0Ctl->size_offset.Height = 0x0;
-    layer0Ctl->bufInfo.yAddr0= LAYER0_Y_BASEAddr0;
-    layer0Ctl->bufInfo.yAddr1= LAYER0_Y_BASEAddr1;
-    layer0Ctl->bufInfo.uvAddr0= LAYER0_UV_BASEaddr0;
-    layer0Ctl->bufInfo.uvAddr1= LAYER0_UV_BASEaddr1;
-    layer0Ctl->bufInfo.hsize_stride= 2048;//VIDEO_LAYER2_RD_STRIDE;
-    layer0Ctl->bufInfo.vsize_stride= 0x0;//0;
-    layer0Ctl->layerMix_en = TRUE;
-    layer0Ctl->layerMix_glbalp = 0xff;
-    //LAYER1
-    VO_LAYER_CTL_INFO_S *layer1Ctl = &voCtl->layer1Ctl;
-    layer1Ctl->layer_en = TRUE;
-    layer1Ctl->endiany = VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
-    layer1Ctl->endianuv = VO_VIDEO_LAYER_UV_ENDIAN_MODE2;
-    layer1Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
-    layer1Ctl->uvswap = TRUE;
-    layer1Ctl->active_size.Width = 320;
-    layer1Ctl->active_size.Height = 240;
-    layer1Ctl->ctl_offset.Width = 198;
-    layer1Ctl->ctl_offset.Height = 800;
-    layer1Ctl->size_offset.Width = 0x0;
-    layer1Ctl->size_offset.Height = 0x0;
-    layer1Ctl->bufInfo.yAddr0= LAYER1_Y_BASEAddr0;
-    layer1Ctl->bufInfo.yAddr1= LAYER1_Y_BASEAddr0;
-    layer1Ctl->bufInfo.uvAddr0= LAYER1_UV_BASEaddr0;
-    layer1Ctl->bufInfo.uvAddr1= LAYER1_UV_BASEaddr0;
-    layer1Ctl->bufInfo.hsize_stride= 2048;//VIDEO_LAYER2_RD_STRIDE;
-    layer1Ctl->bufInfo.vsize_stride= 0x0;//0;
-    layer1Ctl->layerMix_en = TRUE;
-    layer1Ctl->layerMix_glbalp = 0xff;
-    //LAYER2
-    VO_LAYER_CTL_INFO_S *layer2Ctl = &voCtl->layer2Ctl;
-    layer2Ctl->layer_en = TRUE;
-    layer2Ctl->endiany = VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
-    layer2Ctl->endianuv = VO_VIDEO_LAYER_UV_ENDIAN_MODE2;
-    layer2Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
-    layer2Ctl->uvswap = TRUE;
-    layer2Ctl->active_size.Width = 320;
-    layer2Ctl->active_size.Height = 240;
-    layer2Ctl->ctl_offset.Width = 1100;
-    layer2Ctl->ctl_offset.Height = 800;
-    layer2Ctl->size_offset.Width = 0x0;
-    layer2Ctl->size_offset.Height = 0x0;
-    layer2Ctl->bufInfo.yAddr0= LAYER2_Y_BASEAddr0;
-    layer2Ctl->bufInfo.yAddr1= LAYER2_Y_BASEAddr0;
-    layer2Ctl->bufInfo.uvAddr0= LAYER2_UV_BASEaddr0;
-    layer2Ctl->bufInfo.uvAddr1= LAYER2_UV_BASEaddr0;
-    layer2Ctl->bufInfo.hsize_stride= 2048;//VIDEO_LAYER2_RD_STRIDE;
-    layer2Ctl->bufInfo.vsize_stride= 0x0;//0;
-    layer2Ctl->layerMix_en = TRUE;
-    layer2Ctl->layerMix_glbalp = 0xff;
-    //LAYER3
-    VO_LAYER_CTL_INFO_S *layer3Ctl = &voCtl->layer3Ctl;
-    layer3Ctl->layer_en = FALSE;
-    layer3Ctl->layerMix_en = TRUE;
-    layer3Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_LAYER_OSD_CTL_INFO_S *layer4osd0Ctl = &voCtl->layer4osd0Ctl;
-    layer4osd0Ctl->layer_en = FALSE;
-    layer4osd0Ctl->osdrgb2yuvEn = TRUE;
-    layer4osd0Ctl->layerMix_en = TRUE;
-    layer4osd0Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_LAYER_OSD_CTL_INFO_S *layer5osd1Ctl = &voCtl->layer5osd1Ctl;
-    layer5osd1Ctl->layer_en = FALSE;
-    layer5osd1Ctl->osdrgb2yuvEn = TRUE;
-    layer5osd1Ctl->layerMix_en = TRUE;
-    layer5osd1Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_LAYER_OSD_CTL_INFO_S *layer6osd2Ctl = &voCtl->layer6osd2Ctl;
-    layer6osd2Ctl->layer_en = FALSE;
-    layer6osd2Ctl->osdrgb2yuvEn = TRUE;
-    layer6osd2Ctl->layerMix_en = TRUE;
-    layer6osd2Ctl->layerMix_glbalp = 0xff;
-    //
-    VO_DISP_BACK_GROUD_INFO_S *dispBackGroudInfo = &voCtl->dispBackGroudInfo;
-    dispBackGroudInfo->y = 0x00;
-    dispBackGroudInfo->u = 0x80;
-    dispBackGroudInfo->v = 0x80;
-    //
-    voCtl->yuv2rgb_ctl_en = FALSE;
-    voCtl->ditherctlen = TRUE;
-    voCtl->clutctlen = FALSE;
-
-    return 0;
+	VO_CHECK_POINTER(voCtl);
+	memset(voCtl,0x0,sizeof(voCtl));
+	//
+	VO_DISP_CTL_INFO_S *dispCtl= &voCtl->dispCtl;
+	dispCtl->Disp_en = TRUE;
+	dispCtl->SyncMode = VO_SYSTEM_MODE_1920x1080x30P;
+	dispCtl->total_size.Width = 0x898;
+	dispCtl->total_size.Height = 0x465;
+	dispCtl->disp_start.Width = VIDEO_DISP_ZONE_X_START;
+	dispCtl->disp_stop.Width = VIDEO_DISP_ZONE_X_STOP;
+	dispCtl->disp_start.Height = VIDEO_DISP_ZONE_Y_START;
+	dispCtl->disp_stop.Height = VIDEO_DISP_ZONE_Y_STOP;
+	//
+	VO_LAYER_CTL_INFO_S *layer0Ctl = &voCtl->layer0Ctl;
+	layer0Ctl->layer_en = TRUE;
+	layer0Ctl->layer0_mfbd_en = FALSE;
+	layer0Ctl->endiany = VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
+	layer0Ctl->endianuv = VO_VIDEO_LAYER_UV_ENDIAN_MODE3;//VO_VIDEO_LAYER_UV_ENDIAN_MODE3
+	layer0Ctl->uvswap = FALSE;//TRUE;
+	layer0Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
+	layer0Ctl->active_size.Width = VIDEO_LAYER0_H_IN_SIZE;//1920;
+	layer0Ctl->active_size.Height = VIDEO_LAYER0_V_IN_SIZE;//1080;
+	layer0Ctl->out_size.Width = VIDEO_LAYER0_H_OUT_SIZE; //1920
+	layer0Ctl->out_size.Height = VIDEO_LAYER0_V_OUT_SIZE; //1080
+	layer0Ctl->ctl_offset.Width = VIDEO_LAYER0_H_POSITION;//198;
+	layer0Ctl->ctl_offset.Height = VIDEO_LAYER0_V_POSITION;//42;
+	layer0Ctl->size_offset.Width = 0x0;
+	layer0Ctl->size_offset.Height = 0x0;
+	layer0Ctl->bufInfo.yAddr0= LAYER0_Y_BASEAddr0;
+	layer0Ctl->bufInfo.yAddr1= LAYER0_Y_BASEAddr1;
+	layer0Ctl->bufInfo.uvAddr0= LAYER0_UV_BASEaddr0;
+	layer0Ctl->bufInfo.uvAddr1= LAYER0_UV_BASEaddr1;
+	layer0Ctl->bufInfo.hsize_stride= 2048;//VIDEO_LAYER2_RD_STRIDE;
+	layer0Ctl->bufInfo.vsize_stride= 0x0;//0;
+	layer0Ctl->layerMix_en = TRUE;
+	layer0Ctl->layerMix_glbalp = 0xff;
+	//LAYER1
+	VO_LAYER_CTL_INFO_S *layer1Ctl = &voCtl->layer1Ctl;
+	layer1Ctl->layer_en = TRUE;
+	layer1Ctl->endiany = VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
+	layer1Ctl->endianuv = VO_VIDEO_LAYER_UV_ENDIAN_MODE2;
+	layer1Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
+	layer1Ctl->uvswap = TRUE;
+	layer1Ctl->active_size.Width = 320;
+	layer1Ctl->active_size.Height = 240;
+	layer1Ctl->ctl_offset.Width = 198;
+	layer1Ctl->ctl_offset.Height = 800;
+	layer1Ctl->size_offset.Width = 0x0;
+	layer1Ctl->size_offset.Height = 0x0;
+	layer1Ctl->bufInfo.yAddr0= LAYER1_Y_BASEAddr0;
+	layer1Ctl->bufInfo.yAddr1= LAYER1_Y_BASEAddr0;
+	layer1Ctl->bufInfo.uvAddr0= LAYER1_UV_BASEaddr0;
+	layer1Ctl->bufInfo.uvAddr1= LAYER1_UV_BASEaddr0;
+	layer1Ctl->bufInfo.hsize_stride= 2048;//VIDEO_LAYER2_RD_STRIDE;
+	layer1Ctl->bufInfo.vsize_stride= 0x0;//0;
+	layer1Ctl->layerMix_en = TRUE;
+	layer1Ctl->layerMix_glbalp = 0xff;
+	//LAYER2
+	VO_LAYER_CTL_INFO_S *layer2Ctl = &voCtl->layer2Ctl;
+	layer2Ctl->layer_en = TRUE;
+	layer2Ctl->endiany = VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
+	layer2Ctl->endianuv = VO_VIDEO_LAYER_UV_ENDIAN_MODE2;
+	layer2Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
+	layer2Ctl->uvswap = TRUE;
+	layer2Ctl->active_size.Width = 320;
+	layer2Ctl->active_size.Height = 240;
+	layer2Ctl->ctl_offset.Width = 1100;
+	layer2Ctl->ctl_offset.Height = 800;
+	layer2Ctl->size_offset.Width = 0x0;
+	layer2Ctl->size_offset.Height = 0x0;
+	layer2Ctl->bufInfo.yAddr0= LAYER2_Y_BASEAddr0;
+	layer2Ctl->bufInfo.yAddr1= LAYER2_Y_BASEAddr0;
+	layer2Ctl->bufInfo.uvAddr0= LAYER2_UV_BASEaddr0;
+	layer2Ctl->bufInfo.uvAddr1= LAYER2_UV_BASEaddr0;
+	layer2Ctl->bufInfo.hsize_stride= 2048;//VIDEO_LAYER2_RD_STRIDE;
+	layer2Ctl->bufInfo.vsize_stride= 0x0;//0;
+	layer2Ctl->layerMix_en = TRUE;
+	layer2Ctl->layerMix_glbalp = 0xff;
+	//LAYER3
+	VO_LAYER_CTL_INFO_S *layer3Ctl = &voCtl->layer3Ctl;
+	layer3Ctl->layer_en = FALSE;
+	layer3Ctl->layerMix_en = TRUE;
+	layer3Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_LAYER_OSD_CTL_INFO_S *layer4osd0Ctl = &voCtl->layer4osd0Ctl;
+	layer4osd0Ctl->layer_en = FALSE;
+	layer4osd0Ctl->osdrgb2yuvEn = TRUE;
+	layer4osd0Ctl->layerMix_en = TRUE;
+	layer4osd0Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_LAYER_OSD_CTL_INFO_S *layer5osd1Ctl = &voCtl->layer5osd1Ctl;
+	layer5osd1Ctl->layer_en = FALSE;
+	layer5osd1Ctl->osdrgb2yuvEn = TRUE;
+	layer5osd1Ctl->layerMix_en = TRUE;
+	layer5osd1Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_LAYER_OSD_CTL_INFO_S *layer6osd2Ctl = &voCtl->layer6osd2Ctl;
+	layer6osd2Ctl->layer_en = FALSE;
+	layer6osd2Ctl->osdrgb2yuvEn = TRUE;
+	layer6osd2Ctl->layerMix_en = TRUE;
+	layer6osd2Ctl->layerMix_glbalp = 0xff;
+	//
+	VO_DISP_BACK_GROUD_INFO_S *dispBackGroudInfo = &voCtl->dispBackGroudInfo;
+	dispBackGroudInfo->y = 0x00;
+	dispBackGroudInfo->u = 0x80;
+	dispBackGroudInfo->v = 0x80;
+	//
+	voCtl->yuv2rgb_ctl_en = FALSE;
+	voCtl->ditherctlen = TRUE;
+	voCtl->clutctlen = FALSE;
+
+	return 0;
 }
 /************************************************************************
-**
-*************************************************************************/
+ **
+ *************************************************************************/
 static int VO_Test_Layer0_1080P_IN_1080P_OUT_BT1120_GetCtl(VO_CTL_S *voCtl)
 {
-    VO_CHECK_POINTER(voCtl);
-    memset(voCtl,0x0,sizeof(voCtl));
-    //
-    VO_DISP_CTL_INFO_S *dispCtl= &voCtl->dispCtl;
-    dispCtl->Disp_en = TRUE;
-    dispCtl->SyncMode = VO_SYSTEM_MODE_1920x1080x30P;
-    dispCtl->total_size.Width = 0x898;
-    dispCtl->total_size.Height = 0x465;
-    dispCtl->disp_start.Width = VIDEO_DISP_ZONE_X_START;
-    dispCtl->disp_stop.Width = VIDEO_DISP_ZONE_X_STOP;
-    dispCtl->disp_start.Height = VIDEO_DISP_ZONE_Y_START;
-    dispCtl->disp_stop.Height = VIDEO_DISP_ZONE_Y_STOP;
-    //
-    VO_LAYER_CTL_INFO_S *layer0Ctl = &voCtl->layer0Ctl;
-    layer0Ctl->layer_en = FALSE;
-    //LAYER1
-    VO_LAYER_CTL_INFO_S *layer1Ctl = &voCtl->layer1Ctl;
-    layer1Ctl->layer_en = FALSE;
-    //LAYER2
-    VO_LAYER_CTL_INFO_S *layer2Ctl = &voCtl->layer2Ctl;
-    layer2Ctl->layer_en = TRUE;
-    layer2Ctl->endiany = VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
-    layer2Ctl->endianuv = VO_VIDEO_LAYER_UV_ENDIAN_MODE3;
-    layer2Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
-    layer2Ctl->uvswap = TRUE;
-    layer2Ctl->active_size.Width = 1920;
-    layer2Ctl->active_size.Height = 1080;
-    layer2Ctl->ctl_offset.Width = 198;
-    layer2Ctl->ctl_offset.Height = 42;
-    layer2Ctl->size_offset.Width = 0x0;
-    layer2Ctl->size_offset.Height = 0x0;
-    layer2Ctl->bufInfo.yAddr0= LAYER0_Y_BASEAddr0;
-    layer2Ctl->bufInfo.yAddr1= LAYER0_Y_BASEAddr0;
-    layer2Ctl->bufInfo.uvAddr0= LAYER0_UV_BASEaddr0;
-    layer2Ctl->bufInfo.uvAddr1= LAYER0_UV_BASEaddr0;
-    layer2Ctl->bufInfo.hsize_stride= 2048;//0xff;//VIDEO_LAYER2_RD_STRIDE;
-    layer2Ctl->bufInfo.vsize_stride= 0x0;//0x437;//0;  
-    //LAYER3
-    VO_LAYER_CTL_INFO_S *layer3Ctl = &voCtl->layer3Ctl;
-    layer3Ctl->layer_en = FALSE;
-    //
-    VO_LAYER_OSD_CTL_INFO_S   *layer4osd0Ctl = &voCtl->layer4osd0Ctl;
-    layer4osd0Ctl->layer_en = TRUE;
-    layer4osd0Ctl->osdrgb2yuvEn = TRUE;
-    layer4osd0Ctl->osdtype = OSD_MONOCHROME_8BIT;
-    layer4osd0Ctl->alphatpye = OSD_FIXED_VALUE;
-    layer4osd0Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
-    layer4osd0Ctl->active_size.Width = 320;
-    layer4osd0Ctl->active_size.Height = 240;
-    layer4osd0Ctl->ctl_offset.Width = 400;
-    layer4osd0Ctl->ctl_offset.Height = 200;
-    layer4osd0Ctl->osdBufInfo.alp_addr0= 0x20000000;
-    layer4osd0Ctl->osdBufInfo.alp_addr1= 0x20000000;
-    layer4osd0Ctl->osdBufInfo.alpstride= 2048/8;
-    layer4osd0Ctl->osdBufInfo.vlu_addr0= 0x20000000;
-    layer4osd0Ctl->osdBufInfo.vlu_addr1= 0x20000000;
-    layer4osd0Ctl->osdBufInfo.osdstride= 2048/8;
-    //
-    VO_LAYER_OSD_CTL_INFO_S   *layer5osd1Ctl = &voCtl->layer5osd1Ctl;
-    layer5osd1Ctl->layer_en = TRUE;
-    layer5osd1Ctl->osdrgb2yuvEn = FALSE;
-    layer5osd1Ctl->osdtype = OSD_MONOCHROME_8BIT;
-    layer5osd1Ctl->alphatpye = OSD_FIXED_VALUE;
-    layer5osd1Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
-    layer5osd1Ctl->active_size.Width = 216;
-    layer5osd1Ctl->active_size.Height = 172;
-    layer5osd1Ctl->ctl_offset.Width = 800;
-    layer5osd1Ctl->ctl_offset.Height = 200;
-    layer5osd1Ctl->osdBufInfo.alp_addr0= 0x20200000;
-    layer5osd1Ctl->osdBufInfo.alp_addr1= 0x20200000;
-    layer5osd1Ctl->osdBufInfo.alpstride= 2048/8;
-    layer5osd1Ctl->osdBufInfo.vlu_addr0= 0x20200000;
-    layer5osd1Ctl->osdBufInfo.vlu_addr1= 0x20200000;
-    layer5osd1Ctl->osdBufInfo.osdstride= 2048/8;
-    //
-    VO_LAYER_OSD_CTL_INFO_S *layer6osd2Ctl = &voCtl->layer6osd2Ctl;
-    layer6osd2Ctl->layer_en = FALSE;
-    //
-    VO_DISP_BACK_GROUD_INFO_S *dispBackGroudInfo = &voCtl->dispBackGroudInfo;
-    dispBackGroudInfo->y = 0x80;
-    dispBackGroudInfo->u = 0x80;
-    dispBackGroudInfo->v = 0x80;
-    //
-    voCtl->yuv2rgb_ctl_en = TRUE;
-    voCtl->ditherctlen = TRUE;
-    voCtl->clutctlen = FALSE;
-    return 0; 
+	VO_CHECK_POINTER(voCtl);
+	memset(voCtl,0x0,sizeof(voCtl));
+	//
+	VO_DISP_CTL_INFO_S *dispCtl= &voCtl->dispCtl;
+	dispCtl->Disp_en = TRUE;
+	dispCtl->SyncMode = VO_SYSTEM_MODE_1920x1080x30P;
+	dispCtl->total_size.Width = 0x898;
+	dispCtl->total_size.Height = 0x465;
+	dispCtl->disp_start.Width = VIDEO_DISP_ZONE_X_START;
+	dispCtl->disp_stop.Width = VIDEO_DISP_ZONE_X_STOP;
+	dispCtl->disp_start.Height = VIDEO_DISP_ZONE_Y_START;
+	dispCtl->disp_stop.Height = VIDEO_DISP_ZONE_Y_STOP;
+	//
+	VO_LAYER_CTL_INFO_S *layer0Ctl = &voCtl->layer0Ctl;
+	layer0Ctl->layer_en = FALSE;
+	//LAYER1
+	VO_LAYER_CTL_INFO_S *layer1Ctl = &voCtl->layer1Ctl;
+	layer1Ctl->layer_en = FALSE;
+	//LAYER2
+	VO_LAYER_CTL_INFO_S *layer2Ctl = &voCtl->layer2Ctl;
+	layer2Ctl->layer_en = TRUE;
+	layer2Ctl->endiany = VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
+	layer2Ctl->endianuv = VO_VIDEO_LAYER_UV_ENDIAN_MODE3;
+	layer2Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
+	layer2Ctl->uvswap = TRUE;
+	layer2Ctl->active_size.Width = 1920;
+	layer2Ctl->active_size.Height = 1080;
+	layer2Ctl->ctl_offset.Width = 198;
+	layer2Ctl->ctl_offset.Height = 42;
+	layer2Ctl->size_offset.Width = 0x0;
+	layer2Ctl->size_offset.Height = 0x0;
+	layer2Ctl->bufInfo.yAddr0= LAYER0_Y_BASEAddr0;
+	layer2Ctl->bufInfo.yAddr1= LAYER0_Y_BASEAddr0;
+	layer2Ctl->bufInfo.uvAddr0= LAYER0_UV_BASEaddr0;
+	layer2Ctl->bufInfo.uvAddr1= LAYER0_UV_BASEaddr0;
+	layer2Ctl->bufInfo.hsize_stride= 2048;//0xff;//VIDEO_LAYER2_RD_STRIDE;
+	layer2Ctl->bufInfo.vsize_stride= 0x0;//0x437;//0;
+	//LAYER3
+	VO_LAYER_CTL_INFO_S *layer3Ctl = &voCtl->layer3Ctl;
+	layer3Ctl->layer_en = FALSE;
+	//
+	VO_LAYER_OSD_CTL_INFO_S   *layer4osd0Ctl = &voCtl->layer4osd0Ctl;
+	layer4osd0Ctl->layer_en = TRUE;
+	layer4osd0Ctl->osdrgb2yuvEn = TRUE;
+	layer4osd0Ctl->osdtype = OSD_MONOCHROME_8BIT;
+	layer4osd0Ctl->alphatpye = OSD_FIXED_VALUE;
+	layer4osd0Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
+	layer4osd0Ctl->active_size.Width = 320;
+	layer4osd0Ctl->active_size.Height = 240;
+	layer4osd0Ctl->ctl_offset.Width = 400;
+	layer4osd0Ctl->ctl_offset.Height = 200;
+	layer4osd0Ctl->osdBufInfo.alp_addr0= 0x20000000;
+	layer4osd0Ctl->osdBufInfo.alp_addr1= 0x20000000;
+	layer4osd0Ctl->osdBufInfo.alpstride= 2048/8;
+	layer4osd0Ctl->osdBufInfo.vlu_addr0= 0x20000000;
+	layer4osd0Ctl->osdBufInfo.vlu_addr1= 0x20000000;
+	layer4osd0Ctl->osdBufInfo.osdstride= 2048/8;
+	//
+	VO_LAYER_OSD_CTL_INFO_S   *layer5osd1Ctl = &voCtl->layer5osd1Ctl;
+	layer5osd1Ctl->layer_en = TRUE;
+	layer5osd1Ctl->osdrgb2yuvEn = FALSE;
+	layer5osd1Ctl->osdtype = OSD_MONOCHROME_8BIT;
+	layer5osd1Ctl->alphatpye = OSD_FIXED_VALUE;
+	layer5osd1Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
+	layer5osd1Ctl->active_size.Width = 216;
+	layer5osd1Ctl->active_size.Height = 172;
+	layer5osd1Ctl->ctl_offset.Width = 800;
+	layer5osd1Ctl->ctl_offset.Height = 200;
+	layer5osd1Ctl->osdBufInfo.alp_addr0= 0x20200000;
+	layer5osd1Ctl->osdBufInfo.alp_addr1= 0x20200000;
+	layer5osd1Ctl->osdBufInfo.alpstride= 2048/8;
+	layer5osd1Ctl->osdBufInfo.vlu_addr0= 0x20200000;
+	layer5osd1Ctl->osdBufInfo.vlu_addr1= 0x20200000;
+	layer5osd1Ctl->osdBufInfo.osdstride= 2048/8;
+	//
+	VO_LAYER_OSD_CTL_INFO_S *layer6osd2Ctl = &voCtl->layer6osd2Ctl;
+	layer6osd2Ctl->layer_en = FALSE;
+	//
+	VO_DISP_BACK_GROUD_INFO_S *dispBackGroudInfo = &voCtl->dispBackGroudInfo;
+	dispBackGroudInfo->y = 0x80;
+	dispBackGroudInfo->u = 0x80;
+	dispBackGroudInfo->v = 0x80;
+	//
+	voCtl->yuv2rgb_ctl_en = TRUE;
+	voCtl->ditherctlen = TRUE;
+	voCtl->clutctlen = FALSE;
+	return 0;
 }
 /************************************************************************
-**
-*************************************************************************/
+ **
+ *************************************************************************/
 static int VO_TestLayer0_1080x1920_DSI_LINE_DRAW_GetCtl(VO_CTL_S *voCtl)
 {
-    VO_CHECK_POINTER(voCtl);
-    memset(voCtl,0x0,sizeof(voCtl));
-    //
-    VO_DISP_CTL_INFO_S *dispCtl= &voCtl->dispCtl;
-    dispCtl->Disp_en = TRUE;
-    dispCtl->SyncMode = VO_SYSTEM_MODE_1920x1080x30P;
-    dispCtl->total_size.Width = 0x898;
-    dispCtl->total_size.Height = 0x465;
-    dispCtl->disp_start.Width = 46;//VIDEO_DISP_ZONE_X_START;
-    dispCtl->disp_stop.Width = 46 + 1080;//VIDEO_DISP_ZONE_X_STOP;
-    dispCtl->disp_start.Height = 14;//VIDEO_DISP_ZONE_Y_START;
-    dispCtl->disp_stop.Height = 14 + 1920;//VIDEO_DISP_ZONE_Y_STOP;
-    //
-    VO_LAYER_CTL_INFO_S *layer0Ctl = &voCtl->layer0Ctl;
-    layer0Ctl->layer_en = TRUE;
-    layer0Ctl->layer0_mfbd_en = FALSE;
-    layer0Ctl->endiany = VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
-    layer0Ctl->endianuv = VO_VIDEO_LAYER_UV_ENDIAN_MODE2;//VO_VIDEO_LAYER_UV_ENDIAN_MODE3
-    layer0Ctl->uvswap = FALSE;//TRUE;
-    layer0Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
-    layer0Ctl->active_size.Width = 1080;//VIDEO_LAYER0_H_IN_SIZE;//1920;
-    layer0Ctl->active_size.Height = 1920;//VIDEO_LAYER0_V_IN_SIZE;//1080;
-    layer0Ctl->out_size.Width = 1080;//VIDEO_LAYER0_H_OUT_SIZE; //1920
-    layer0Ctl->out_size.Height = 1920;//VIDEO_LAYER0_V_OUT_SIZE; //1080
-    layer0Ctl->ctl_offset.Width = 46;//VIDEO_LAYER0_H_POSITION;//198;
-    layer0Ctl->ctl_offset.Height = 14;//VIDEO_LAYER0_V_POSITION;//42;
-    layer0Ctl->size_offset.Width = 0x0;
-    layer0Ctl->size_offset.Height = 0x0;
-    layer0Ctl->bufInfo.yAddr0= LAYER0_Y_BASEAddr0;
-    layer0Ctl->bufInfo.yAddr1= LAYER0_Y_BASEAddr1;
-    layer0Ctl->bufInfo.uvAddr0= LAYER0_UV_BASEaddr0;
-    layer0Ctl->bufInfo.uvAddr1= LAYER0_UV_BASEaddr1;
-    layer0Ctl->bufInfo.hsize_stride= 1080;//VIDEO_LAYER2_RD_STRIDE;
-    layer0Ctl->bufInfo.vsize_stride= 0x0;//0;
-    //LAYER1
-    VO_LAYER_CTL_INFO_S *layer1Ctl = &voCtl->layer1Ctl;
-    layer1Ctl->layer_en = FALSE;
-    //LAYER2
-    VO_LAYER_CTL_INFO_S *layer2Ctl = &voCtl->layer2Ctl;
-    layer2Ctl->layer_en = FALSE;
-    //LAYER3
-    VO_LAYER_CTL_INFO_S *layer3Ctl = &voCtl->layer3Ctl;
-    layer3Ctl->layer_en = FALSE;
-    //
-    VO_LAYER_OSD_CTL_INFO_S *layer4osd0Ctl = &voCtl->layer4osd0Ctl;
-    layer4osd0Ctl->layer_en = FALSE;
-    //
-    VO_LAYER_OSD_CTL_INFO_S *layer5osd1Ctl = &voCtl->layer5osd1Ctl;
-    layer5osd1Ctl->layer_en = FALSE;
-    //
-    VO_LAYER_OSD_CTL_INFO_S *layer6osd2Ctl = &voCtl->layer6osd2Ctl;
-    layer6osd2Ctl->layer_en = FALSE;
-    //
-    VO_DISP_BACK_GROUD_INFO_S *dispBackGroudInfo = &voCtl->dispBackGroudInfo;
-    dispBackGroudInfo->y = 0xff;
-    dispBackGroudInfo->u = 0xff;
-    dispBackGroudInfo->v = 0xff;
-    //
-    voCtl->yuv2rgb_ctl_en = TRUE;
-    voCtl->ditherctlen = TRUE;
-    voCtl->clutctlen = FALSE;    
-    return 0;
+	VO_CHECK_POINTER(voCtl);
+	memset(voCtl,0x0,sizeof(voCtl));
+	//
+	VO_DISP_CTL_INFO_S *dispCtl= &voCtl->dispCtl;
+	dispCtl->Disp_en = TRUE;
+	dispCtl->SyncMode = VO_SYSTEM_MODE_1920x1080x30P;
+	dispCtl->total_size.Width = 0x898;
+	dispCtl->total_size.Height = 0x465;
+	dispCtl->disp_start.Width = 46;//VIDEO_DISP_ZONE_X_START;
+	dispCtl->disp_stop.Width = 46 + 1080;//VIDEO_DISP_ZONE_X_STOP;
+	dispCtl->disp_start.Height = 14;//VIDEO_DISP_ZONE_Y_START;
+	dispCtl->disp_stop.Height = 14 + 1920;//VIDEO_DISP_ZONE_Y_STOP;
+	//
+	VO_LAYER_CTL_INFO_S *layer0Ctl = &voCtl->layer0Ctl;
+	layer0Ctl->layer_en = TRUE;
+	layer0Ctl->layer0_mfbd_en = FALSE;
+	layer0Ctl->endiany = VO_VIDEO_LAYER_Y_ENDIAN_MODE1;
+	layer0Ctl->endianuv = VO_VIDEO_LAYER_UV_ENDIAN_MODE2;//VO_VIDEO_LAYER_UV_ENDIAN_MODE3
+	layer0Ctl->uvswap = FALSE;//TRUE;
+	layer0Ctl->ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
+	layer0Ctl->active_size.Width = 1080;//VIDEO_LAYER0_H_IN_SIZE;//1920;
+	layer0Ctl->active_size.Height = 1920;//VIDEO_LAYER0_V_IN_SIZE;//1080;
+	layer0Ctl->out_size.Width = 1080;//VIDEO_LAYER0_H_OUT_SIZE; //1920
+	layer0Ctl->out_size.Height = 1920;//VIDEO_LAYER0_V_OUT_SIZE; //1080
+	layer0Ctl->ctl_offset.Width = 46;//VIDEO_LAYER0_H_POSITION;//198;
+	layer0Ctl->ctl_offset.Height = 14;//VIDEO_LAYER0_V_POSITION;//42;
+	layer0Ctl->size_offset.Width = 0x0;
+	layer0Ctl->size_offset.Height = 0x0;
+	layer0Ctl->bufInfo.yAddr0= LAYER0_Y_BASEAddr0;
+	layer0Ctl->bufInfo.yAddr1= LAYER0_Y_BASEAddr1;
+	layer0Ctl->bufInfo.uvAddr0= LAYER0_UV_BASEaddr0;
+	layer0Ctl->bufInfo.uvAddr1= LAYER0_UV_BASEaddr1;
+	layer0Ctl->bufInfo.hsize_stride= 1080;//VIDEO_LAYER2_RD_STRIDE;
+	layer0Ctl->bufInfo.vsize_stride= 0x0;//0;
+	//LAYER1
+	VO_LAYER_CTL_INFO_S *layer1Ctl = &voCtl->layer1Ctl;
+	layer1Ctl->layer_en = FALSE;
+	//LAYER2
+	VO_LAYER_CTL_INFO_S *layer2Ctl = &voCtl->layer2Ctl;
+	layer2Ctl->layer_en = FALSE;
+	//LAYER3
+	VO_LAYER_CTL_INFO_S *layer3Ctl = &voCtl->layer3Ctl;
+	layer3Ctl->layer_en = FALSE;
+	//
+	VO_LAYER_OSD_CTL_INFO_S *layer4osd0Ctl = &voCtl->layer4osd0Ctl;
+	layer4osd0Ctl->layer_en = FALSE;
+	//
+	VO_LAYER_OSD_CTL_INFO_S *layer5osd1Ctl = &voCtl->layer5osd1Ctl;
+	layer5osd1Ctl->layer_en = FALSE;
+	//
+	VO_LAYER_OSD_CTL_INFO_S *layer6osd2Ctl = &voCtl->layer6osd2Ctl;
+	layer6osd2Ctl->layer_en = FALSE;
+	//
+	VO_DISP_BACK_GROUD_INFO_S *dispBackGroudInfo = &voCtl->dispBackGroudInfo;
+	dispBackGroudInfo->y = 0xff;
+	dispBackGroudInfo->u = 0xff;
+	dispBackGroudInfo->v = 0xff;
+	//
+	voCtl->yuv2rgb_ctl_en = TRUE;
+	voCtl->ditherctlen = TRUE;
+	voCtl->clutctlen = FALSE;
+	return 0;
 }
 /************************************************************************
-*ALL_LAYERS*
-*************************************************************************/
+ *ALL_LAYERS*
+ *************************************************************************/
 /*
-*
-*/
+ *
+ */
 static int VO_TEST_ALL_LAYERS(VO_CTL_S *voCtl,VO_CORE_INFO_S *voCoreInfo)
 {
-    VO_CHECK_POINTER(voCtl);
-    VO_CHECK_POINTER(voCoreInfo);
-
-    memset(voCoreInfo,0x0,sizeof(voCoreInfo));
-
-    VO_DISP_MIX_INFO_S  *dispMixCtlInfo = &voCoreInfo->dispMixCtlInfo;
-    //
-    //unsigned int disp_En = TRUE;
-    VO_DISP_CTL_INFO_S  *dispCtl = &voCtl->dispCtl;
-    VO_DISP_INFO_S *dispInfo = &voCoreInfo->dispInfo;
-    VO_TEST_SetDisp(dispCtl,dispInfo);
-    //LAYER0
-    VO_LAYER_CTL_INFO_S *layer0Ctl = &voCtl->layer0Ctl;
-    VO_LAYER0_INFO_S *layer0Info = &voCoreInfo->layer0Info;
-    VO_MIX_INFO_S *layer0MixInfo = &dispMixCtlInfo->layerMixInfo[0];
-    VO_TEST_SetLayer0(layer0Ctl,layer0Info,layer0MixInfo);
-    //LAYER1
-    VO_LAYER_CTL_INFO_S *layer1Ctl = &voCtl->layer1Ctl;
-    VO_LAYER1_INFO_S *layer1Info = &voCoreInfo->layer1Info;
-    VO_MIX_INFO_S *layer1MixInfo = &dispMixCtlInfo->layerMixInfo[1];
-    VO_TEST_SetLayer1(layer1Ctl,layer1Info,layer1MixInfo);
-    //LAYER2
-    VO_LAYER_CTL_INFO_S *layer2Ctl = &voCtl->layer2Ctl;
-    VO_LAYER2_INFO_S *layer2Info = &voCoreInfo->layer2Info;
-    VO_MIX_INFO_S *layer2MixInfo = &dispMixCtlInfo->layerMixInfo[2];
-    VO_TEST_SetLayer2(layer2Ctl,layer2Info,layer2MixInfo);
-    //LAYER3
-    VO_LAYER_CTL_INFO_S *layer3Ctl = &voCtl->layer3Ctl;
-    VO_LAYER3_INFO_S *layer3Info = &voCoreInfo->layer3Info;
-    VO_MIX_INFO_S *layer3MixInfo = &dispMixCtlInfo->layerMixInfo[3];
-    VO_TEST_SetLayer3(layer3Ctl,layer3Info,layer3MixInfo);
-    //LAYER4OSD0
-    VO_LAYER_OSD_CTL_INFO_S *layer4osd0Ctl = &voCtl->layer4osd0Ctl;
-    VO_OSD0_INFO_S *osd0Info = &voCoreInfo->osd0Info;
-    VO_MIX_INFO_S *layer4osd0MixInfo = &dispMixCtlInfo->layerMixInfo[4];
-    VO_TEST_SetLayer4Osd0(layer4osd0Ctl,osd0Info,layer4osd0MixInfo);
-    //LAYER5OSD1
-    VO_LAYER_OSD_CTL_INFO_S *layer5osd1Ctl = &voCtl->layer5osd1Ctl;
-    VO_OSD1_INFO_S *osd1Info = &voCoreInfo->osd1Info;
-    VO_MIX_INFO_S *layer5osd1MixInfo = &dispMixCtlInfo->layerMixInfo[5];
-    VO_TEST_SetLayer5Osd1(layer5osd1Ctl,osd1Info,layer5osd1MixInfo);
-    //LAYER6OSD2
-    VO_LAYER_OSD_CTL_INFO_S *layer6osd2Ctl= &voCtl->layer6osd2Ctl;
-    VO_OSD2_INFO_S *osd2Info = &voCoreInfo->osd2Info;
-    VO_MIX_INFO_S *layer6osd2MixInfo = &dispMixCtlInfo->layerMixInfo[6];
-    VO_TEST_SetLayer6Osd2(layer6osd2Ctl,osd2Info,layer6osd2MixInfo);
-    //
-    unsigned int yuv2rgb_ctl_en = voCtl->yuv2rgb_ctl_en;//FALSE;
-    VO_YUV2RGB_INFO_S *yuv2rgbInfo  = &voCoreInfo->yuv2rgbInfo;
-    VO_TEST_SetYuv2RgbInfo(yuv2rgb_ctl_en,yuv2rgbInfo);
-    //
-    VO_OSD_RGB2YUV_INFO_S *osdRgb2YuvInfo = &voCoreInfo->osdRgb2YuvInfo;
-    VO_TEST_SetOsdRgb2YuvInfo(osdRgb2YuvInfo);
-    //
-    VO_DISP_BACK_GROUD_INFO_S *dispBackGroudInfo = &dispMixCtlInfo->dispBackGroudInfo;
-    dispBackGroudInfo->y = voCtl->dispBackGroudInfo.y;//0x00;
-    dispBackGroudInfo->u = voCtl->dispBackGroudInfo.u;//0xff;//0x80;
-    dispBackGroudInfo->v = voCtl->dispBackGroudInfo.v;//0x00;//0x80;
-    //
-    voCoreInfo->ditherctlen = voCtl->ditherctlen ;//TRUE;
-    voCoreInfo->clutctlen = voCtl->clutctlen ;//FALSE; //gamma
-    //
-    VO_WB_Y_INFO_S *wbInfo= &voCoreInfo->wbInfo;
-
-    return 0;
+	VO_CHECK_POINTER(voCtl);
+	VO_CHECK_POINTER(voCoreInfo);
+
+	memset(voCoreInfo,0x0,sizeof(voCoreInfo));
+
+	VO_DISP_MIX_INFO_S  *dispMixCtlInfo = &voCoreInfo->dispMixCtlInfo;
+	//
+	//unsigned int disp_En = TRUE;
+	VO_DISP_CTL_INFO_S  *dispCtl = &voCtl->dispCtl;
+	VO_DISP_INFO_S *dispInfo = &voCoreInfo->dispInfo;
+	VO_TEST_SetDisp(dispCtl,dispInfo);
+	//LAYER0
+	VO_LAYER_CTL_INFO_S *layer0Ctl = &voCtl->layer0Ctl;
+	VO_LAYER0_INFO_S *layer0Info = &voCoreInfo->layer0Info;
+	VO_MIX_INFO_S *layer0MixInfo = &dispMixCtlInfo->layerMixInfo[0];
+	VO_TEST_SetLayer0(layer0Ctl,layer0Info,layer0MixInfo);
+	//LAYER1
+	VO_LAYER_CTL_INFO_S *layer1Ctl = &voCtl->layer1Ctl;
+	VO_LAYER1_INFO_S *layer1Info = &voCoreInfo->layer1Info;
+	VO_MIX_INFO_S *layer1MixInfo = &dispMixCtlInfo->layerMixInfo[1];
+	VO_TEST_SetLayer1(layer1Ctl,layer1Info,layer1MixInfo);
+	//LAYER2
+	VO_LAYER_CTL_INFO_S *layer2Ctl = &voCtl->layer2Ctl;
+	VO_LAYER2_INFO_S *layer2Info = &voCoreInfo->layer2Info;
+	VO_MIX_INFO_S *layer2MixInfo = &dispMixCtlInfo->layerMixInfo[2];
+	VO_TEST_SetLayer2(layer2Ctl,layer2Info,layer2MixInfo);
+	//LAYER3
+	VO_LAYER_CTL_INFO_S *layer3Ctl = &voCtl->layer3Ctl;
+	VO_LAYER3_INFO_S *layer3Info = &voCoreInfo->layer3Info;
+	VO_MIX_INFO_S *layer3MixInfo = &dispMixCtlInfo->layerMixInfo[3];
+	VO_TEST_SetLayer3(layer3Ctl,layer3Info,layer3MixInfo);
+	//LAYER4OSD0
+	VO_LAYER_OSD_CTL_INFO_S *layer4osd0Ctl = &voCtl->layer4osd0Ctl;
+	VO_OSD0_INFO_S *osd0Info = &voCoreInfo->osd0Info;
+	VO_MIX_INFO_S *layer4osd0MixInfo = &dispMixCtlInfo->layerMixInfo[4];
+	VO_TEST_SetLayer4Osd0(layer4osd0Ctl,osd0Info,layer4osd0MixInfo);
+	//LAYER5OSD1
+	VO_LAYER_OSD_CTL_INFO_S *layer5osd1Ctl = &voCtl->layer5osd1Ctl;
+	VO_OSD1_INFO_S *osd1Info = &voCoreInfo->osd1Info;
+	VO_MIX_INFO_S *layer5osd1MixInfo = &dispMixCtlInfo->layerMixInfo[5];
+	VO_TEST_SetLayer5Osd1(layer5osd1Ctl,osd1Info,layer5osd1MixInfo);
+	//LAYER6OSD2
+	VO_LAYER_OSD_CTL_INFO_S *layer6osd2Ctl= &voCtl->layer6osd2Ctl;
+	VO_OSD2_INFO_S *osd2Info = &voCoreInfo->osd2Info;
+	VO_MIX_INFO_S *layer6osd2MixInfo = &dispMixCtlInfo->layerMixInfo[6];
+	VO_TEST_SetLayer6Osd2(layer6osd2Ctl,osd2Info,layer6osd2MixInfo);
+	//
+	unsigned int yuv2rgb_ctl_en = voCtl->yuv2rgb_ctl_en;//FALSE;
+	VO_YUV2RGB_INFO_S *yuv2rgbInfo  = &voCoreInfo->yuv2rgbInfo;
+	VO_TEST_SetYuv2RgbInfo(yuv2rgb_ctl_en,yuv2rgbInfo);
+	//
+	VO_OSD_RGB2YUV_INFO_S *osdRgb2YuvInfo = &voCoreInfo->osdRgb2YuvInfo;
+	VO_TEST_SetOsdRgb2YuvInfo(osdRgb2YuvInfo);
+	//
+	VO_DISP_BACK_GROUD_INFO_S *dispBackGroudInfo = &dispMixCtlInfo->dispBackGroudInfo;
+	dispBackGroudInfo->y = voCtl->dispBackGroudInfo.y;//0x00;
+	dispBackGroudInfo->u = voCtl->dispBackGroudInfo.u;//0xff;//0x80;
+	dispBackGroudInfo->v = voCtl->dispBackGroudInfo.v;//0x00;//0x80;
+	//
+	voCoreInfo->ditherctlen = voCtl->ditherctlen ;//TRUE;
+	voCoreInfo->clutctlen = voCtl->clutctlen ;//FALSE; //gamma
+	//
+	VO_WB_Y_INFO_S *wbInfo= &voCoreInfo->wbInfo;
+
+	return 0;
 }
 /************************************************************************
-**
-*************************************************************************/
+ **
+ *************************************************************************/
 static int VO_TEST_Core(VO_TEST_CASE_E voTestCase,VO_CORE_INFO_S *voCoreInfo)
 {
-    VO_CHECK_POINTER(voCoreInfo);
-    //printf("zhudalei:VO_TEST_Core start!!!\n");
-    VO_CTL_S voCtl;
-    switch(voTestCase)
-    {
-        case VO_BT1120_HDMI_BRINGUP:
-            //use background only to bringup VO/BT1120/HDMI path
+	VO_CHECK_POINTER(voCoreInfo);
+	//printf("zhudalei:VO_TEST_Core start!!!\n");
+	VO_CTL_S voCtl;
+	switch(voTestCase)
+	{
+		case VO_BT1120_HDMI_BRINGUP:
+			//use background only to bringup VO/BT1120/HDMI path
 			//Need poweron bt1120 daughter board?
-            VO_TEST_BRINGUP_BT1120_GetCtl(&voCtl);
-            break;
-        case VO_DSI_MIPI_BRINGUP:
-            //use background only to bringup VO/DSI/DPHY.
-            //aml550_power_on_seq();
-
-            VO_TEST_BRINGUP_DSI_GetCtl(&voCtl);
-            break;
-        case VO_DSI_MIPI_800x1280 :
-
-            VO_TEST_800x1280_GetCtl(&voCtl);
-            break;
-        case LAYER0_420_IRS238C:
-            VO_TEST_IRS238C_GetCtl(&voCtl);
-           // VO_TEST_IRS238C(&voCtl,voCoreInfo);
-            break;            
-        case VO_CASE_LAYER0_420_1920x1080_1920x1080_ENDIAN:
-            VO_TEST_LAYER0_1920x1080_YUV420_GetCtl(&voCtl);
-            //VO_TEST_LAYER0_1920x1080(&voCtl,voCoreInfo);
-            break;
-        case LAYER0_420_1920x1080_1280x720_YUV420:
-            VO_TEST_LAYER0_1920x1080_YUV420_1280x720_GetCtl(&voCtl);
-            //VO_TEST_LAYER0_1920x1080(&voCtl,voCoreInfo);
-            break;
-        case LAYER1_420_1920x1080_YUV420:
-            VO_TEST_LAYER1_1920x1080_YUV420_GetCtl(&voCtl);
-            //VO_TEST_LAYER1_1920x1080(&voCtl,voCoreInfo);
-            break;
-        case LAYER2_420_1920x1080_YUV420:
-            //ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
-            VO_TEST_LAYER2_1920x1080_YUV420_GetCtl(&voCtl);
-            //VO_TEST_LAYER2_1920x1080(&voCtl,voCoreInfo);
-            break;
-        case LAYER2_420_DS0_1080x720_YUV420:
-            VO_TEST_LAYER2_DS0_1080x720_YUV420_GetCtl(&voCtl);
-            //VO_TEST_LAYER2_DS0_1080x720(&voCtl,voCoreInfo);
-            break;
-        case LAYER_420_DS_OUT_ALL_YUV420:
-            VO_TEST_LAYER_420_DS_OUT_ALL_YUV420_GetCtl(&voCtl);
-            //VO_TEST_LAYER_420_DS_OUT_ALL_YUV420(&voCtl,voCoreInfo);
-            //VO_TEST_ALL_LAYERS(&voCtl,voCoreInfo);
-            break;
-        case LAYER_420_DS_FRAME_DRAW_YUV420:
-            VO_TEST_LAYER_420_DS_FRAME_DRAW_YUV420_GetCtl(&voCtl);
-            break;
-        case VO_CASE_LAYER0_MFBD:
-        	VO_TEST_LAYER0_MFBD_GetCtl(&voCtl);
-        	break;
-        case LAYER0_420_BT1120:
-            VO_Test_Layer0_1080P_IN_1080P_OUT_BT1120_GetCtl(&voCtl);
-            break;
-        case LAYER0_420_1080x1920_YUV420_DSI:
-            VO_TestLayer0_1080x1920_DSI_LINE_DRAW_GetCtl(&voCtl);
-            break;
-        case VO_CASE_LAYER0_LINE_DRAW:
-        	VO_TEST_LAYER0_1920x1080_YUV420_GetCtl(&voCtl);
-        	break;
-        case VO_CASE_LAYER0_420_1280x720_1920x1080:
-        	VO_TEST_LAYER0_1280x720_YUV420_GetCtl(&voCtl);
-        	break;
-        case VO_CASE_LAYER0_420_F23S_IRS238C:
-        	VO_TEST_LAYER0_IRS238C_GetCtl(&voCtl);
-        	break;
-        default:
-            break;
-    }
-    VO_TEST_ALL_LAYERS(&voCtl,voCoreInfo);
-    //
-    VO_DISP_IRQ_INFO_S *dispIrqInfo = &voCoreInfo->dispIrqInfo;
-    VO_TEST_SetDispIrqInfo(dispIrqInfo);
-    //
-    VO_TEST_SetCore(voCoreInfo);
-    //printf("zhudalei:VO_TEST_Core end!!!\n");
-    return 0;
+			VO_TEST_BRINGUP_BT1120_GetCtl(&voCtl);
+			break;
+		case VO_DSI_MIPI_BRINGUP:
+			//use background only to bringup VO/DSI/DPHY.
+			//aml550_power_on_seq();
+
+			VO_TEST_BRINGUP_DSI_GetCtl(&voCtl);
+			break;
+		case VO_DSI_MIPI_800x1280 :
+
+			VO_TEST_800x1280_GetCtl(&voCtl);
+			break;
+		case LAYER0_420_IRS238C:
+			VO_TEST_IRS238C_GetCtl(&voCtl);
+			// VO_TEST_IRS238C(&voCtl,voCoreInfo);
+			break;
+		case VO_CASE_LAYER0_420_1920x1080_1920x1080_ENDIAN:
+			VO_TEST_LAYER0_1920x1080_YUV420_GetCtl(&voCtl);
+			//VO_TEST_LAYER0_1920x1080(&voCtl,voCoreInfo);
+			break;
+		case LAYER0_420_1920x1080_1280x720_YUV420:
+			VO_TEST_LAYER0_1920x1080_YUV420_1280x720_GetCtl(&voCtl);
+			//VO_TEST_LAYER0_1920x1080(&voCtl,voCoreInfo);
+			break;
+		case LAYER1_420_1920x1080_YUV420:
+			VO_TEST_LAYER1_1920x1080_YUV420_GetCtl(&voCtl);
+			//VO_TEST_LAYER1_1920x1080(&voCtl,voCoreInfo);
+			break;
+		case LAYER2_420_1920x1080_YUV420:
+			//ImgInDataMode = VO_VIDEO_LAYER_YUV_MODE_420;
+			VO_TEST_LAYER2_1920x1080_YUV420_GetCtl(&voCtl);
+			//VO_TEST_LAYER2_1920x1080(&voCtl,voCoreInfo);
+			break;
+		case LAYER2_420_DS0_1080x720_YUV420:
+			VO_TEST_LAYER2_DS0_1080x720_YUV420_GetCtl(&voCtl);
+			//VO_TEST_LAYER2_DS0_1080x720(&voCtl,voCoreInfo);
+			break;
+		case LAYER_420_DS_OUT_ALL_YUV420:
+			VO_TEST_LAYER_420_DS_OUT_ALL_YUV420_GetCtl(&voCtl);
+			//VO_TEST_LAYER_420_DS_OUT_ALL_YUV420(&voCtl,voCoreInfo);
+			//VO_TEST_ALL_LAYERS(&voCtl,voCoreInfo);
+			break;
+		case LAYER_420_DS_FRAME_DRAW_YUV420:
+			VO_TEST_LAYER_420_DS_FRAME_DRAW_YUV420_GetCtl(&voCtl);
+			break;
+		case VO_CASE_LAYER0_MFBD:
+			VO_TEST_LAYER0_MFBD_GetCtl(&voCtl);
+			break;
+		case LAYER0_420_BT1120:
+			VO_Test_Layer0_1080P_IN_1080P_OUT_BT1120_GetCtl(&voCtl);
+			break;
+		case LAYER0_420_1080x1920_YUV420_DSI:
+			VO_TestLayer0_1080x1920_DSI_LINE_DRAW_GetCtl(&voCtl);
+			break;
+		case VO_CASE_LAYER0_LINE_DRAW:
+			VO_TEST_LAYER0_1920x1080_YUV420_GetCtl(&voCtl);
+			break;
+		case VO_CASE_LAYER0_420_1280x720_1920x1080:
+			VO_TEST_LAYER0_1280x720_YUV420_GetCtl(&voCtl);
+			break;
+		case VO_CASE_LAYER0_420_F23S_IRS238C:
+			VO_TEST_LAYER0_IRS238C_GetCtl(&voCtl);
+			break;
+		default:
+			break;
+	}
+	VO_TEST_ALL_LAYERS(&voCtl,voCoreInfo);
+	//
+	VO_DISP_IRQ_INFO_S *dispIrqInfo = &voCoreInfo->dispIrqInfo;
+	VO_TEST_SetDispIrqInfo(dispIrqInfo);
+	//
+	VO_TEST_SetCore(voCoreInfo);
+	//printf("zhudalei:VO_TEST_Core end!!!\n");
+	return 0;
 }
 /******************************************************************************
  *  wrap *
-******************************************************************************/
+ ******************************************************************************/
 static int VO_TEST_Wrap(void)
 {
-    VO_TEST_SetWrap();  
-    return 0;
+	VO_TEST_SetWrap();
+	return 0;
 }
 /******************************************************************************
  *  REMAP *
-******************************************************************************/
+ ******************************************************************************/
 /*
-*DSI
-*/
+ *DSI
+ */
 static int VO_TEST_Remap_DSI_Setcmd(VO_REMAP_CMD_INFO_S *CmdInfo)
 {
-    VO_CHECK_POINTER(CmdInfo);
-    CmdInfo->image_active_h = 0x437;
-    CmdInfo->fill_en_rgb = TRUE;
-    CmdInfo->image_active_v = 0x77f;
-    CmdInfo->fill_fill_en_yuv = FALSE;
-    return 0;
+	VO_CHECK_POINTER(CmdInfo);
+	CmdInfo->image_active_h = 0x437;
+	CmdInfo->fill_en_rgb = TRUE;
+	CmdInfo->image_active_v = 0x77f;
+	CmdInfo->fill_fill_en_yuv = FALSE;
+	return 0;
 }
 
 static int VO_TEST_Remap_DSI_SetArea0(VO_REMAP_CTRL_INFO_S *CtlInfo)
 {
-    VO_CHECK_POINTER(CtlInfo);
-
-    CtlInfo->line_draw_en 		= TRUE;
-    CtlInfo->v_line_r_en      	= TRUE;
-    CtlInfo->v_line_l_en      	= TRUE;
-    CtlInfo->h_line_b_en      	= TRUE;
-    CtlInfo->v_line_u_en      	= TRUE;
-    CtlInfo->line_start_pos_x 	= 256;
-    CtlInfo->line_end_pos_x	  	= CtlInfo->line_start_pos_x + 719;
-    CtlInfo->line_start_pos_y 	= 256;
-    CtlInfo->line_end_pos_y	  	= CtlInfo->line_start_pos_y + 240;
-    CtlInfo->line_width_l 		= 4;
-    CtlInfo->line_width_h 		= 0;
-    CtlInfo->fill_value_cr 		= 226;
-    CtlInfo->fill_value_cb 		= 104;
-    CtlInfo->fill_value_y  		= 47;
-    CtlInfo->fill_alpha  		= 0; 
-
-    return 0;
+	VO_CHECK_POINTER(CtlInfo);
+
+	CtlInfo->line_draw_en 		= TRUE;
+	CtlInfo->v_line_r_en      	= TRUE;
+	CtlInfo->v_line_l_en      	= TRUE;
+	CtlInfo->h_line_b_en      	= TRUE;
+	CtlInfo->v_line_u_en      	= TRUE;
+	CtlInfo->line_start_pos_x 	= 256;
+	CtlInfo->line_end_pos_x	  	= CtlInfo->line_start_pos_x + 719;
+	CtlInfo->line_start_pos_y 	= 256;
+	CtlInfo->line_end_pos_y	  	= CtlInfo->line_start_pos_y + 240;
+	CtlInfo->line_width_l 		= 4;
+	CtlInfo->line_width_h 		= 0;
+	CtlInfo->fill_value_cr 		= 226;
+	CtlInfo->fill_value_cb 		= 104;
+	CtlInfo->fill_value_y  		= 47;
+	CtlInfo->fill_alpha  		= 0;
+
+	return 0;
 }
 
 static int VO_TEST_Remap_DSI_SetArea1(VO_REMAP_CTRL_INFO_S *CtlInfo)
 {
-    VO_CHECK_POINTER(CtlInfo);
-
-    CtlInfo->line_draw_en 		= TRUE;
-    CtlInfo->v_line_r_en      	= TRUE;
-    CtlInfo->v_line_l_en      	= TRUE;
-    CtlInfo->h_line_b_en      	= TRUE;
-    CtlInfo->v_line_u_en      	= TRUE;
-    CtlInfo->line_start_pos_x 	= 356;
-    CtlInfo->line_end_pos_x	  	= CtlInfo->line_start_pos_x + 729;
-    CtlInfo->line_start_pos_y 	= 356;
-    CtlInfo->line_end_pos_y	  	= CtlInfo->line_start_pos_y + 240;
-    CtlInfo->line_width_l 		= 4;
-    CtlInfo->line_width_h 		= 0;
-    CtlInfo->fill_value_cr 		= 226;
-    CtlInfo->fill_value_cb 		= 104;
-    CtlInfo->fill_value_y  		= 47;
-    CtlInfo->fill_alpha  		= 0; 
-
-    return 0;
+	VO_CHECK_POINTER(CtlInfo);
+
+	CtlInfo->line_draw_en 		= TRUE;
+	CtlInfo->v_line_r_en      	= TRUE;
+	CtlInfo->v_line_l_en      	= TRUE;
+	CtlInfo->h_line_b_en      	= TRUE;
+	CtlInfo->v_line_u_en      	= TRUE;
+	CtlInfo->line_start_pos_x 	= 356;
+	CtlInfo->line_end_pos_x	  	= CtlInfo->line_start_pos_x + 729;
+	CtlInfo->line_start_pos_y 	= 356;
+	CtlInfo->line_end_pos_y	  	= CtlInfo->line_start_pos_y + 240;
+	CtlInfo->line_width_l 		= 4;
+	CtlInfo->line_width_h 		= 0;
+	CtlInfo->fill_value_cr 		= 226;
+	CtlInfo->fill_value_cb 		= 104;
+	CtlInfo->fill_value_y  		= 47;
+	CtlInfo->fill_alpha  		= 0;
+
+	return 0;
 }
 
 static int VO_TEST_Remap_DSI_SetArea2(VO_REMAP_CTRL_INFO_S *CtlInfo)
 {
-    VO_CHECK_POINTER(CtlInfo);
-
-    CtlInfo->line_draw_en 		= TRUE;
-    CtlInfo->v_line_r_en      	= TRUE;
-    CtlInfo->v_line_l_en      	= TRUE;
-    CtlInfo->h_line_b_en      	= TRUE;
-    CtlInfo->v_line_u_en      	= TRUE;
-    CtlInfo->line_start_pos_x 	= 456;
-    CtlInfo->line_end_pos_x	  	= CtlInfo->line_start_pos_x + 720;
-    CtlInfo->line_start_pos_y 	= 456;
-    CtlInfo->line_end_pos_y	  	= CtlInfo->line_start_pos_y + 239;
-    CtlInfo->line_width_l 		= 4;
-    CtlInfo->line_width_h 		= 0;
-    CtlInfo->fill_value_cr 		= 226;
-    CtlInfo->fill_value_cb 		= 104;
-    CtlInfo->fill_value_y  		= 47;
-    CtlInfo->fill_alpha  		= 0; 
-
-    return 0;
+	VO_CHECK_POINTER(CtlInfo);
+
+	CtlInfo->line_draw_en 		= TRUE;
+	CtlInfo->v_line_r_en      	= TRUE;
+	CtlInfo->v_line_l_en      	= TRUE;
+	CtlInfo->h_line_b_en      	= TRUE;
+	CtlInfo->v_line_u_en      	= TRUE;
+	CtlInfo->line_start_pos_x 	= 456;
+	CtlInfo->line_end_pos_x	  	= CtlInfo->line_start_pos_x + 720;
+	CtlInfo->line_start_pos_y 	= 456;
+	CtlInfo->line_end_pos_y	  	= CtlInfo->line_start_pos_y + 239;
+	CtlInfo->line_width_l 		= 4;
+	CtlInfo->line_width_h 		= 0;
+	CtlInfo->fill_value_cr 		= 226;
+	CtlInfo->fill_value_cb 		= 104;
+	CtlInfo->fill_value_y  		= 47;
+	CtlInfo->fill_alpha  		= 0;
+
+	return 0;
 }
 
 static int VO_TEST_Remap_DSI_SetArea3(VO_REMAP_CTRL_INFO_S *CtlInfo)
 {
-    VO_CHECK_POINTER(CtlInfo);
-
-    CtlInfo->line_draw_en 		= TRUE;
-    CtlInfo->v_line_r_en      	= TRUE;
-    CtlInfo->v_line_l_en      	= TRUE;
-    CtlInfo->h_line_b_en      	= TRUE;
-    CtlInfo->v_line_u_en      	= TRUE;
-    CtlInfo->line_start_pos_x 	= 555;
-    CtlInfo->line_end_pos_x	  	= CtlInfo->line_start_pos_x + 719;
-    CtlInfo->line_start_pos_y 	= 556;
-    CtlInfo->line_end_pos_y	  	= CtlInfo->line_start_pos_y + 239;
-    CtlInfo->line_width_l 		= 4;
-    CtlInfo->line_width_h 		= 0;
-    CtlInfo->fill_value_cr 		= 226;
-    CtlInfo->fill_value_cb 		= 104;
-    CtlInfo->fill_value_y  		= 47;
-    CtlInfo->fill_alpha  		= 0; 
-
-    return 0;
+	VO_CHECK_POINTER(CtlInfo);
+
+	CtlInfo->line_draw_en 		= TRUE;
+	CtlInfo->v_line_r_en      	= TRUE;
+	CtlInfo->v_line_l_en      	= TRUE;
+	CtlInfo->h_line_b_en      	= TRUE;
+	CtlInfo->v_line_u_en      	= TRUE;
+	CtlInfo->line_start_pos_x 	= 555;
+	CtlInfo->line_end_pos_x	  	= CtlInfo->line_start_pos_x + 719;
+	CtlInfo->line_start_pos_y 	= 556;
+	CtlInfo->line_end_pos_y	  	= CtlInfo->line_start_pos_y + 239;
+	CtlInfo->line_width_l 		= 4;
+	CtlInfo->line_width_h 		= 0;
+	CtlInfo->fill_value_cr 		= 226;
+	CtlInfo->fill_value_cb 		= 104;
+	CtlInfo->fill_value_y  		= 47;
+	CtlInfo->fill_alpha  		= 0;
+
+	return 0;
 }
 
 static int VO_TEST_Remap_DSI(VO_REMAP_INFO_S *voRemapInfo)
 {
-    VO_CHECK_POINTER(voRemapInfo);
-    unsigned int draw_num;
-    //
-    VO_REMAP_CMD_INFO_S *CmdInfo = &voRemapInfo->CmdInfo;
-    VO_TEST_Remap_DSI_Setcmd(CmdInfo);
-    //
-    draw_num = 0;
-    VO_REMAP_CTRL_INFO_S *CtlInfo = &voRemapInfo->CtlInfo[draw_num];
-    VO_TEST_Remap_DSI_SetArea0(CtlInfo);
-    VO_TEST_SetRemap(draw_num,voRemapInfo); 
-    msleep(10000); 
-    //
-    draw_num = 1;
-    CtlInfo = &voRemapInfo->CtlInfo[draw_num];
-    VO_TEST_Remap_DSI_SetArea1(CtlInfo);
-    VO_TEST_SetRemap(draw_num,voRemapInfo); 
-    msleep(10000); 
-    //
-    draw_num = 2;
-    CtlInfo = &voRemapInfo->CtlInfo[draw_num];
-    VO_TEST_Remap_DSI_SetArea2(CtlInfo);
-    VO_TEST_SetRemap(draw_num,voRemapInfo); 
-    msleep(10000); 
-    //
-    draw_num = 3;
-    CtlInfo = &voRemapInfo->CtlInfo[draw_num];
-    VO_TEST_Remap_DSI_SetArea3(CtlInfo);
-    VO_TEST_SetRemap(draw_num,voRemapInfo); 
-
-    return 0;
+	VO_CHECK_POINTER(voRemapInfo);
+	unsigned int draw_num;
+	//
+	VO_REMAP_CMD_INFO_S *CmdInfo = &voRemapInfo->CmdInfo;
+	VO_TEST_Remap_DSI_Setcmd(CmdInfo);
+	//
+	draw_num = 0;
+	VO_REMAP_CTRL_INFO_S *CtlInfo = &voRemapInfo->CtlInfo[draw_num];
+	VO_TEST_Remap_DSI_SetArea0(CtlInfo);
+	VO_TEST_SetRemap(draw_num,voRemapInfo);
+	msleep(10000);
+	//
+	draw_num = 1;
+	CtlInfo = &voRemapInfo->CtlInfo[draw_num];
+	VO_TEST_Remap_DSI_SetArea1(CtlInfo);
+	VO_TEST_SetRemap(draw_num,voRemapInfo);
+	msleep(10000);
+	//
+	draw_num = 2;
+	CtlInfo = &voRemapInfo->CtlInfo[draw_num];
+	VO_TEST_Remap_DSI_SetArea2(CtlInfo);
+	VO_TEST_SetRemap(draw_num,voRemapInfo);
+	msleep(10000);
+	//
+	draw_num = 3;
+	CtlInfo = &voRemapInfo->CtlInfo[draw_num];
+	VO_TEST_Remap_DSI_SetArea3(CtlInfo);
+	VO_TEST_SetRemap(draw_num,voRemapInfo);
+
+	return 0;
 }
 /*
-*
-*/
+ *
+ */
 static int VO_TEST_Remap_Main(VO_REMAP_INFO_S *voRemapInfo)
 {
-    VO_CHECK_POINTER(voRemapInfo);
-    unsigned int draw_num;
-    VO_REMAP_CTRL_INFO_S *CtlInfo = NULL;
-    //
-    VO_REMAP_CMD_INFO_S *CmdInfo = &voRemapInfo->CmdInfo;
-    CmdInfo->image_active_h = 0x77f;
-    CmdInfo->fill_en_rgb = FALSE;
-    CmdInfo->image_active_v = 0x437;
-    CmdInfo->fill_fill_en_yuv = TRUE;
-    //
-    for(draw_num = 0;draw_num<= 10; draw_num++)
-    {
-        CtlInfo = &voRemapInfo->CtlInfo[draw_num];
+	VO_CHECK_POINTER(voRemapInfo);
+	unsigned int draw_num;
+	VO_REMAP_CTRL_INFO_S *CtlInfo = NULL;
+	//
+	VO_REMAP_CMD_INFO_S *CmdInfo = &voRemapInfo->CmdInfo;
+	CmdInfo->image_active_h = 0x77f;
+	CmdInfo->fill_en_rgb = FALSE;
+	CmdInfo->image_active_v = 0x437;
+	CmdInfo->fill_fill_en_yuv = TRUE;
+	//
+	for(draw_num = 0;draw_num<= 10; draw_num++)
+	{
+		CtlInfo = &voRemapInfo->CtlInfo[draw_num];
 		CtlInfo->line_draw_en 		= TRUE;
 		CtlInfo->v_line_r_en      	= TRUE;
 		CtlInfo->v_line_l_en      	= TRUE;
@@ -3068,138 +3068,138 @@ static int VO_TEST_Remap_Main(VO_REMAP_INFO_S *voRemapInfo)
 		CtlInfo->fill_value_cr 		= 251;
 		CtlInfo->fill_value_cb 		= 98;
 		CtlInfo->fill_value_y  		= 70;
-		CtlInfo->fill_alpha  		= 0; 
-        VO_TEST_SetRemap(draw_num,voRemapInfo);
-        msleep(20);
-        printf("test ISP_DRV_CORE_MainDrawLineSet draw_num = %line_start_pos_x = %d!\n\n",draw_num,CtlInfo->line_start_pos_x);        
-    }
-    return 0;
+		CtlInfo->fill_alpha  		= 0;
+		VO_TEST_SetRemap(draw_num,voRemapInfo);
+		msleep(20);
+		printf("test ISP_DRV_CORE_MainDrawLineSet draw_num = %line_start_pos_x = %d!\n\n",draw_num,CtlInfo->line_start_pos_x);
+	}
+	return 0;
 }
 
 
 static int VO_TEST_Remap_Bringup(VO_REMAP_INFO_S *voRemapInfo)
 {
-    VO_CHECK_POINTER(voRemapInfo);
-    unsigned int draw_num;
-    VO_REMAP_CTRL_INFO_S *CtlInfo = NULL;
-    //
-    VO_REMAP_CMD_INFO_S *CmdInfo = &voRemapInfo->CmdInfo;
-    CmdInfo->image_active_h = 0x7f;
-    CmdInfo->fill_en_rgb = FALSE;
-    CmdInfo->image_active_v = 0x7f;
-    CmdInfo->fill_fill_en_yuv = TRUE;
-    //
-    for(draw_num = 0;draw_num<= 10; draw_num++)
-    {
-        CtlInfo = &voRemapInfo->CtlInfo[draw_num];
-        CtlInfo->line_draw_en       = TRUE;
-        CtlInfo->v_line_r_en        = TRUE;
-        CtlInfo->v_line_l_en        = TRUE;
-        CtlInfo->h_line_b_en        = TRUE;
-        CtlInfo->v_line_u_en        = TRUE;
-        CtlInfo->line_start_pos_x   = 5 + draw_num *5;
-        CtlInfo->line_end_pos_x     = CtlInfo->line_start_pos_x + 60;
-        CtlInfo->line_start_pos_y   = 5 + draw_num *5;
-        CtlInfo->line_end_pos_y     = CtlInfo->line_start_pos_y + 60;
-        CtlInfo->line_width_l       = 3;
-        CtlInfo->line_width_h       = 0;
-        CtlInfo->fill_value_cr      = 251;
-        CtlInfo->fill_value_cb      = 98;
-        CtlInfo->fill_value_y       = 70;
-        CtlInfo->fill_alpha         = 0; 
-        VO_TEST_SetRemap(draw_num,voRemapInfo);
-        msleep(20);
-        printf("test ISP_DRV_CORE_MainDrawLineSet draw_num = %line_start_pos_x = %d!\n\n",draw_num,CtlInfo->line_start_pos_x);        
-    }
-    return 0;
+	VO_CHECK_POINTER(voRemapInfo);
+	unsigned int draw_num;
+	VO_REMAP_CTRL_INFO_S *CtlInfo = NULL;
+	//
+	VO_REMAP_CMD_INFO_S *CmdInfo = &voRemapInfo->CmdInfo;
+	CmdInfo->image_active_h = 0x7f;
+	CmdInfo->fill_en_rgb = FALSE;
+	CmdInfo->image_active_v = 0x7f;
+	CmdInfo->fill_fill_en_yuv = TRUE;
+	//
+	for(draw_num = 0;draw_num<= 10; draw_num++)
+	{
+		CtlInfo = &voRemapInfo->CtlInfo[draw_num];
+		CtlInfo->line_draw_en       = TRUE;
+		CtlInfo->v_line_r_en        = TRUE;
+		CtlInfo->v_line_l_en        = TRUE;
+		CtlInfo->h_line_b_en        = TRUE;
+		CtlInfo->v_line_u_en        = TRUE;
+		CtlInfo->line_start_pos_x   = 5 + draw_num *5;
+		CtlInfo->line_end_pos_x     = CtlInfo->line_start_pos_x + 60;
+		CtlInfo->line_start_pos_y   = 5 + draw_num *5;
+		CtlInfo->line_end_pos_y     = CtlInfo->line_start_pos_y + 60;
+		CtlInfo->line_width_l       = 3;
+		CtlInfo->line_width_h       = 0;
+		CtlInfo->fill_value_cr      = 251;
+		CtlInfo->fill_value_cb      = 98;
+		CtlInfo->fill_value_y       = 70;
+		CtlInfo->fill_alpha         = 0;
+		VO_TEST_SetRemap(draw_num,voRemapInfo);
+		msleep(20);
+		printf("test ISP_DRV_CORE_MainDrawLineSet draw_num = %line_start_pos_x = %d!\n\n",draw_num,CtlInfo->line_start_pos_x);
+	}
+	return 0;
 }
 
 /*
-*
-*/
+ *
+ */
 static int VO_TEST_Remap(VO_TEST_CASE_E voTestCase,VO_REMAP_INFO_S *voRemapInfo)
 {
-    VO_CHECK_POINTER(voRemapInfo);
-
-    switch(voTestCase)
-    {
-        case LAYER0_420_1080x1920_YUV420_DSI:
-            VO_TEST_Remap_DSI(voRemapInfo);
-            break;
-        case VO_CASE_LAYER0_LINE_DRAW:
-            VO_TEST_Remap_Main(voRemapInfo);
-            break;
-        case VO_BT1120_HDMI_BRINGUP:
-            VO_TEST_Remap_Bringup(voRemapInfo);
-            break;
-        default:
-            break;
-    }
-    return 0;
+	VO_CHECK_POINTER(voRemapInfo);
+
+	switch(voTestCase)
+	{
+		case LAYER0_420_1080x1920_YUV420_DSI:
+			VO_TEST_Remap_DSI(voRemapInfo);
+			break;
+		case VO_CASE_LAYER0_LINE_DRAW:
+			VO_TEST_Remap_Main(voRemapInfo);
+			break;
+		case VO_BT1120_HDMI_BRINGUP:
+			VO_TEST_Remap_Bringup(voRemapInfo);
+			break;
+		default:
+			break;
+	}
+	return 0;
 }
 /*
-*/
+ */
 static int dsi_init(VO_TEST_CASE_E voTestCase)
 {
-    switch(voTestCase)
-    {
-        case VO_DSI_MIPI_BRINGUP:
-     //       aml550_power_on_seq();
-
-//            display_gpio_reset();
-            dsi_init_1080x1920();
-            break;
-        case VO_DSI_MIPI_800x1280:
-            dsi_init_800x1280();
-
-            break;
-
-        default:
-            break;
-    }
-    return 0;
+	switch(voTestCase)
+	{
+		case VO_DSI_MIPI_BRINGUP:
+			//       aml550_power_on_seq();
+
+			//            display_gpio_reset();
+			dsi_init_1080x1920();
+			break;
+		case VO_DSI_MIPI_800x1280:
+			dsi_init_800x1280();
+
+			break;
+
+		default:
+			break;
+	}
+	return 0;
 }
 
 /*
-*/
+ */
 int VO_TEST_VideoOut(VO_TEST_CASE_E voTestCase)
 {
-    int hpd_state = 0;
-    int lcd_id = 0;
-    VO_INFO_S voInfo;
-
-    //
-    VO_TEST_Init();
-    //table
-    VO_TABLE_init();
-    //wrap
-    VO_TEST_Wrap();
-    //core
-    VO_CORE_INFO_S *voCoreInfo = &voInfo.voCoreInfo;
-    VO_TEST_Core(voTestCase,voCoreInfo);
-
-    //enable dsi output
-    dsi_init(voTestCase);
-
-    hpd_state = lt9611_get_hpd_state();
-    lcd_id = get_lcd_id();
-    if (hpd_state) {
-        *(uint32_t *)0x92700118 = 0x80;
-        set_bootcmd("k510-hdmi.dtb");
-        display_switch_hdmi_gpio();
-    } else if (lcd_id == 0x0C9983 || lcd_id == 0x1C9983 || lcd_id == 0x46593) {
-        VO_TEST_Start();
-        char panel_id[16];
-        memset(panel_id, 0, sizeof(panel_id));
-        snprintf(panel_id, sizeof(panel_id), "0x%06X", lcd_id);
-        env_set("panel-id", panel_id);
-        set_bootcmd("k510.dtb");
-    } else {
-        *(uint32_t *)0x92700118 = 0x80;
-        set_bootcmd("k510-hdmi.dtb");
-        display_switch_hdmi_gpio();
-    }
-
-    VO_PRINTF_FUNC("Display Config done!\n");
-    return 0;
+	int hpd_state = 0;
+	int lcd_id = 0;
+	VO_INFO_S voInfo;
+
+	//
+	VO_TEST_Init();
+	//table
+	VO_TABLE_init();
+	//wrap
+	VO_TEST_Wrap();
+	//core
+	VO_CORE_INFO_S *voCoreInfo = &voInfo.voCoreInfo;
+	VO_TEST_Core(voTestCase,voCoreInfo);
+
+	//enable dsi output
+	dsi_init(voTestCase);
+
+	hpd_state = lt9611_get_hpd_state();
+	lcd_id = get_lcd_id();
+	if (hpd_state) {
+		*(uint32_t *)0x92700118 = 0x80;
+		set_bootcmd("k510-hdmi.dtb");
+		display_switch_hdmi_gpio();
+	} else if (lcd_id == 0x0C9983 || lcd_id == 0x1C9983 || lcd_id == 0x46593) {
+		VO_TEST_Start();
+		char panel_id[16];
+		memset(panel_id, 0, sizeof(panel_id));
+		snprintf(panel_id, sizeof(panel_id), "0x%06X", lcd_id);
+		env_set("panel-id", panel_id);
+		set_bootcmd("k510.dtb");
+	} else {
+		*(uint32_t *)0x92700118 = 0x80;
+		set_bootcmd("k510-hdmi.dtb");
+		display_switch_hdmi_gpio();
+	}
+
+	VO_PRINTF_FUNC("Display Config done!\n");
+	return 0;
 }
-- 
2.17.1

