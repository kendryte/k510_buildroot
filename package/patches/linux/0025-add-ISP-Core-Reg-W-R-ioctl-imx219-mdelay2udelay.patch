From f12828fc6ee8bc3af4489d285b395705f70b772e Mon Sep 17 00:00:00 2001
From: alex-guo <guoshidong@canaan-creative.com>
Date: Tue, 23 Aug 2022 23:26:38 +0800
Subject: [PATCH] add ISP Core Reg W-R ioctl imx219 mdelay2udelay

---
 .../canaan-isp/isp_2k/core/isp_core_drv.h     |  471 +++----
 .../canaan-isp/isp_2k/core/isp_core_reg.h     |   47 +-
 .../canaan-isp/isp_2k/core/isp_f2k_core_drv.c |  152 ++-
 .../canaan-isp/isp_2k/core/isp_r2k_core_drv.c |  120 +-
 .../platform/canaan-isp/isp_2k/isp_f2k.c      | 1115 +++++++++--------
 .../platform/canaan-isp/isp_2k/isp_r2k.c      | 1071 ++++++++--------
 include/uapi/linux/k510isp.h                  |   16 +-
 7 files changed, 1565 insertions(+), 1427 deletions(-)

diff --git a/drivers/media/platform/canaan-isp/isp_2k/core/isp_core_drv.h b/drivers/media/platform/canaan-isp/isp_2k/core/isp_core_drv.h
index 45dfc599..60a23d66 100755
--- a/drivers/media/platform/canaan-isp/isp_2k/core/isp_core_drv.h
+++ b/drivers/media/platform/canaan-isp/isp_2k/core/isp_core_drv.h
@@ -12,146 +12,146 @@
 
 typedef struct _ISP_CORE_ITC_CTL_S
 {
-    unsigned int    hsync_pol;           
-    unsigned int    vsync_pol;           
-    unsigned int    hsync_input_timing;  
+    unsigned int    hsync_pol;
+    unsigned int    vsync_pol;
+    unsigned int    hsync_input_timing;
     unsigned int    vsync_input_timing;
-    
-    unsigned int    mirror_ctl;         
-    unsigned int    video_format_ctl;   
-        
+
+    unsigned int    mirror_ctl;
+    unsigned int    video_format_ctl;
+
 } ISP_CORE_ITC_CTL_S;
 
 typedef struct _ISP_CORE_IMAGE_ATTR_S
 {
-    unsigned int  image_height;       
-    unsigned int  image_width;        
-    unsigned int  image_v_start;      
-    unsigned int  image_h_start;      
-    unsigned int  image_active_width; 
-    unsigned int  image_active_height; 
+    unsigned int  image_height;
+    unsigned int  image_width;
+    unsigned int  image_v_start;
+    unsigned int  image_h_start;
+    unsigned int  image_active_width;
+    unsigned int  image_active_height;
 } ISP_CORE_IMAGE_ATTR_S;
 
 typedef struct _ISP_CORE_TEST_CTL_S
 {
-    unsigned int    bayer_mode_sel;  
-    unsigned int    motion_mode_sel; 
+    unsigned int    bayer_mode_sel;
+    unsigned int    motion_mode_sel;
     unsigned int    test_pattern_sel;
     unsigned int    test_pattern_en;
-    
-    unsigned int    wdr_l_mul_data;  
-    unsigned int    wdr_m_mul_data;  
-    unsigned int    wdr_s_mul_data;  
-  
+
+    unsigned int    wdr_l_mul_data;
+    unsigned int    wdr_m_mul_data;
+    unsigned int    wdr_s_mul_data;
+
 } ISP_CORE_TEST_CTL_S;
 
 typedef struct _ISP_CORE_BLC_CTL_S
 {
-    unsigned int    blc_en;     
-    unsigned int    blc_offset; 
-    unsigned int    blc_ratio;  
+    unsigned int    blc_en;
+    unsigned int    blc_offset;
+    unsigned int    blc_ratio;
 } ISP_CORE_BLC_CTL_S;
 
 typedef struct _ISP_CORE_LSC_CTL_S
 {
-    unsigned int    lsc_en;           
-    unsigned int    lsc_h_center;     
-    unsigned int    lsc_v_center;     
+    unsigned int    lsc_en;
+    unsigned int    lsc_h_center;
+    unsigned int    lsc_v_center;
     unsigned int    lsc_red_ratio;
-    
-    unsigned int    lsc_green_ratio;  
-    unsigned int    lsc_blue_ratio;   
-    unsigned int    lsc_ir_ratio;     
+
+    unsigned int    lsc_green_ratio;
+    unsigned int    lsc_blue_ratio;
+    unsigned int    lsc_ir_ratio;
 } ISP_CORE_LSC_CTL_S;
 
 typedef struct _ISP_CORE_AE_CTL_S
 {
-    unsigned int       ae_as_en;              
-    unsigned int       ae_ag_en;              
-    unsigned int       ae_airis_en;           
+    unsigned int       ae_as_en;
+    unsigned int       ae_ag_en;
+    unsigned int       ae_airis_en;
     unsigned int       ae_enter_ls_sel;
-    
-    unsigned int       ae_exit_ls_sel;        
-    unsigned int       ae_win_mode_sel;       
+
+    unsigned int       ae_exit_ls_sel;
+    unsigned int       ae_win_mode_sel;
     unsigned int       ae_back_light_mode_sel;
-    unsigned int       ae_day_change_en;    
-    unsigned int       ae_day_change_sel;     
-    
+    unsigned int       ae_day_change_en;
+    unsigned int       ae_day_change_sel;
+
     unsigned int      ae_win_h_start;
     unsigned int      ae_win_v_start;
-    unsigned int      ae_win_h_end;  
-    unsigned int      ae_win_v_end;  
-        
-    unsigned int       ae_tar_bright;      
+    unsigned int      ae_win_h_end;
+    unsigned int      ae_win_v_end;
+
+    unsigned int       ae_tar_bright;
     unsigned int       ae_tar_bright_range;
-        
+
     unsigned int      ae_l_ex_time;
     unsigned int      ae_m_ex_time;
     unsigned int      ae_s_ex_time;
-        
-    unsigned int      ae_agc;            
+
+    unsigned int      ae_agc;
     unsigned int       ae_ad_shuttle_freq;
     unsigned int       ae_ad_gain_freq;
-    
+
     unsigned int       ae_adjust_step_max;
-        
-    unsigned int      ae_ex_value_max;  
-    unsigned int      ae_ex_value_mid;    
-    unsigned int      ae_ex_value_min; 
 
-    unsigned int      ae_gain_value_max;    
+    unsigned int      ae_ex_value_max;
+    unsigned int      ae_ex_value_mid;
+    unsigned int      ae_ex_value_min;
+
+    unsigned int      ae_gain_value_max;
     unsigned int      ae_gain_value_mid;
     unsigned int      ae_gain_value_min;
-    
+
     unsigned int      ae_dn_switch_ad_step_max;
     unsigned int       ae_dn_switch_wait_time;
     unsigned int       ape_max_diff;
-    
-    unsigned int      ape_drv_signal_max;    
-        
-    unsigned int       ape_coeff_distance;    
-    unsigned int       ape_coeff_speed;       
+
+    unsigned int      ape_drv_signal_max;
+
+    unsigned int       ape_coeff_distance;
+    unsigned int       ape_coeff_speed;
     unsigned int       ape_coeff_acceleration;
-        
-    unsigned int      ape_drv_manual_value;  
-    unsigned int      ape_damp_manual_value; 
+
+    unsigned int      ape_drv_manual_value;
+    unsigned int      ape_damp_manual_value;
 } ISP_CORE_AE_CTL_S;
 
 typedef struct _ISP_CORE_AE_STS_S
-{ 
+{
     unsigned int       ae_value_ready;
-    unsigned int      ae_long_cur_ex;     
-    unsigned int      ae_mid_cur_ex;      
-    unsigned int      ae_short_cur_ex;    
-    unsigned int      ae_digital_gain;    
-        
-    unsigned int       ave_brightness;     
+    unsigned int      ae_long_cur_ex;
+    unsigned int      ae_mid_cur_ex;
+    unsigned int      ae_short_cur_ex;
+    unsigned int      ae_digital_gain;
+
+    unsigned int       ave_brightness;
     unsigned int       ae_day_night_status;
-    unsigned int       ae_ex_status;       
-   
-    unsigned int        ae_sum;      
+    unsigned int       ae_ex_status;
+
+    unsigned int        ae_sum;
     unsigned int        ae_pixel_sum;
 } ISP_CORE_AE_STS_S;
 
 typedef struct _ISP_CORE_AWB_CTL_S
 {
-    unsigned int       awb_d65_en; 
-    unsigned int       awb_ccm_en; 
-    unsigned int       awb_en;     
+    unsigned int       awb_d65_en;
+    unsigned int       awb_ccm_en;
+    unsigned int       awb_en;
     unsigned int       awb_mode_sel;
-        
+
     unsigned int       awb_hist_mode_sel;
-    unsigned int       awb_veri_en;      
+    unsigned int       awb_veri_en;
     unsigned int       awb_fb_en;
     unsigned int       awb_value_save_en;
-        
+
     unsigned int       awb_ccm_adp_adjust_en;
-    unsigned int       awb_stab_en;          
+    unsigned int       awb_stab_en;
     unsigned int      awb_d65_red_gain;
-    
+
     unsigned int      awb_d65_blue_gain;
     unsigned int      ccm_rr_coff;
-    
+
     unsigned int       ccm_rg_coff;
     unsigned int       ccm_rb_coff;
     unsigned int       ccm_gr_coff;
@@ -159,26 +159,26 @@ typedef struct _ISP_CORE_AWB_CTL_S
     unsigned int       ccm_gb_coff;
     unsigned int       ccm_br_coff;
     unsigned int       ccm_bg_coff;
-    
-    unsigned int      ccm_bb_coff;     
+
+    unsigned int      ccm_bb_coff;
     unsigned int      ccm_correct_coff;
-        
+
     unsigned int      awb_win_h_start;
     unsigned int      awb_win_v_start;
-    unsigned int      awb_win_h_end;  
-    unsigned int      awb_win_v_end;  
-    
-    unsigned int       awb_correct_diff_th;     
+    unsigned int      awb_win_h_end;
+    unsigned int      awb_win_v_end;
+
+    unsigned int       awb_correct_diff_th;
     unsigned int       awb_color_changeres_time;
     unsigned int       awb_historgram_th;
-    
-    unsigned int      awb_red_gain_adjust;     
-    unsigned int      awb_green_gain_adjust;   
-    unsigned int      awb_blue_gain_adjust;    
+
+    unsigned int      awb_red_gain_adjust;
+    unsigned int      awb_green_gain_adjust;
+    unsigned int      awb_blue_gain_adjust;
     unsigned int      awb_red_max_value;
-    unsigned int      awb_blue_max_value;      
-    unsigned int      awb_red_min_value;       
-    
+    unsigned int      awb_blue_max_value;
+    unsigned int      awb_red_min_value;
+
     unsigned int      awb_blue_min_value;
     unsigned int      awb_red_obj_value;
     unsigned int      awb_blue_obj_value;
@@ -188,50 +188,50 @@ typedef struct _ISP_CORE_AWB_STS_S
 {
     unsigned int        awb_blue_hist_value;
     unsigned int      awb_blue_hist_pixel;
-        
-    unsigned int        awb_red_hist_value;        
-    unsigned int      awb_red_hist_pixel;        
+
+    unsigned int        awb_red_hist_value;
+    unsigned int      awb_red_hist_pixel;
     unsigned int      awb_bypass_blue_hist_value;
-        
+
     unsigned int      awb_bypass_blue_hist_pixel;
-    unsigned int        awb_bypass_red_hist_value; 
+    unsigned int        awb_bypass_red_hist_value;
     unsigned int      awb_bypass_red_hist_pixel;
-    
+
     unsigned int      awb_red_value;
     unsigned int      awb_green_value;
-    
-    unsigned int      awb_blue_value;            
-    unsigned int      awb_org_image_red_value; 
-    
+
+    unsigned int      awb_blue_value;
+    unsigned int      awb_org_image_red_value;
+
     unsigned int      awb_org_image_green_value;
     unsigned int      awb_org_image_blue_value;
 } ISP_CORE_AWB_STS_S;
 
 typedef struct _ISP_CORE_WDR_CTL_S
 {
-    unsigned int       wdr_fusion_en;      
-    unsigned int       wdr_frame_sel;      
-    unsigned int       wdr_adp_adjust_en;  
+    unsigned int       wdr_fusion_en;
+    unsigned int       wdr_frame_sel;
+    unsigned int       wdr_adp_adjust_en;
     unsigned int       wdr_stab_en;
-    
-    unsigned int       wdr_en;             
-    unsigned int       wdr_ghost_remove_en; 
+
+    unsigned int       wdr_en;
+    unsigned int       wdr_ghost_remove_en;
     unsigned int       wdr_3frame_out_mode;
     unsigned int       wdr_mode_sel;
-    
+
     unsigned int       wdr_2frame_ex_ratio;
-    unsigned int       wdr_3frame_ex_ratio; 
-    unsigned int       wdr_stat_img_sel;   
+    unsigned int       wdr_3frame_ex_ratio;
+    unsigned int       wdr_stat_img_sel;
     unsigned int       wdr_ltm_data_sel;
-    
+
     unsigned int       wdr_tz_data_sel;
     unsigned int       wdr_remove_purple_en;
     unsigned int       wdr_over_ex_ratio_th1;
-    
+
     unsigned int       wdr_over_ex_ratio_th2;
     unsigned int       wdr_fusion_ratio_th;
-    
-    unsigned int       wdr_fusion_value1;  
+
+    unsigned int       wdr_fusion_value1;
     unsigned int       wdr_fusion_value2;
 }ISP_CORE_WDR_CTL_S;
 
@@ -250,57 +250,57 @@ typedef struct _ISP_CORE_CSC_CTL_S
 
 typedef struct _ISP_CORE_ADA_CTL_S
 {
-    unsigned int       ada_rgb_gamma_en; 
-    unsigned int       ada_yuv_gamma_en; 
-    unsigned int       ada_adjust_en;    
+    unsigned int       ada_rgb_gamma_en;
+    unsigned int       ada_yuv_gamma_en;
+    unsigned int       ada_adjust_en;
     unsigned int       ada_img_stab_en;
-    
-    unsigned int       ada_ccr_en;       
-    unsigned int       ada_adp_en;       
-    unsigned int       ada_adp_ccr_en;   
+
+    unsigned int       ada_ccr_en;
+    unsigned int       ada_adp_en;
+    unsigned int       ada_adp_ccr_en;
     unsigned int       ada_stat_mode_sel;
-        
+
     unsigned int       ada_enh_mode_sel;
-    unsigned int       ada_stat_max_value; 
+    unsigned int       ada_stat_max_value;
     unsigned int       ada_ad_stren_max_value;
-     
+
     unsigned int      ada_win_h_start;
     unsigned int      ada_win_v_start;
-    unsigned int      ada_win_h_end;  
-    unsigned int      ada_win_v_end;  
+    unsigned int      ada_win_h_end;
+    unsigned int      ada_win_v_end;
 
 } ISP_CORE_ADA_CTL_S;
 
 typedef struct _ISP_CORE_RGBIR_CTL_S
 {
-    unsigned int    rgbir_en;        
-    unsigned int    rgbir_rtf_en;    
-    unsigned int    rgbir_rpc_en;    
+    unsigned int    rgbir_en;
+    unsigned int    rgbir_rtf_en;
+    unsigned int    rgbir_rpc_en;
     unsigned int    rgbir_fusion_en;
-    
+
     unsigned int    rgbir_output_sel;
- 
-    unsigned int  rgbir_rpc_max_value; 
+
+    unsigned int  rgbir_rpc_max_value;
     unsigned int   rgbir_rpc_color_coff;
-    unsigned int   rgbir_rpc_luma_coff; 
-    
-    unsigned int  rgbir_rpc_th;       
-    unsigned int  rgbir_rpc_th1;      
+    unsigned int   rgbir_rpc_luma_coff;
+
+    unsigned int  rgbir_rpc_th;
+    unsigned int  rgbir_rpc_th1;
 } ISP_CORE_RGBIR_CTL_S;
 
 typedef struct _ISP_CORE_2DNR_CTL_S
 {
-    unsigned int   core_2dnr_pcf_en;       
-    unsigned int   core_2dnr_raw_en;       
-    unsigned int   core_2dnr_edge_en;      
-    unsigned int   core_2dnr_bap_en;       
-    
-    unsigned int   core_2dnr_luma_en;      
-    unsigned int   core_2dnr_chroma_en;    
-    unsigned int   core_2dnr_pcf_adp_en;   
-    unsigned int   core_2dnr_raw_adp_en;   
-    
-    unsigned int   core_2dnr_luma_adp_en;  
+    unsigned int   core_2dnr_pcf_en;
+    unsigned int   core_2dnr_raw_en;
+    unsigned int   core_2dnr_edge_en;
+    unsigned int   core_2dnr_bap_en;
+
+    unsigned int   core_2dnr_luma_en;
+    unsigned int   core_2dnr_chroma_en;
+    unsigned int   core_2dnr_pcf_adp_en;
+    unsigned int   core_2dnr_raw_adp_en;
+
+    unsigned int   core_2dnr_luma_adp_en;
     unsigned int   core_2dnr_chroma_adp_en;
     unsigned int   core_2dnr_raw_intensity;
     unsigned int  core_2dnr_bap_intensity;
@@ -312,67 +312,67 @@ typedef struct _ISP_CORE_2DNR_CTL_S
 
 typedef struct _ISP_CORE_3DNR_CTL_S
 {
-    unsigned int    core_3dnr_en;            
-    unsigned int    core_3dnr_pre_luma_en;  
-    unsigned int    core_3dnr_pre_chroma_en; 
+    unsigned int    core_3dnr_en;
+    unsigned int    core_3dnr_pre_luma_en;
+    unsigned int    core_3dnr_pre_chroma_en;
     unsigned int    core_3dnr_main_luma_en;
-    
+
     unsigned int    core_3dnr_main_chroma_en;
-    unsigned int    core_3dnr_post_luma_en;  
+    unsigned int    core_3dnr_post_luma_en;
     unsigned int    core_3dnr_post_chroma_en;
     unsigned int    core_3dnr_2d_luma_en;
-    
-    unsigned int    core_3dnr_2d_chroma_en;  
-    unsigned int    core_3dnr_wb_en;         
+
+    unsigned int    core_3dnr_2d_chroma_en;
+    unsigned int    core_3dnr_wb_en;
     unsigned int    core_3dnr_wb_sel;
     unsigned int    core_3dnr_adp_luma_en;
-    
+
     unsigned int    core_3dnr_adp_chroma_en;
-    unsigned int    core_3dnr_pre_luma_th;        
-    unsigned int    core_3dnr_pre_luma_intensity;   
+    unsigned int    core_3dnr_pre_luma_th;
+    unsigned int    core_3dnr_pre_luma_intensity;
     unsigned int    core_3dnr_pre_chroma_intensity;
-    
+
     unsigned int   core_3dnr_mid_filter_th;
-    unsigned int   core_3dnr_pre_mid_filter_th;    
-    unsigned int   core_3dnr_cur_mid_filter_th;    
+    unsigned int   core_3dnr_pre_mid_filter_th;
+    unsigned int   core_3dnr_cur_mid_filter_th;
     unsigned int  core_3dnr_low_pass_filter_th;
-    unsigned int   core_3dnr_luma_th;             
+    unsigned int   core_3dnr_luma_th;
     unsigned int   core_3dnr_min_value;
     unsigned int   core_3dnr_luma_intensity;
-    
-    unsigned int   core_3dnr_chroma_intensity;    
-    unsigned int   core_3dnr_post_edge_th;        
-    unsigned int   core_3dnr_post_luma_intensity;  
+
+    unsigned int   core_3dnr_chroma_intensity;
+    unsigned int   core_3dnr_post_edge_th;
+    unsigned int   core_3dnr_post_luma_intensity;
     unsigned int   core_3dnr_post_chroma_intensity;
 
 } ISP_CORE_3DNR_CTL_S;
 
 typedef struct _ISP_CORE_ENH_CTL_S
 {
-    unsigned int    enh_ltm_en;       
-    unsigned int    enh_sharp_en;     
-    unsigned int    enh_cc_en;        
+    unsigned int    enh_ltm_en;
+    unsigned int    enh_sharp_en;
+    unsigned int    enh_cc_en;
     unsigned int    enh_adp_ltm_en;
-    
-    unsigned int    enh_adp_sharp_en; 
-    unsigned int    enh_adp_cc_en;    
-    unsigned int    ltm_gain;  
-    unsigned int    ltm_th;    
-    
-    unsigned int    enh_nr_th; 
+
+    unsigned int    enh_adp_sharp_en;
+    unsigned int    enh_adp_cc_en;
+    unsigned int    ltm_gain;
+    unsigned int    ltm_th;
+
+    unsigned int    enh_nr_th;
     unsigned int   enh_th1;
     unsigned int   enh_th2;
-    unsigned int    sharp_gain;     
+    unsigned int    sharp_gain;
 } ISP_CORE_ENH_CTL_S;
 
 typedef struct _ISP_CORE_POST_CTL_S
-{ 
-    unsigned int    post_cont_ad_en;   
-    unsigned int    post_luma_ad_en;   
-    unsigned int    post_satu_ad_en;   
-//    unsigned int    post_otc_en;   
+{
+    unsigned int    post_cont_ad_en;
+    unsigned int    post_luma_ad_en;
+    unsigned int    post_satu_ad_en;
+//    unsigned int    post_otc_en;
     unsigned int    cont_ad_intensity;
-    
+
     unsigned int    luma_ad_intensity;
     unsigned int    satu_ad_intensity;
 
@@ -380,50 +380,50 @@ typedef struct _ISP_CORE_POST_CTL_S
 
 typedef struct _ISP_CORE_OTC_CTL_S
 {
-    unsigned int    post_otc_en;  
-    unsigned int    otc_yc_sel;        
-    unsigned int    otc_uv_format_sel; 
-    unsigned int    otc_hsync_pol_sel; 
+    unsigned int    post_otc_en;
+    unsigned int    otc_yc_sel;
+    unsigned int    otc_uv_format_sel;
+    unsigned int    otc_hsync_pol_sel;
     unsigned int    otc_vsync_pol_sel;
-    
-    unsigned int    otc_stt_vr;   
-    unsigned int    otc_stt_hr;   
-    unsigned int    otc_height;   
-    unsigned int    otc_width;   
+
+    unsigned int    otc_stt_vr;
+    unsigned int    otc_stt_hr;
+    unsigned int    otc_height;
+    unsigned int    otc_width;
 } ISP_CORE_OTC_CTL_S;
 
 typedef struct _ISP_CORE_LDC_CTL_S
 {
-    unsigned int       ldc_en;          
-    unsigned int       ldc_arith_en;   
-    unsigned int       ldc_req_freq;   
-    
+    unsigned int       ldc_en;
+    unsigned int       ldc_arith_en;
+    unsigned int       ldc_req_freq;
+
     unsigned int      ldc_stt_ln;
     unsigned int      ldc_h_center_pos;
-    
+
     unsigned int      ldc_v_center_pos;
-    unsigned int      ldc_rectify_cr; 
-    
-    unsigned int      ldc_rectify_cz;    
+    unsigned int      ldc_rectify_cr;
+
+    unsigned int      ldc_rectify_cz;
 } ISP_CORE_LDC_CTL_S;
 
 typedef struct _ISP_CORE_AF_CTL_S
 {
-    unsigned int    af_stat_en;          
-    unsigned int    af_stat_mode_sel; 
+    unsigned int    af_stat_en;
+    unsigned int    af_stat_mode_sel;
 
-    unsigned int  af_stat_win_h_start;    
-    unsigned int  af_stat_win_v_start; 
-    unsigned int  af_stat_win_h_end;  
-    unsigned int  af_stat_win_v_end;  
+    unsigned int  af_stat_win_h_start;
+    unsigned int  af_stat_win_v_start;
+    unsigned int  af_stat_win_h_end;
+    unsigned int  af_stat_win_v_end;
 
 } ISP_CORE_AF_CTL_S;
 
 typedef struct _ISP_CORE_AF_STS_S
-{        
-    unsigned int  af_mid_frq_data;    
-    unsigned int  af_high_frq_data;   
-    unsigned int  af_stat_pixel_num;  
+{
+    unsigned int  af_mid_frq_data;
+    unsigned int  af_high_frq_data;
+    unsigned int  af_stat_pixel_num;
 } ISP_CORE_AF_STS_S;
 
 typedef struct _ISP_CORE_RAM_WR_STATUS_S
@@ -431,29 +431,29 @@ typedef struct _ISP_CORE_RAM_WR_STATUS_S
     unsigned int    gamma_grb_table_cfg;
     unsigned int    gamma_yuv_table_cfg;
 
-    unsigned int    wdr_l3_table_cfg;   
-    unsigned int    wdr_m3_table_cfg;    
-    unsigned int    wdr_s3_table_cfg; 
+    unsigned int    wdr_l3_table_cfg;
+    unsigned int    wdr_m3_table_cfg;
+    unsigned int    wdr_s3_table_cfg;
+
+    unsigned int    wdr_l2_table_cfg;
+    unsigned int    wdr_s2_table_cfg;
 
-    unsigned int    wdr_l2_table_cfg;   
-    unsigned int    wdr_s2_table_cfg;   
-      
 } ISP_CORE_RAM_WR_STATUS_S;
 
 typedef struct _ISP_CORE_RAM_RD_STATUS_S
 {
-    unsigned int    gamma_grb_table;  
-    unsigned int    gamma_yuv_table;  
-    unsigned int    wdr_l3_table;     
+    unsigned int    gamma_grb_table;
+    unsigned int    gamma_yuv_table;
+    unsigned int    wdr_l3_table;
     unsigned int    wdr_m3_table;
-    
-    unsigned int    wdr_s3_table;     
-    unsigned int    wdr_l2_table;     
-    unsigned int    wdr_s2_table;     
+
+    unsigned int    wdr_s3_table;
+    unsigned int    wdr_l2_table;
+    unsigned int    wdr_s2_table;
     unsigned int    ram_ready_status;
-    
+
     unsigned int    hist_ready_status;
-    unsigned int    ram_ready_lock;    
+    unsigned int    ram_ready_lock;
 } ISP_CORE_RAM_RD_STATUS_S;
 
 typedef struct _ISP_CORE_ATRR_S
@@ -475,13 +475,20 @@ typedef struct _ISP_CORE_ATRR_S
     ISP_CORE_3DNR_CTL_S st3dnrCtl;
     ISP_CORE_ENH_CTL_S stEnhCtl;
     ISP_CORE_POST_CTL_S stPostCtl;
-    ISP_CORE_OTC_CTL_S  stOtcCtl;   
+    ISP_CORE_OTC_CTL_S  stOtcCtl;
     ISP_CORE_LDC_CTL_S stLdcCtl;
     ISP_CORE_RAM_WR_STATUS_S stRamWrStatus;
     ISP_CORE_RAM_RD_STATUS_S stRamRdStatus;
     ISP_CORE_AF_CTL_S stAfCtl;
     ISP_CORE_AF_STS_S stAfSts;
 } ISP_CORE_ATRR_S;
+
+typedef struct _ISP_CORE_REG_VAL_S
+{
+    unsigned int reg_addr;
+    unsigned int reg_value;
+}ISP_CORE_REG_VAL_S;
+
 /*
 *F2K
 */
@@ -508,11 +515,13 @@ int Isp_Drv_F2k_Core_SetOtcCtl(struct k510_isp_device *isp,ISP_CORE_OTC_CTL_S *p
 int Isp_Drv_F2k_Core_SetLdcCtl(struct k510_isp_device *isp,ISP_CORE_LDC_CTL_S *pstLdcCtl);
 int Isp_Drv_F2k_Core_SetAfCtl(struct k510_isp_device *isp,ISP_CORE_AF_CTL_S *pstAfCtl);
 int Isp_Drv_F2k_Core_SetRamWrStatus(struct k510_isp_device *isp,unsigned int data);
+int Isp_Drv_F2k_Core_SetReg(struct k510_isp_device *isp,ISP_CORE_REG_VAL_S *pRegVal);
 //
 int Isp_Drv_F2k_Core_GetAeSts(struct k510_isp_device *isp,ISP_CORE_AE_STS_S *pAeSts);
 int Isp_Drv_F2k_Core_GetAwbSts(struct k510_isp_device *isp,ISP_CORE_AWB_STS_S *pAwbSts);
 int Isp_Drv_F2k_Core_GetAfSts(struct k510_isp_device *isp,ISP_CORE_AF_STS_S *pgtAfSts);
 int Isp_Drv_F2k_Core_GetRamRdStatus(struct k510_isp_device *isp);
+int Isp_Drv_F2k_Core_GetReg(struct k510_isp_device *isp,ISP_CORE_REG_VAL_S *pRegVal);
 /*
 *R2K
 */
@@ -537,10 +546,12 @@ int Isp_Drv_R2k_Core_SetOtcCtl(struct k510_isp_device *isp,ISP_CORE_OTC_CTL_S *p
 int Isp_Drv_R2k_Core_SetLdcCtl(struct k510_isp_device *isp,ISP_CORE_LDC_CTL_S *pstLdcCtl);
 int Isp_Drv_R2k_Core_SetAfCtl(struct k510_isp_device *isp,ISP_CORE_AF_CTL_S *pstAfCtl);
 int Isp_Drv_R2k_Core_SetRamWrStatus(struct k510_isp_device *isp,unsigned int data);
+int Isp_Drv_R2k_Core_SetReg(struct k510_isp_device *isp,ISP_CORE_REG_VAL_S *pRegVal);
 //
 int Isp_Drv_R2k_Core_GetAeSts(struct k510_isp_device *isp,ISP_CORE_AE_STS_S *pAeSts);
 int Isp_Drv_R2k_Core_GetAwbSts(struct k510_isp_device *isp,ISP_CORE_AWB_STS_S *pAwbSts);
 int Isp_Drv_R2k_Core_GetAfSts(struct k510_isp_device *isp,ISP_CORE_AF_STS_S *pgtAfSts);
 int Isp_Drv_R2k_Core_GetRamRdStatus(struct k510_isp_device *isp);
+int Isp_Drv_R2k_Core_GetReg(struct k510_isp_device *isp,ISP_CORE_REG_VAL_S *pRegVal);
 
-#endif /*_ISP_CORE_DRV_H_*/
\ No newline at end of file
+#endif /*_ISP_CORE_DRV_H_*/
diff --git a/drivers/media/platform/canaan-isp/isp_2k/core/isp_core_reg.h b/drivers/media/platform/canaan-isp/isp_2k/core/isp_core_reg.h
index b70d20af..d536c981 100755
--- a/drivers/media/platform/canaan-isp/isp_2k/core/isp_core_reg.h
+++ b/drivers/media/platform/canaan-isp/isp_2k/core/isp_core_reg.h
@@ -100,7 +100,7 @@ union U_ISP_CORE_IMAGE_ACTIVE_HEIGHT
 } ;
 /*
 * Test Pattern Control
-*/ 
+*/
 union U_ISP_CORE_TEST_CTL
 {
     /* Define the struct bits */
@@ -158,7 +158,7 @@ union U_ISP_CORE_BLC_RATIO
     unsigned int    u32;
 } ;
 /*
-* Lens Shading Correction 
+* Lens Shading Correction
 */
 union U_ISP_CORE_LSC_CTL
 {
@@ -244,7 +244,7 @@ union U_ISP_CORE_LSC_IR_RATIO
     unsigned int    u32;
 } ;
 /*
-*AUTO Exposure/Gain 
+*AUTO Exposure/Gain
 */
 union U_ISP_CORE_AE_CTL
 {
@@ -1438,7 +1438,7 @@ union U_ISP_CORE_CSC_R2Y_22
 } ;
 /*
 *ADA
-*/ 
+*/
 union U_ISP_CORE_ADA_CTL
 {
     /* Define the struct bits */
@@ -1692,7 +1692,7 @@ union U_ISP_CORE_2DNR_CHROMA_INTENSITY
     unsigned int    u32;
 } ;
 /*
-* 3D Noise Reduction 
+* 3D Noise Reduction
 */
 union U_ISP_CORE_3DNR_CTL
 {
@@ -2083,7 +2083,7 @@ union U_ISP_CORE_OTC_WIDTH
     unsigned int    u32;
 } ;
 /*
-* LDC Control 
+* LDC Control
 */
 union U_ISP_CORE_LDC_CTL
 {
@@ -2159,7 +2159,7 @@ union U_ISP_CORE_LDC_RECTIFY_CZ
     unsigned int    u32;
 } ;
 /*
-* ISP Table Control 
+* ISP Table Control
 */
 union U_ISP_CORE_RAM_WR_STATUS
 {
@@ -2310,6 +2310,28 @@ union U_ISP_CORE_AF_STAT_PIXEL_NUM
     unsigned int    u32;
 } ;
 
+union U_ISP_CORE_REG_CFG_ADDR
+{
+    /* Define the struct bits */
+    struct
+    {
+        unsigned int    reg_value                : 32  ; /* [31 ..0 ]  */
+    } bits;    /* Define an unsigned member */
+
+    unsigned int    u32;
+} ;
+
+union U_ISP_CORE_REG_CFG_VALUE
+{
+    /* Define the struct bits */
+    struct
+    {
+        unsigned int    reg_value                : 32  ; /* [31 ..0 ]  */
+    } bits;    /* Define an unsigned member */
+
+    unsigned int    u32;
+} ;
+
 //itc
 #define  ISP_CORE_ITC_CTL               		(0x0000)
 #define  ISP_CORE_IMAGE_HEIGHT          		(0x0004)
@@ -2318,13 +2340,13 @@ union U_ISP_CORE_AF_STAT_PIXEL_NUM
 #define  ISP_CORE_IMAGE_H_START         		(0x0010)
 #define  ISP_CORE_IMAGE_ACTIVE_WIDTH    		(0x0014)
 #define  ISP_CORE_IMAGE_ACTIVE_HEIGHT   		(0x0018)
-//tpg	
+//tpg
 #define  ISP_CORE_TEST_CTL              		(0x001C)
-//blc		
+//blc
 #define  ISP_CORE_BLC_CTL               		(0x0020)
 #define  ISP_CORE_BLC_OFFSET            		(0x0024)
 #define  ISP_CORE_BLC_RATIO             		(0x0028)
-//lsc		
+//lsc
 #define  ISP_CORE_LSC_CTL               		(0x002C)
 #define  ISP_CORE_LSC_H_CENTER          		(0x0030)
 #define  ISP_CORE_LSC_V_CENTER          		(0x0034)
@@ -2332,7 +2354,7 @@ union U_ISP_CORE_AF_STAT_PIXEL_NUM
 #define  ISP_CORE_LSC_G_RATIO           		(0x003C)
 #define  ISP_CORE_LSC_B_RATIO           		(0x0040)
 #define  ISP_CORE_LSC_IR_RATIO          		(0x0044)
-//ae		
+//ae
 #define  ISP_CORE_AE_CTL                		(0x0050)
 #define  ISP_CORE_AE_WIN_H_START        		(0x0054)
 #define  ISP_CORE_AE_WIN_V_START        		(0x0058)
@@ -2485,7 +2507,7 @@ union U_ISP_CORE_AF_STAT_PIXEL_NUM
 #define  ISP_CORE_CONT_GAIN                     (0x02E8)
 #define  ISP_CORE_LUMA_GAIN                     (0x02EC)
 #define  ISP_CORE_SATU_GAIN                     (0x02F0)
-//otc                                                
+//otc
 #define  ISP_CORE_OTC_STT_VR                    (0x02F4)
 #define  ISP_CORE_OTC_STT_HR                    (0x02F8)
 #define  ISP_CORE_OTC_HEIGHT                    (0x02FC)
@@ -2512,4 +2534,3 @@ union U_ISP_CORE_AF_STAT_PIXEL_NUM
 #define  ISP_CORE_AF_STAT_PIXEL_NUM             (0x0364)
 
 #endif /*_ISP_CORE_REG_H_*/
-
diff --git a/drivers/media/platform/canaan-isp/isp_2k/core/isp_f2k_core_drv.c b/drivers/media/platform/canaan-isp/isp_2k/core/isp_f2k_core_drv.c
index 8e351db0..1d11f161 100755
--- a/drivers/media/platform/canaan-isp/isp_2k/core/isp_f2k_core_drv.c
+++ b/drivers/media/platform/canaan-isp/isp_2k/core/isp_f2k_core_drv.c
@@ -9,7 +9,7 @@
 #include "isp_core_drv.h"
 #include "isp_core_reg.h"
 /*
-*  Image Timing Control 
+*  Image Timing Control
 */
 int Isp_Drv_F2k_Core_SetItcCtl(struct k510_isp_device *isp,ISP_CORE_ITC_CTL_S *pstItcCtl)
 {
@@ -22,7 +22,7 @@ int Isp_Drv_F2k_Core_SetItcCtl(struct k510_isp_device *isp,ISP_CORE_ITC_CTL_S *p
 	stData.bits.vsync_input_timing = pstItcCtl->vsync_input_timing;
 	stData.bits.mirror_ctl = pstItcCtl->mirror_ctl;
 	stData.bits.video_format_ctl = pstItcCtl->video_format_ctl;
-	
+
 	isp_reg_writel(isp,stData.u32,ISP_IOMEM_F2K_CORE,ISP_CORE_ITC_CTL);
 	return 0;
 }
@@ -31,7 +31,7 @@ int Isp_Drv_F2k_Core_SetItcCtl(struct k510_isp_device *isp,ISP_CORE_ITC_CTL_S *p
 */
 int Isp_Drv_F2k_Core_SetImageAttr(struct k510_isp_device *isp,ISP_CORE_IMAGE_ATTR_S *pstImgAttr)
 {
-    
+
 
 	union U_ISP_CORE_IMAGE_HEIGHT stHeight;
 	stHeight.u32 = 0;
@@ -69,7 +69,7 @@ int Isp_Drv_F2k_Core_SetImageAttr(struct k510_isp_device *isp,ISP_CORE_IMAGE_ATT
 */
 int Isp_Drv_F2k_Core_SetTestCtl(struct k510_isp_device *isp,ISP_CORE_TEST_CTL_S *pstTestCtl)
 {
-    
+
  	union U_ISP_CORE_TEST_CTL stData;
 	stData.u32 = 0;
 	stData.bits.bayer_mode_sel = pstTestCtl->bayer_mode_sel;
@@ -86,8 +86,8 @@ int Isp_Drv_F2k_Core_SetTestCtl(struct k510_isp_device *isp,ISP_CORE_TEST_CTL_S
 *Black Level Correction
 */
 int Isp_Drv_F2k_Core_SetBlcCtl(struct k510_isp_device *isp,ISP_CORE_BLC_CTL_S *pstBlcCtl)
-{ 
-	
+{
+
 	union U_ISP_CORE_BLC_CTL stBlcCtl;
 	stBlcCtl.u32 = 0;
 	stBlcCtl.bits.blc_en = pstBlcCtl->blc_en;
@@ -109,7 +109,7 @@ int Isp_Drv_F2k_Core_SetBlcCtl(struct k510_isp_device *isp,ISP_CORE_BLC_CTL_S *p
 */
 int Isp_Drv_F2k_Core_SetLscCtl(struct k510_isp_device *isp,ISP_CORE_LSC_CTL_S *pstLscCtl)
 {
-	
+
 	union U_ISP_CORE_LSC_CTL stlscCtl;
 	stlscCtl.u32 = 0;
 	stlscCtl.bits.lsc_en = pstLscCtl->lsc_en;
@@ -148,11 +148,11 @@ int Isp_Drv_F2k_Core_SetLscCtl(struct k510_isp_device *isp,ISP_CORE_LSC_CTL_S *p
 	return 0;
 }
 /*
-*AUTO Exposure/Gain 
+*AUTO Exposure/Gain
 */
 int Isp_Drv_F2k_Core_SetAeCtl(struct k510_isp_device *isp,ISP_CORE_AE_CTL_S *pstAeCtl)
-{   
- 	          
+{
+
 	union U_ISP_CORE_AE_CTL stAeCtl;
 	stAeCtl.u32 = 0;
 	stAeCtl.bits.ae_as_en = pstAeCtl->ae_as_en;
@@ -266,7 +266,7 @@ int Isp_Drv_F2k_Core_SetAeCtl(struct k510_isp_device *isp,ISP_CORE_AE_CTL_S *pst
 	stDnWaitTime.u32 = 0;
 	stDnWaitTime.bits.ae_dn_switch_wait_time = pstAeCtl->ae_dn_switch_wait_time;
 	isp_reg_writel(isp,stDnWaitTime.u32,ISP_IOMEM_F2K_CORE,ISP_CORE_AE_DN_SWITCH_WAIT_TIME);
- 
+
  	union U_ISP_CORE_APE_DIFF_MAX stApeDiffMax;
 	stApeDiffMax.u32 = 0;
 	stApeDiffMax.bits.ape_max_diff = pstAeCtl->ape_max_diff;
@@ -300,42 +300,42 @@ int Isp_Drv_F2k_Core_SetAeCtl(struct k510_isp_device *isp,ISP_CORE_AE_CTL_S *pst
 	union U_ISP_CORE_APE_DAMP_MANUAL_VALUE stDampManValue;
 	stDampManValue.u32 = 0;
 	stDampManValue.bits.ape_damp_manual_value = pstAeCtl->ape_damp_manual_value;
-	isp_reg_writel(isp,stDampManValue.u32,ISP_IOMEM_F2K_CORE,ISP_CORE_APE_DAMP_MANUAL_VALUE);	
+	isp_reg_writel(isp,stDampManValue.u32,ISP_IOMEM_F2K_CORE,ISP_CORE_APE_DAMP_MANUAL_VALUE);
 	return 0;
 }
 /**
- * @brief 
- * 
- * @return int 
+ * @brief
+ *
+ * @return int
  */
 int Isp_Drv_F2k_Core_GetAeLongCurEx(struct k510_isp_device *isp)
 {
 	int data;
-	
+
 
 	data = isp_reg_readl(isp,ISP_IOMEM_F2K_CORE,ISP_CORE_AE_LONG_CUR_EX);
 
 	return data;
 }
 /**
- * @brief 
- * 
- * @return int 
+ * @brief
+ *
+ * @return int
  */
 int Isp_Drv_F2k_Core_GetAeCurDigitalGain(struct k510_isp_device *isp)
 {
 	int data;
-	
+
 
 	data = isp_reg_readl(isp,ISP_IOMEM_F2K_CORE,ISP_CORE_AE_CUR_DIGITAL_GAIN);
 
 	return data;
 }
 /**
- * @brief 
- * 
- * @param pAeSts 
- * @return int 
+ * @brief
+ *
+ * @param pAeSts
+ * @return int
  */
 int Isp_Drv_F2k_Core_GetAeSts(struct k510_isp_device *isp,ISP_CORE_AE_STS_S *pAeSts)
 {
@@ -379,15 +379,15 @@ int Isp_Drv_F2k_Core_GetAeSts(struct k510_isp_device *isp,ISP_CORE_AE_STS_S *pAe
   	union U_ISP_CORE_AE_PIXEL_SUM            gtAePixelSum;
   	gtAePixelSum.u32 = isp_reg_readl(isp,ISP_IOMEM_F2K_CORE,ISP_CORE_AE_PIXEL_SUM);
   	pAeSts->ae_mid_cur_ex =  gtAePixelSum.u32;
-  
+
   	return 0;
-} 
+}
 /*
 *AWB
 */
 int Isp_Drv_F2k_Core_SetAwbCtl(struct k510_isp_device *isp,ISP_CORE_AWB_CTL_S *pstAwbCtl)
 {
-	
+
 	union U_ISP_CORE_AWB_CTL stAwbCtl;
 	stAwbCtl.u32 = 0;
 	stAwbCtl.bits.awb_d65_en = pstAwbCtl->awb_d65_en;
@@ -411,7 +411,7 @@ int Isp_Drv_F2k_Core_SetAwbCtl(struct k510_isp_device *isp,ISP_CORE_AWB_CTL_S *p
 	stD65BlueGain.u32 = 0;
 	stD65BlueGain.bits.awb_d65_blue_gain = pstAwbCtl->awb_d65_blue_gain;
 	isp_reg_writel(isp,stD65BlueGain.u32,ISP_IOMEM_F2K_CORE,ISP_CORE_AWB_D65_BLUE_GAIN);
-        
+
  	union U_ISP_CORE_CCM_RR_COFF stRrCoff;
 	stRrCoff.u32 = 0;
 	stRrCoff.bits.ccm_rr_coff = pstAwbCtl->ccm_rr_coff;
@@ -456,7 +456,7 @@ int Isp_Drv_F2k_Core_SetAwbCtl(struct k510_isp_device *isp,ISP_CORE_AWB_CTL_S *p
 	stBbCoff.u32 = 0;
 	stBbCoff.bits.ccm_bb_coff = pstAwbCtl->ccm_bb_coff;
 	isp_reg_writel(isp,stBbCoff.u32,ISP_IOMEM_F2K_CORE,ISP_CORE_CCM_BB_COFF);
-       
+
  	union U_ISP_CORE_CCM_CORRECT_COFF stCorrCoff;
 	stCorrCoff.u32 = 0;
 	stCorrCoff.bits.ccm_correct_coff = pstAwbCtl->ccm_correct_coff;
@@ -491,7 +491,7 @@ int Isp_Drv_F2k_Core_SetAwbCtl(struct k510_isp_device *isp,ISP_CORE_AWB_CTL_S *p
 	stResTime.u32 = 0;
 	stResTime.bits.awb_color_changeres_time = pstAwbCtl->awb_color_changeres_time;
 	isp_reg_writel(isp, stResTime.u32,ISP_IOMEM_F2K_CORE,ISP_CORE_AWB_RES_TIME);
-    
+
  	union U_ISP_CORE_AWB_HIST_TH stHistTh;
 	stHistTh.u32 = 0;
 	stHistTh.bits.awb_historgram_th = pstAwbCtl->awb_historgram_th;
@@ -530,7 +530,7 @@ int Isp_Drv_F2k_Core_SetAwbCtl(struct k510_isp_device *isp,ISP_CORE_AWB_CTL_S *p
 	union U_ISP_CORE_AWB_BLUE_MIN_VALUE stBlueMinValue;
 	stBlueMinValue.u32 = 0;
 	stBlueMinValue.bits.awb_blue_min_value = pstAwbCtl->awb_blue_min_value;
-	isp_reg_writel(isp, stBlueMinValue.u32,ISP_IOMEM_F2K_CORE,ISP_CORE_AWB_BLUE_MIN_VALUE);	
+	isp_reg_writel(isp, stBlueMinValue.u32,ISP_IOMEM_F2K_CORE,ISP_CORE_AWB_BLUE_MIN_VALUE);
 
 	union U_ISP_CORE_AWB_RED_OBJ_VALUE stRedObjValue;
 	stRedObjValue.u32 = 0;
@@ -547,7 +547,7 @@ int Isp_Drv_F2k_Core_SetAwbCtl(struct k510_isp_device *isp,ISP_CORE_AWB_CTL_S *p
 
 int Isp_Drv_F2k_Core_GetAwbSts(struct k510_isp_device *isp,ISP_CORE_AWB_STS_S *pAwbSts)
 {
-    
+
  	union U_ISP_CORE_AWB_BLUE_HIST_VALUE     gtAwbBHistVal;
   	gtAwbBHistVal.u32 = isp_reg_readl(isp,ISP_IOMEM_F2K_CORE,ISP_CORE_AWB_BLUE_HIST_VALUE);
   	pAwbSts->awb_blue_hist_value = gtAwbBHistVal.u32;
@@ -611,7 +611,7 @@ int Isp_Drv_F2k_Core_GetAwbSts(struct k510_isp_device *isp,ISP_CORE_AWB_STS_S *p
 */
 int Isp_Drv_F2k_Core_SetCscCtl(struct k510_isp_device *isp,ISP_CORE_CSC_CTL_S *pstCscCtl)
 {
-	
+
 	union U_ISP_CORE_CSC_R2Y_00 st00;
 	st00.u32 = 0;
 	st00.bits.csc_r2y_00 = pstCscCtl->csc_r2y_00;
@@ -663,7 +663,7 @@ int Isp_Drv_F2k_Core_SetCscCtl(struct k510_isp_device *isp,ISP_CORE_CSC_CTL_S *p
 */
 int Isp_Drv_F2k_Core_SetWdrCtl(struct k510_isp_device *isp,ISP_CORE_WDR_CTL_S *pstWdrCtl)
 {
-	
+
 	union U_ISP_CORE_WDR_CTL stWdrCtl;
 	stWdrCtl.u32 = 0;
 	stWdrCtl.bits.wdr_fusion_en = pstWdrCtl->wdr_fusion_en;
@@ -705,15 +705,15 @@ int Isp_Drv_F2k_Core_SetWdrCtl(struct k510_isp_device *isp,ISP_CORE_WDR_CTL_S *p
 	union U_ISP_CORE_WDR_FUSION_VALUE2 stFusionValue2;
 	stFusionValue2.u32 = 0;
 	stFusionValue2.bits.wdr_fusion_value2 = pstWdrCtl->wdr_fusion_value2;
-	isp_reg_writel(isp,stFusionValue2.u32,ISP_IOMEM_F2K_CORE,ISP_CORE_WDR_FUSION_VALUE2);	
+	isp_reg_writel(isp,stFusionValue2.u32,ISP_IOMEM_F2K_CORE,ISP_CORE_WDR_FUSION_VALUE2);
 	return 0;
 }
 /*
 *ADA
 */
 int Isp_Drv_F2k_Core_SetAdaCtl(struct k510_isp_device *isp,ISP_CORE_ADA_CTL_S *pstAdaCtl)
-{    
-	          
+{
+
  	union U_ISP_CORE_ADA_CTL stCtl;
 	stCtl.u32 = 0;
 	stCtl.bits.ada_rgb_gamma_en = pstAdaCtl->ada_rgb_gamma_en;
@@ -762,8 +762,8 @@ int Isp_Drv_F2k_Core_SetAdaCtl(struct k510_isp_device *isp,ISP_CORE_ADA_CTL_S *p
 *rgbir
 */
 int Isp_Drv_F2k_Core_SetRgbIrCtl(struct k510_isp_device *isp,ISP_CORE_RGBIR_CTL_S *pstRgbIrCtl)
-{  
-	
+{
+
 	union U_ISP_CORE_RGBIR_CTL stCtl;
 	stCtl.u32 = 0;
 	stCtl.bits.rgbir_en = pstRgbIrCtl->rgbir_en;
@@ -801,11 +801,11 @@ int Isp_Drv_F2k_Core_SetRgbIrCtl(struct k510_isp_device *isp,ISP_CORE_RGBIR_CTL_
 	return 0;
 }
 /*
-* 2D Noise Reduction 
+* 2D Noise Reduction
 */
 int Isp_Drv_F2k_Core_Set2DnrCtl(struct k510_isp_device *isp,ISP_CORE_2DNR_CTL_S *pst2DnrCtl)
 {
-	
+
 	union U_ISP_CORE_2DNR_CTL stCtl;
 	stCtl.u32 = 0;
 	stCtl.bits.core_2dnr_pcf_en = pst2DnrCtl->core_2dnr_pcf_en;
@@ -848,11 +848,11 @@ int Isp_Drv_F2k_Core_Set2DnrCtl(struct k510_isp_device *isp,ISP_CORE_2DNR_CTL_S
 	return 0;
 }
 /*
-* 3D Noise Reduction 
+* 3D Noise Reduction
 */
 int Isp_Drv_F2k_Core_Set3DnrCtl(struct k510_isp_device *isp,ISP_CORE_3DNR_CTL_S *pst3DnrCtl)
-{   
-	               
+{
+
  	union U_ISP_CORE_3DNR_CTL stCtl;
 	stCtl.u32 = 0;
 	stCtl.bits.core_3dnr_en = pst3DnrCtl->core_3dnr_en;
@@ -947,7 +947,7 @@ int Isp_Drv_F2k_Core_Set3DnrCtl(struct k510_isp_device *isp,ISP_CORE_3DNR_CTL_S
 */
 int Isp_Drv_F2k_Core_SetEnhLtmCtl(struct k510_isp_device *isp,ISP_CORE_ENH_CTL_S *pstEnhCtl)
 {
-	
+
 	union U_ISP_CORE_ENH_CTL stCtl;
 	stCtl.u32 = isp_reg_readl(isp,ISP_IOMEM_F2K_CORE,ISP_CORE_ENH_CTL);
 	stCtl.bits.enh_ltm_en = pstEnhCtl->enh_ltm_en;
@@ -968,7 +968,7 @@ int Isp_Drv_F2k_Core_SetEnhLtmCtl(struct k510_isp_device *isp,ISP_CORE_ENH_CTL_S
 
 int Isp_Drv_F2k_Core_SetEnhCCCtl(struct k510_isp_device *isp,ISP_CORE_ENH_CTL_S *pstEnhCtl)
 {
-    
+
 
 	union U_ISP_CORE_ENH_CTL stCtl;
 	stCtl.u32 = isp_reg_readl(isp,ISP_IOMEM_F2K_CORE,ISP_CORE_ENH_CTL);
@@ -996,7 +996,7 @@ int Isp_Drv_F2k_Core_SetEnhCCCtl(struct k510_isp_device *isp,ISP_CORE_ENH_CTL_S
 int Isp_Drv_F2k_Core_SetEnhSharpenCtl(struct k510_isp_device *isp,ISP_CORE_ENH_CTL_S *pstEnhCtl)
 {
 
-	
+
 	union U_ISP_CORE_ENH_CTL stCtl;
 	stCtl.u32 = isp_reg_readl(isp,ISP_IOMEM_F2K_CORE,ISP_CORE_ENH_CTL);
 	stCtl.bits.enh_sharp_en = pstEnhCtl->enh_sharp_en;
@@ -1010,12 +1010,12 @@ int Isp_Drv_F2k_Core_SetEnhSharpenCtl(struct k510_isp_device *isp,ISP_CORE_ENH_C
 	return 0;
 }
 /*
-* POST Control 
+* POST Control
 */
 int Isp_Drv_F2k_Core_SetPostContCtl(struct k510_isp_device *isp,ISP_CORE_POST_CTL_S *pstPostCtl)
 {
 
-	
+
 	union U_ISP_CORE_POST_CTL stCtl;
 	stCtl.u32 = isp_reg_readl(isp,ISP_IOMEM_F2K_CORE,ISP_CORE_POST_CTL);
 	stCtl.bits.post_cont_ad_en = pstPostCtl->post_cont_ad_en;
@@ -1030,7 +1030,7 @@ int Isp_Drv_F2k_Core_SetPostContCtl(struct k510_isp_device *isp,ISP_CORE_POST_CT
 
 int Isp_Drv_F2k_Core_SetPostLumaCtl(struct k510_isp_device *isp,ISP_CORE_POST_CTL_S *pstPostCtl)
 {
-	
+
 	union U_ISP_CORE_POST_CTL stCtl;
 	stCtl.u32 = isp_reg_readl(isp,ISP_IOMEM_F2K_CORE,ISP_CORE_POST_CTL);
 	stCtl.bits.post_luma_ad_en = pstPostCtl->post_luma_ad_en;
@@ -1045,7 +1045,7 @@ int Isp_Drv_F2k_Core_SetPostLumaCtl(struct k510_isp_device *isp,ISP_CORE_POST_CT
 
 int Isp_Drv_F2k_Core_SetPostSatuCtl(struct k510_isp_device *isp,ISP_CORE_POST_CTL_S *pstPostCtl)
 {
-	
+
 	union U_ISP_CORE_POST_CTL stCtl;
 	stCtl.u32 = isp_reg_readl(isp,ISP_IOMEM_F2K_CORE,ISP_CORE_POST_CTL);
 	stCtl.bits.post_satu_ad_en = pstPostCtl->post_satu_ad_en;
@@ -1058,14 +1058,14 @@ int Isp_Drv_F2k_Core_SetPostSatuCtl(struct k510_isp_device *isp,ISP_CORE_POST_CT
 	return 0;
 }
 /*
-* OTC 
+* OTC
 */
 int Isp_Drv_F2k_Core_SetOtcCtl(struct k510_isp_device *isp,ISP_CORE_OTC_CTL_S *pstOtcCtl)
 {
-	
+
 	union U_ISP_CORE_POST_CTL stCtl;
 	stCtl.u32 = isp_reg_readl(isp,ISP_IOMEM_F2K_CORE,ISP_CORE_POST_CTL);
-	stCtl.bits.post_otc_en = pstOtcCtl->post_otc_en;  
+	stCtl.bits.post_otc_en = pstOtcCtl->post_otc_en;
 	stCtl.bits.otc_yc_sel = pstOtcCtl->otc_yc_sel;
 	stCtl.bits.otc_uv_format_sel = pstOtcCtl->otc_uv_format_sel;
 	stCtl.bits.otc_hsync_pol_sel = pstOtcCtl->otc_hsync_pol_sel;
@@ -1098,7 +1098,7 @@ int Isp_Drv_F2k_Core_SetOtcCtl(struct k510_isp_device *isp,ISP_CORE_OTC_CTL_S *p
 */
 int Isp_Drv_F2k_Core_SetLdcCtl(struct k510_isp_device *isp,ISP_CORE_LDC_CTL_S *pstLdcCtl)
 {
-	
+
 	union U_ISP_CORE_LDC_CTL stCtl;
 	stCtl.u32 = 0;
 	stCtl.bits.ldc_en = pstLdcCtl->ldc_en;
@@ -1137,7 +1137,7 @@ int Isp_Drv_F2k_Core_SetLdcCtl(struct k510_isp_device *isp,ISP_CORE_LDC_CTL_S *p
 */
 int Isp_Drv_F2k_Core_SetAfCtl(struct k510_isp_device *isp,ISP_CORE_AF_CTL_S *pstAfCtl)
 {
-	
+
 	union U_ISP_CORE_AF_CTL stAfCtl;
 	stAfCtl.u32 = 0;
 	stAfCtl.bits.af_stat_en = pstAfCtl->af_stat_en;
@@ -1156,16 +1156,16 @@ int Isp_Drv_F2k_Core_SetAfCtl(struct k510_isp_device *isp,ISP_CORE_AF_CTL_S *pst
 
 	union U_ISP_CORE_AF_STAT_WIN_H_END stAfWinHEnd;
 	stAfWinHEnd.u32 = 0;
-	stAfWinHEnd.bits.af_stat_win_h_end = pstAfCtl->af_stat_win_h_end;	
+	stAfWinHEnd.bits.af_stat_win_h_end = pstAfCtl->af_stat_win_h_end;
 	isp_reg_writel(isp,stAfWinHEnd.u32,ISP_IOMEM_F2K_CORE,ISP_CORE_AF_STAT_WIN_H_END);
 
 	union U_ISP_CORE_AF_STAT_WIN_V_END stAfWinVEnd;
 	stAfWinVEnd.u32 = 0;
-	stAfWinVEnd.bits.af_stat_win_v_end = pstAfCtl->af_stat_win_v_end;	
+	stAfWinVEnd.bits.af_stat_win_v_end = pstAfCtl->af_stat_win_v_end;
 	isp_reg_writel(isp,stAfWinVEnd.u32,ISP_IOMEM_F2K_CORE,ISP_CORE_AF_STAT_WIN_V_END);
 
 	return 0;
-}	
+}
 
 int Isp_Drv_F2k_Core_GetAfSts(struct k510_isp_device *isp,ISP_CORE_AF_STS_S *pgtAfSts)
 {
@@ -1180,15 +1180,15 @@ int Isp_Drv_F2k_Core_GetAfSts(struct k510_isp_device *isp,ISP_CORE_AF_STS_S *pgt
 	pgtAfSts->af_high_frq_data = gtAfHighFrqData.u32;
 
 	union U_ISP_CORE_AF_STAT_PIXEL_NUM       gtAfStatPixelNum;
-	gtAfStatPixelNum.u32 = isp_reg_readl(isp,ISP_IOMEM_F2K_CORE,ISP_CORE_AF_STAT_PIXEL_NUM);	
+	gtAfStatPixelNum.u32 = isp_reg_readl(isp,ISP_IOMEM_F2K_CORE,ISP_CORE_AF_STAT_PIXEL_NUM);
 	pgtAfSts->af_stat_pixel_num = gtAfStatPixelNum.u32;
 	return 0;
 }
 
 int Isp_Drv_F2k_Core_SetRamWrStatus(struct k510_isp_device *isp,unsigned int data)
 {
-    
-	
+
+
 	isp_reg_writel(isp,data,ISP_IOMEM_F2K_CORE,ISP_CORE_RAM_WR_STATUS);
 
 	return 0;
@@ -1196,9 +1196,33 @@ int Isp_Drv_F2k_Core_SetRamWrStatus(struct k510_isp_device *isp,unsigned int dat
 
 int Isp_Drv_F2k_Core_GetRamRdStatus(struct k510_isp_device *isp)
 {
-    
-	
+
+
 	int isp_ram_ready = isp_reg_readl(isp,ISP_IOMEM_F2K_CORE,ISP_CORE_RAM_RD_STATUS);
 
 	return isp_ram_ready;
+}
+
+/*
+*F2K Reg Opt
+*/
+
+int Isp_Drv_F2k_Core_SetReg(struct k510_isp_device *isp,ISP_CORE_REG_VAL_S *pRegVal)
+{
+	union U_ISP_CORE_REG_CFG_ADDR stRegAddr;
+	union U_ISP_CORE_REG_CFG_VALUE stRegVal;
+	stRegAddr.u32 = pRegVal->reg_addr;
+	stRegVal.u32 = pRegVal->reg_value;
+	isp_reg_writel(isp,stRegVal.u32,ISP_IOMEM_F2K_CORE,stRegAddr.u32);
+	return 0;
+}
+
+int Isp_Drv_F2k_Core_GetReg(struct k510_isp_device *isp,ISP_CORE_REG_VAL_S *pRegVal)
+{
+	union U_ISP_CORE_REG_CFG_ADDR gtRegAddr;
+	union U_ISP_CORE_REG_CFG_VALUE gtRegVal;
+	gtRegAddr.u32 = pRegVal->reg_addr;
+	gtRegVal.u32 = isp_reg_readl(isp,ISP_IOMEM_F2K_CORE,gtRegAddr.u32);
+	pRegVal->reg_value = gtRegVal.u32;
+	return 0;
 }
\ No newline at end of file
diff --git a/drivers/media/platform/canaan-isp/isp_2k/core/isp_r2k_core_drv.c b/drivers/media/platform/canaan-isp/isp_2k/core/isp_r2k_core_drv.c
index b98649f5..0d47e3a6 100755
--- a/drivers/media/platform/canaan-isp/isp_2k/core/isp_r2k_core_drv.c
+++ b/drivers/media/platform/canaan-isp/isp_2k/core/isp_r2k_core_drv.c
@@ -8,7 +8,7 @@
 #include "isp_core_drv.h"
 #include "isp_core_reg.h"
 /*
-*  Image Timing Control 
+*  Image Timing Control
 */
 int Isp_Drv_R2k_Core_SetItcCtl(struct k510_isp_device *isp,ISP_CORE_ITC_CTL_S *pstItcCtl)
 {
@@ -21,7 +21,7 @@ int Isp_Drv_R2k_Core_SetItcCtl(struct k510_isp_device *isp,ISP_CORE_ITC_CTL_S *p
 	stData.bits.vsync_input_timing = pstItcCtl->vsync_input_timing;
 	stData.bits.mirror_ctl = pstItcCtl->mirror_ctl;
 	stData.bits.video_format_ctl = pstItcCtl->video_format_ctl;
-	
+
 	isp_reg_writel(isp,stData.u32,ISP_IOMEM_R2K_CORE,ISP_CORE_ITC_CTL);
 	return 0;
 }
@@ -30,7 +30,7 @@ int Isp_Drv_R2k_Core_SetItcCtl(struct k510_isp_device *isp,ISP_CORE_ITC_CTL_S *p
 */
 int Isp_Drv_R2k_Core_SetImageAttr(struct k510_isp_device *isp,ISP_CORE_IMAGE_ATTR_S *pstImgAttr)
 {
-	
+
 	union U_ISP_CORE_IMAGE_HEIGHT stHeight;
 	stHeight.u32 = 0;
 	stHeight.bits.image_height = pstImgAttr->image_height;
@@ -67,7 +67,7 @@ int Isp_Drv_R2k_Core_SetImageAttr(struct k510_isp_device *isp,ISP_CORE_IMAGE_ATT
 */
 int Isp_Drv_R2k_Core_SetTestCtl(struct k510_isp_device *isp,ISP_CORE_TEST_CTL_S *pstTestCtl)
 {
-	
+
 	union U_ISP_CORE_TEST_CTL stData;
 	stData.u32 = 0;
 	stData.bits.bayer_mode_sel = pstTestCtl->bayer_mode_sel;
@@ -84,8 +84,8 @@ int Isp_Drv_R2k_Core_SetTestCtl(struct k510_isp_device *isp,ISP_CORE_TEST_CTL_S
 *Black Level Correction
 */
 int Isp_Drv_R2k_Core_SetBlcCtl(struct k510_isp_device *isp,ISP_CORE_BLC_CTL_S *pstBlcCtl)
-{ 
-	
+{
+
 	union U_ISP_CORE_BLC_CTL stBlcCtl;
 	stBlcCtl.u32 = 0;
 	stBlcCtl.bits.blc_en = pstBlcCtl->blc_en;
@@ -107,7 +107,7 @@ int Isp_Drv_R2k_Core_SetBlcCtl(struct k510_isp_device *isp,ISP_CORE_BLC_CTL_S *p
 */
 int Isp_Drv_R2k_Core_SetLscCtl(struct k510_isp_device *isp,ISP_CORE_LSC_CTL_S *pstLscCtl)
 {
-	
+
 	union U_ISP_CORE_LSC_CTL stlscCtl;
 	stlscCtl.u32 = 0;
 	stlscCtl.bits.lsc_en = pstLscCtl->lsc_en;
@@ -146,11 +146,11 @@ int Isp_Drv_R2k_Core_SetLscCtl(struct k510_isp_device *isp,ISP_CORE_LSC_CTL_S *p
 	return 0;
 }
 /*
-*AUTO Exposure/Gain 
+*AUTO Exposure/Gain
 */
 int Isp_Drv_R2k_Core_SetAeCtl(struct k510_isp_device *isp,ISP_CORE_AE_CTL_S *pstAeCtl)
-{   
-	          
+{
+
 	union U_ISP_CORE_AE_CTL stAeCtl;
 	stAeCtl.u32 = 0;
 	stAeCtl.bits.ae_as_en = pstAeCtl->ae_as_en;
@@ -264,7 +264,7 @@ int Isp_Drv_R2k_Core_SetAeCtl(struct k510_isp_device *isp,ISP_CORE_AE_CTL_S *pst
 	stDnWaitTime.u32 = 0;
 	stDnWaitTime.bits.ae_dn_switch_wait_time = pstAeCtl->ae_dn_switch_wait_time;
 	isp_reg_writel(isp,stDnWaitTime.u32,ISP_IOMEM_R2K_CORE,ISP_CORE_AE_DN_SWITCH_WAIT_TIME);
- 
+
  	union U_ISP_CORE_APE_DIFF_MAX stApeDiffMax;
 	stApeDiffMax.u32 = 0;
 	stApeDiffMax.bits.ape_max_diff = pstAeCtl->ape_max_diff;
@@ -298,13 +298,13 @@ int Isp_Drv_R2k_Core_SetAeCtl(struct k510_isp_device *isp,ISP_CORE_AE_CTL_S *pst
 	union U_ISP_CORE_APE_DAMP_MANUAL_VALUE stDampManValue;
 	stDampManValue.u32 = 0;
 	stDampManValue.bits.ape_damp_manual_value = pstAeCtl->ape_damp_manual_value;
-	isp_reg_writel(isp,stDampManValue.u32,ISP_IOMEM_R2K_CORE,ISP_CORE_APE_DAMP_MANUAL_VALUE);	
+	isp_reg_writel(isp,stDampManValue.u32,ISP_IOMEM_R2K_CORE,ISP_CORE_APE_DAMP_MANUAL_VALUE);
 	return 0;
 }
 /**
- * @brief 
- * 
- * @return int 
+ * @brief
+ *
+ * @return int
  */
 int Isp_Drv_R2k_Core_GetAeLongCurEx(struct k510_isp_device *isp)
 {
@@ -314,9 +314,9 @@ int Isp_Drv_R2k_Core_GetAeLongCurEx(struct k510_isp_device *isp)
 	return data;
 }
 /**
- * @brief 
- * 
- * @return int 
+ * @brief
+ *
+ * @return int
  */
 int Isp_Drv_R2k_Core_GetAeCurDigitalGain(struct k510_isp_device *isp)
 {
@@ -326,10 +326,10 @@ int Isp_Drv_R2k_Core_GetAeCurDigitalGain(struct k510_isp_device *isp)
 	return data;
 }
 /**
- * @brief 
- * 
- * @param pAeSts 
- * @return int 
+ * @brief
+ *
+ * @param pAeSts
+ * @return int
  */
 int Isp_Drv_R2k_Core_GetAeSts(struct k510_isp_device *isp,ISP_CORE_AE_STS_S *pAeSts)
 {
@@ -373,9 +373,9 @@ int Isp_Drv_R2k_Core_GetAeSts(struct k510_isp_device *isp,ISP_CORE_AE_STS_S *pAe
   	union U_ISP_CORE_AE_PIXEL_SUM            gtAePixelSum;
   	gtAePixelSum.u32 = isp_reg_readl(isp,ISP_IOMEM_R2K_CORE,ISP_CORE_AE_PIXEL_SUM);
   	pAeSts->ae_mid_cur_ex =  gtAePixelSum.u32;
-  
+
   	return 0;
-} 
+}
 /*
 *AWB
 */
@@ -406,7 +406,7 @@ int Isp_Drv_R2k_Core_SetAwbCtl(struct k510_isp_device *isp,ISP_CORE_AWB_CTL_S *p
 	stD65BlueGain.u32 = 0;
 	stD65BlueGain.bits.awb_d65_blue_gain = pstAwbCtl->awb_d65_blue_gain;
 	isp_reg_writel(isp,stD65BlueGain.u32,ISP_IOMEM_R2K_CORE,ISP_CORE_AWB_D65_BLUE_GAIN);
-        
+
  	union U_ISP_CORE_CCM_RR_COFF stRrCoff;
 	stRrCoff.u32 = 0;
 	stRrCoff.bits.ccm_rr_coff = pstAwbCtl->ccm_rr_coff;
@@ -451,7 +451,7 @@ int Isp_Drv_R2k_Core_SetAwbCtl(struct k510_isp_device *isp,ISP_CORE_AWB_CTL_S *p
 	stBbCoff.u32 = 0;
 	stBbCoff.bits.ccm_bb_coff = pstAwbCtl->ccm_bb_coff;
 	isp_reg_writel(isp,stBbCoff.u32,ISP_IOMEM_R2K_CORE,ISP_CORE_CCM_BB_COFF);
-       
+
  	union U_ISP_CORE_CCM_CORRECT_COFF stCorrCoff;
 	stCorrCoff.u32 = 0;
 	stCorrCoff.bits.ccm_correct_coff = pstAwbCtl->ccm_correct_coff;
@@ -486,7 +486,7 @@ int Isp_Drv_R2k_Core_SetAwbCtl(struct k510_isp_device *isp,ISP_CORE_AWB_CTL_S *p
 	stResTime.u32 = 0;
 	stResTime.bits.awb_color_changeres_time = pstAwbCtl->awb_color_changeres_time;
 	isp_reg_writel(isp, stResTime.u32,ISP_IOMEM_R2K_CORE,ISP_CORE_AWB_RES_TIME);
-    
+
  	union U_ISP_CORE_AWB_HIST_TH stHistTh;
 	stHistTh.u32 = 0;
 	stHistTh.bits.awb_historgram_th = pstAwbCtl->awb_historgram_th;
@@ -525,7 +525,7 @@ int Isp_Drv_R2k_Core_SetAwbCtl(struct k510_isp_device *isp,ISP_CORE_AWB_CTL_S *p
 	union U_ISP_CORE_AWB_BLUE_MIN_VALUE stBlueMinValue;
 	stBlueMinValue.u32 = 0;
 	stBlueMinValue.bits.awb_blue_min_value = pstAwbCtl->awb_blue_min_value;
-	isp_reg_writel(isp, stBlueMinValue.u32,ISP_IOMEM_R2K_CORE,ISP_CORE_AWB_BLUE_MIN_VALUE);	
+	isp_reg_writel(isp, stBlueMinValue.u32,ISP_IOMEM_R2K_CORE,ISP_CORE_AWB_BLUE_MIN_VALUE);
 
 	union U_ISP_CORE_AWB_RED_OBJ_VALUE stRedObjValue;
 	stRedObjValue.u32 = 0;
@@ -542,7 +542,7 @@ int Isp_Drv_R2k_Core_SetAwbCtl(struct k510_isp_device *isp,ISP_CORE_AWB_CTL_S *p
 
 int Isp_Drv_R2k_Core_GetAwbSts(struct k510_isp_device *isp,ISP_CORE_AWB_STS_S *pAwbSts)
 {
-	
+
  	union U_ISP_CORE_AWB_BLUE_HIST_VALUE     gtAwbBHistVal;
   	gtAwbBHistVal.u32 = isp_reg_readl(isp,ISP_IOMEM_R2K_CORE,ISP_CORE_AWB_BLUE_HIST_VALUE);
   	pAwbSts->awb_blue_hist_value = gtAwbBHistVal.u32;
@@ -657,7 +657,7 @@ int Isp_Drv_R2k_Core_SetCscCtl(struct k510_isp_device *isp,ISP_CORE_CSC_CTL_S *p
 *ADA
 */
 int Isp_Drv_R2k_Core_SetAdaCtl(struct k510_isp_device *isp,ISP_CORE_ADA_CTL_S *pstAdaCtl)
-{    
+{
 
  	union U_ISP_CORE_ADA_CTL stCtl;
 	stCtl.u32 = 0;
@@ -707,8 +707,8 @@ int Isp_Drv_R2k_Core_SetAdaCtl(struct k510_isp_device *isp,ISP_CORE_ADA_CTL_S *p
 *rgbir
 */
 int Isp_Drv_R2k_Core_SetRgbIrCtl(struct k510_isp_device *isp,ISP_CORE_RGBIR_CTL_S *pstRgbIrCtl)
-{  
-	
+{
+
 	union U_ISP_CORE_RGBIR_CTL stCtl;
 	stCtl.u32 = 0;
 	stCtl.bits.rgbir_en = pstRgbIrCtl->rgbir_en;
@@ -746,11 +746,11 @@ int Isp_Drv_R2k_Core_SetRgbIrCtl(struct k510_isp_device *isp,ISP_CORE_RGBIR_CTL_
 	return 0;
 }
 /*
-* 2D Noise Reduction 
+* 2D Noise Reduction
 */
 int Isp_Drv_R2k_Core_Set2DnrCtl(struct k510_isp_device *isp,ISP_CORE_2DNR_CTL_S *pst2DnrCtl)
 {
-	
+
 	union U_ISP_CORE_2DNR_CTL stCtl;
 	stCtl.u32 = 0;
 	stCtl.bits.core_2dnr_pcf_en = pst2DnrCtl->core_2dnr_pcf_en;
@@ -797,7 +797,7 @@ int Isp_Drv_R2k_Core_Set2DnrCtl(struct k510_isp_device *isp,ISP_CORE_2DNR_CTL_S
 */
 int Isp_Drv_R2k_Core_SetEnhLtmCtl(struct k510_isp_device *isp,ISP_CORE_ENH_CTL_S *pstEnhCtl)
 {
-	
+
 	union U_ISP_CORE_ENH_CTL stCtl;
 	stCtl.u32 = isp_reg_readl(isp,ISP_IOMEM_R2K_CORE,ISP_CORE_ENH_CTL);
 	stCtl.bits.enh_ltm_en = pstEnhCtl->enh_ltm_en;
@@ -818,7 +818,7 @@ int Isp_Drv_R2k_Core_SetEnhLtmCtl(struct k510_isp_device *isp,ISP_CORE_ENH_CTL_S
 
 int Isp_Drv_R2k_Core_SetEnhCCCtl(struct k510_isp_device *isp,ISP_CORE_ENH_CTL_S *pstEnhCtl)
 {
-	
+
 	union U_ISP_CORE_ENH_CTL stCtl;
 	stCtl.u32 = isp_reg_readl(isp,ISP_IOMEM_R2K_CORE,ISP_CORE_ENH_CTL);
 	stCtl.bits.enh_cc_en = pstEnhCtl->enh_cc_en;
@@ -844,7 +844,7 @@ int Isp_Drv_R2k_Core_SetEnhCCCtl(struct k510_isp_device *isp,ISP_CORE_ENH_CTL_S
 
 int Isp_Drv_R2k_Core_SetEnhSharpenCtl(struct k510_isp_device *isp,ISP_CORE_ENH_CTL_S *pstEnhCtl)
 {
-	
+
 	union U_ISP_CORE_ENH_CTL stCtl;
 	stCtl.u32 = isp_reg_readl(isp,ISP_IOMEM_R2K_CORE,ISP_CORE_ENH_CTL);
 	stCtl.bits.enh_sharp_en = pstEnhCtl->enh_sharp_en;
@@ -858,11 +858,11 @@ int Isp_Drv_R2k_Core_SetEnhSharpenCtl(struct k510_isp_device *isp,ISP_CORE_ENH_C
 	return 0;
 }
 /*
-* POST Control 
+* POST Control
 */
 int Isp_Drv_R2k_Core_SetPostContCtl(struct k510_isp_device *isp,ISP_CORE_POST_CTL_S *pstPostCtl)
 {
-	
+
 	union U_ISP_CORE_POST_CTL stCtl;
 	stCtl.u32 = isp_reg_readl(isp,ISP_IOMEM_R2K_CORE,ISP_CORE_POST_CTL);
 	stCtl.bits.post_cont_ad_en = pstPostCtl->post_cont_ad_en;
@@ -877,7 +877,7 @@ int Isp_Drv_R2k_Core_SetPostContCtl(struct k510_isp_device *isp,ISP_CORE_POST_CT
 
 int Isp_Drv_R2k_Core_SetPostLumaCtl(struct k510_isp_device *isp,ISP_CORE_POST_CTL_S *pstPostCtl)
 {
-	
+
 	union U_ISP_CORE_POST_CTL stCtl;
 	stCtl.u32 = isp_reg_readl(isp,ISP_IOMEM_R2K_CORE,ISP_CORE_POST_CTL);
 	stCtl.bits.post_luma_ad_en = pstPostCtl->post_luma_ad_en;
@@ -905,14 +905,14 @@ int Isp_Drv_R2k_Core_SetPostSatuCtl(struct k510_isp_device *isp,ISP_CORE_POST_CT
 	return 0;
 }
 /*
-* OTC 
+* OTC
 */
 int Isp_Drv_R2k_Core_SetOtcCtl(struct k510_isp_device *isp,ISP_CORE_OTC_CTL_S *pstOtcCtl)
 {
 
 	union U_ISP_CORE_POST_CTL stCtl;
 	stCtl.u32 = isp_reg_readl(isp,ISP_IOMEM_R2K_CORE,ISP_CORE_POST_CTL);
-	stCtl.bits.post_otc_en = pstOtcCtl->post_otc_en;  
+	stCtl.bits.post_otc_en = pstOtcCtl->post_otc_en;
 	stCtl.bits.otc_yc_sel = pstOtcCtl->otc_yc_sel;
 	stCtl.bits.otc_uv_format_sel = pstOtcCtl->otc_uv_format_sel;
 	stCtl.bits.otc_hsync_pol_sel = pstOtcCtl->otc_hsync_pol_sel;
@@ -1003,16 +1003,16 @@ int Isp_Drv_R2k_Core_SetAfCtl(struct k510_isp_device *isp,ISP_CORE_AF_CTL_S *pst
 
 	union U_ISP_CORE_AF_STAT_WIN_H_END stAfWinHEnd;
 	stAfWinHEnd.u32 = 0;
-	stAfWinHEnd.bits.af_stat_win_h_end = pstAfCtl->af_stat_win_h_end;	
+	stAfWinHEnd.bits.af_stat_win_h_end = pstAfCtl->af_stat_win_h_end;
 	isp_reg_writel(isp,stAfWinHEnd.u32,ISP_IOMEM_R2K_CORE,ISP_CORE_AF_STAT_WIN_H_END);
 
 	union U_ISP_CORE_AF_STAT_WIN_V_END stAfWinVEnd;
 	stAfWinVEnd.u32 = 0;
-	stAfWinVEnd.bits.af_stat_win_v_end = pstAfCtl->af_stat_win_v_end;	
+	stAfWinVEnd.bits.af_stat_win_v_end = pstAfCtl->af_stat_win_v_end;
 	isp_reg_writel(isp,stAfWinVEnd.u32,ISP_IOMEM_R2K_CORE,ISP_CORE_AF_STAT_WIN_V_END);
 
 	return 0;
-}	
+}
 
 int Isp_Drv_R2k_Core_GetAfSts(struct k510_isp_device *isp,ISP_CORE_AF_STS_S *pgtAfSts)
 {
@@ -1026,7 +1026,7 @@ int Isp_Drv_R2k_Core_GetAfSts(struct k510_isp_device *isp,ISP_CORE_AF_STS_S *pgt
 	pgtAfSts->af_high_frq_data = gtAfHighFrqData.u32;
 
 	union U_ISP_CORE_AF_STAT_PIXEL_NUM       gtAfStatPixelNum;
-	gtAfStatPixelNum.u32 = isp_reg_readl(isp,ISP_IOMEM_R2K_CORE,ISP_CORE_AF_STAT_PIXEL_NUM);	
+	gtAfStatPixelNum.u32 = isp_reg_readl(isp,ISP_IOMEM_R2K_CORE,ISP_CORE_AF_STAT_PIXEL_NUM);
 	pgtAfSts->af_stat_pixel_num = gtAfStatPixelNum.u32;
 	return 0;
 }
@@ -1034,7 +1034,7 @@ int Isp_Drv_R2k_Core_GetAfSts(struct k510_isp_device *isp,ISP_CORE_AF_STS_S *pgt
 int Isp_Drv_R2k_Core_SetRamWrStatus(struct k510_isp_device *isp,unsigned int data)
 {
 
-	
+
 	isp_reg_writel(isp,data,ISP_IOMEM_R2K_CORE,ISP_CORE_RAM_WR_STATUS);
 
 	return 0;
@@ -1043,8 +1043,32 @@ int Isp_Drv_R2k_Core_SetRamWrStatus(struct k510_isp_device *isp,unsigned int dat
 int Isp_Drv_R2k_Core_GetRamRdStatus(struct k510_isp_device *isp)
 {
 
-	
+
 	int isp_ram_ready = isp_reg_readl(isp,ISP_IOMEM_R2K_CORE,ISP_CORE_RAM_RD_STATUS);
 
 	return isp_ram_ready;
+}
+
+/*
+*R2K Reg Opt
+*/
+
+int Isp_Drv_R2k_Core_SetReg(struct k510_isp_device *isp,ISP_CORE_REG_VAL_S *pRegVal)
+{
+	union U_ISP_CORE_REG_CFG_ADDR stRegAddr;
+	union U_ISP_CORE_REG_CFG_VALUE stRegVal;
+	stRegAddr.u32 = pRegVal->reg_addr;
+	stRegVal.u32 = pRegVal->reg_value;
+	isp_reg_writel(isp,stRegVal.u32,ISP_IOMEM_R2K_CORE,stRegAddr.u32);
+	return 0;
+}
+
+int Isp_Drv_R2k_Core_GetReg(struct k510_isp_device *isp,ISP_CORE_REG_VAL_S *pRegVal)
+{
+	union U_ISP_CORE_REG_CFG_ADDR gtRegAddr;
+	union U_ISP_CORE_REG_CFG_VALUE gtRegVal;
+	gtRegAddr.u32 = pRegVal->reg_addr;
+	gtRegVal.u32 = isp_reg_readl(isp,ISP_IOMEM_R2K_CORE,gtRegAddr.u32);
+	pRegVal->reg_value = gtRegVal.u32;
+	return 0;
 }
\ No newline at end of file
diff --git a/drivers/media/platform/canaan-isp/isp_2k/isp_f2k.c b/drivers/media/platform/canaan-isp/isp_2k/isp_f2k.c
index f743cc6b..41be41e5 100755
--- a/drivers/media/platform/canaan-isp/isp_2k/isp_f2k.c
+++ b/drivers/media/platform/canaan-isp/isp_2k/isp_f2k.c
@@ -46,69 +46,69 @@ static unsigned long long get_usec(void)
 *****************************************************************************/
 //
 void isp_f2k_wrap_SetComRst(struct k510_isp_device *isp)
-{    
+{
     ISP_WRAP_RST_CTL_S stRstCtl;
-	stRstCtl.sw_3dnr_rst = 1;    
+	stRstCtl.sw_3dnr_rst = 1;
 	stRstCtl.wdr_2_frame_rst = 1;
 	stRstCtl.wdr_3_frame_rst =1;
-	stRstCtl.ldc_rst = 1; 
-	stRstCtl.main_out_rst = 1;   
-	stRstCtl.ds0_out_rst = 1;    
-	stRstCtl.ds1_out_rst = 1;   
-	stRstCtl.ds2_out_rst = 1; 
-	stRstCtl.wrap_com_rst = 1;   
-	stRstCtl.wrap_cfg_rst = 1;   
-	stRstCtl.core_com_rst = 1;   
-	stRstCtl.core_cfg_rst = 1; 
-	stRstCtl.axi_wr_ch_rst = 1;  
-	stRstCtl.axi_rd_ch_rst = 1;     
+	stRstCtl.ldc_rst = 1;
+	stRstCtl.main_out_rst = 1;
+	stRstCtl.ds0_out_rst = 1;
+	stRstCtl.ds1_out_rst = 1;
+	stRstCtl.ds2_out_rst = 1;
+	stRstCtl.wrap_com_rst = 1;
+	stRstCtl.wrap_cfg_rst = 1;
+	stRstCtl.core_com_rst = 1;
+	stRstCtl.core_cfg_rst = 1;
+	stRstCtl.axi_wr_ch_rst = 1;
+	stRstCtl.axi_rd_ch_rst = 1;
     Isp_Drv_F2k_Wrap_SetPipeReset(isp,&stRstCtl);
 }
 //
 void isp_f2k_wrap_SetDmaRst(struct k510_isp_device *isp)
 {
-    
+
     ISP_WRAP_DMA_RST_CTL_S stDmaRstCtl;
-    stDmaRstCtl.y_3dnr_wr_ch_rst = 1;     
-    stDmaRstCtl.uv_3dnr_wr_ch_rst = 1;    
-    stDmaRstCtl.ldc_y_wr_ch_rst = 1;      
-    stDmaRstCtl.ldc_uv_wr_ch_rst = 1;     
-    stDmaRstCtl.wdr_raw_wr_ch_rst = 1;    
-    stDmaRstCtl.main_out_y_wr_ch_rst = 1; 
+    stDmaRstCtl.y_3dnr_wr_ch_rst = 1;
+    stDmaRstCtl.uv_3dnr_wr_ch_rst = 1;
+    stDmaRstCtl.ldc_y_wr_ch_rst = 1;
+    stDmaRstCtl.ldc_uv_wr_ch_rst = 1;
+    stDmaRstCtl.wdr_raw_wr_ch_rst = 1;
+    stDmaRstCtl.main_out_y_wr_ch_rst = 1;
     stDmaRstCtl.main_out_uv_wr_ch_rst = 1;
-    stDmaRstCtl.y_3dnr_rd_ch_rst = 1;     
-    stDmaRstCtl.uv_3dnr_rd_ch_rst = 1;    
-    stDmaRstCtl.ldc_y_rd_ch_rst = 1;      
-    stDmaRstCtl.ldc_uv_rd_ch_rst = 1;     
-    stDmaRstCtl.wdr_raw_rd_ch_rst = 1;    
-    stDmaRstCtl.ds0_out_y_wr_ch_rst = 1;  
-    stDmaRstCtl.ds0_out_uv_wr_ch_rst = 1; 
-    stDmaRstCtl.ds1_out_y_wr_ch_rst = 1;  
-    stDmaRstCtl.ds1_out_uv_wr_ch_rst = 1; 
-    stDmaRstCtl.ds2_out_r_wr_ch_rst = 1;  
-    stDmaRstCtl.ds2_out_g_wr_ch_rst = 1;  
-    stDmaRstCtl.ds2_out_b_wr_ch_rst = 1;  
-    stDmaRstCtl.ds0_osd0_rd_ch_rst = 1;   
-    stDmaRstCtl.ds0_osd1_rd_ch_rst = 1;   
-    stDmaRstCtl.ds1_osd0_rd_ch_rst = 1;   
-    stDmaRstCtl.ds1_osd1_rd_ch_rst = 1;   
-    stDmaRstCtl.ds2_osd0_rd_ch_rst = 1;   
-    stDmaRstCtl.ds2_osd1_rd_ch_rst = 1;   
-    stDmaRstCtl.ds1_osd2_rd_ch_rst = 1;   
-    stDmaRstCtl.ds2_osd2_rd_ch_rst = 1;   
+    stDmaRstCtl.y_3dnr_rd_ch_rst = 1;
+    stDmaRstCtl.uv_3dnr_rd_ch_rst = 1;
+    stDmaRstCtl.ldc_y_rd_ch_rst = 1;
+    stDmaRstCtl.ldc_uv_rd_ch_rst = 1;
+    stDmaRstCtl.wdr_raw_rd_ch_rst = 1;
+    stDmaRstCtl.ds0_out_y_wr_ch_rst = 1;
+    stDmaRstCtl.ds0_out_uv_wr_ch_rst = 1;
+    stDmaRstCtl.ds1_out_y_wr_ch_rst = 1;
+    stDmaRstCtl.ds1_out_uv_wr_ch_rst = 1;
+    stDmaRstCtl.ds2_out_r_wr_ch_rst = 1;
+    stDmaRstCtl.ds2_out_g_wr_ch_rst = 1;
+    stDmaRstCtl.ds2_out_b_wr_ch_rst = 1;
+    stDmaRstCtl.ds0_osd0_rd_ch_rst = 1;
+    stDmaRstCtl.ds0_osd1_rd_ch_rst = 1;
+    stDmaRstCtl.ds1_osd0_rd_ch_rst = 1;
+    stDmaRstCtl.ds1_osd1_rd_ch_rst = 1;
+    stDmaRstCtl.ds2_osd0_rd_ch_rst = 1;
+    stDmaRstCtl.ds2_osd1_rd_ch_rst = 1;
+    stDmaRstCtl.ds1_osd2_rd_ch_rst = 1;
+    stDmaRstCtl.ds2_osd2_rd_ch_rst = 1;
     Isp_Drv_F2k_Wrap_SetDmaReset(isp,&stDmaRstCtl);
 }
 //
 void isp_f2k_wrap_SetPipeClkCtl(struct k510_isp_device *isp)
 {
-    
+
     ISP_WRAP_PIPE_CLK_CTL_S pstPipeClkCtl;
     pstPipeClkCtl.wrap_com_clk_en = 1;
     pstPipeClkCtl.wrap_cfg_clk_en = 1;
     pstPipeClkCtl.core_com_clk_en = 1;
     pstPipeClkCtl.core_cfg_clk_en = 1;
-    pstPipeClkCtl.axi_wr_ch_en = 1;   
-    pstPipeClkCtl.axi_rd_ch_en = 1;    
+    pstPipeClkCtl.axi_wr_ch_en = 1;
+    pstPipeClkCtl.axi_rd_ch_en = 1;
 	Isp_Drv_F2k_Wrap_SetComClkCtl(isp,&pstPipeClkCtl);
 }
 //
@@ -152,7 +152,7 @@ void isp_f2k_wrap_SetWdr(struct k510_isp_device *isp,struct isp_wrap_wdr_info *w
 		stWdrModeCtl->wdr_long_l2_buf_depth = 0;
 		stWdrModeCtl->wdr_long_ch_mode = 0;
 		stWdrModeCtl->wdr_long_l2_buf_en = 0;
-		stWdrModeCtl->wdr_short_s1_buf_en = 0;				
+		stWdrModeCtl->wdr_short_s1_buf_en = 0;
 	}
     ISP_WRAP_WDR_PIXEL_FORMAT_CTL_S *stWdrPixelFormat = &pstWdrAttr.stWdrPixelFormat;
 	stWdrPixelFormat->wdr_long_img_format = ISP_RGBRAW_DATA;
@@ -164,13 +164,13 @@ void isp_f2k_wrap_SetWdr(struct k510_isp_device *isp,struct isp_wrap_wdr_info *w
 	stWdrBuf->wdr_buf_base = 0x0;
 	stWdrBuf->wdr_buf_size = 0x0;
 	stWdrBuf->wdr_line_stride = 0x0;
-    Isp_Drv_F2k_Wrap_SetWdr(isp,&pstWdrAttr); 
+    Isp_Drv_F2k_Wrap_SetWdr(isp,&pstWdrAttr);
 }
 //
 void isp_f2k_wrap_Set3dnr(struct k510_isp_device *isp,struct isp_wrap_3dnr_info *nr3dInfo)
 {
     ISP_WRAP_3DNR_ATTR_S pst3dnrAttr;
-	if( 1 == nr3dInfo->nr3d_en) 
+	if( 1 == nr3dInfo->nr3d_en)
 	{
 		pst3dnrAttr.clk_3dnr_en = 1;
 		pst3dnrAttr.pipe_3dnr_dma_en = 1;
@@ -223,7 +223,7 @@ void isp_f2k_wrap_SetLdc(struct k510_isp_device *isp,struct isp_wrap_ldc_info *l
 	{
 		pstLdcAttr.ldc_clk_en = 0;
 		pstLdcAttr.ldc_dma_en = 0;
-	}	
+	}
     ISP_WRAP_LDC_BUF_S              *stLdcBuf = &pstLdcAttr.stLdcBuf;
     stLdcBuf->ldc_y_buf_base = ldcInfo->ldc_y_buf_base;//ISP_BUF_LDC_Y;
     stLdcBuf->ldc_uv_buf_base = ldcInfo->ldc_uv_buf_base;//ISP_BUF_LDC_UV;
@@ -313,9 +313,9 @@ void isp_f2k_wrap_SetDs0Out(struct k510_isp_device *isp,struct isp_wrap_ds0_info
 		stDs0ClkCtl->ds_out0_osd0_ch_clk_en = 0;
 		stDs0ClkCtl->ds_out0_osd1_ch_clk_en = 0;
 		stDs0ClkCtl->ds_out0_osd2_ch_clk_en = 0;
-		stDs0DmaEn->ds_out0_dma_en = 0;	
+		stDs0DmaEn->ds_out0_dma_en = 0;
 		stDs0DmaEn->ds_out0_y_ch_dma_en =0;
-		stDs0DmaEn->ds_out0_uv_ch_dma_en = 0;	
+		stDs0DmaEn->ds_out0_uv_ch_dma_en = 0;
 		stDs0DmaEn->ds0_osd0_ch_dma_en =0;
 		stDs0DmaEn->ds0_osd1_ch_dma_en = 0;
 		stDs0DmaEn->ds0_osd2_ch_dma_en = 0;
@@ -334,7 +334,7 @@ void isp_f2k_wrap_SetDs0Out(struct k510_isp_device *isp,struct isp_wrap_ds0_info
     stDs0Buf->ds0_y_buf0_base = ds0Info->ds0_y_buf0_base;//ISP_BUF_DS0_Y;
     stDs0Buf->ds0_y_buf1_base = ds0Info->ds0_y_buf1_base;//ISP_BUF_DS0_Y;
     stDs0Buf->ds0_y_line_stride = ds0Info->ds0_line_stride;//(Width + 15)/16*16;//ISP_BUF_DS0_Y_STRIDE;
-    stDs0Buf->ds0_uv_line_stride = ds0Info->ds0_line_stride;//(Width + 15)/16*16;//ISP_BUF_DS0_UV_STRIDE;	
+    stDs0Buf->ds0_uv_line_stride = ds0Info->ds0_line_stride;//(Width + 15)/16*16;//ISP_BUF_DS0_UV_STRIDE;
     stDs0Buf->ds0_uv_buf0_base = ds0Info->ds0_uv_buf0_base;//ISP_BUF_DS0_Y + stDs0Buf->ds0_y_line_stride * Height;//ISP_BUF_DS0_UV;
     stDs0Buf->ds0_uv_buf1_base = ds0Info->ds0_uv_buf1_base;//ISP_BUF_DS0_Y + stDs0Buf->ds0_y_line_stride * Height;//ISP_BUF_DS0_UV;
     Isp_Drv_F2k_Wrap_SetDs0Out(isp,&pstDs0OutAttr);
@@ -351,7 +351,7 @@ void isp_f2k_wrap_SetDs1Out(struct k510_isp_device *isp,struct isp_wrap_ds1_info
 	stDs1ClkCtl->ds1_out_clk_en  = 1;
 	stDs1ClkCtl->ds1_out_y_ch_clk_en = 1;
 	stDs1ClkCtl->ds1_out_uv_ch_clk_en = 1;
-    
+
 	if( 1 == ds1Info->ds1_out_en)	{
 
 		stDs1ClkCtl->ds_out1_osd0_ch_clk_en = 0;
@@ -408,7 +408,7 @@ void isp_f2k_wrap_SetDs1Out(struct k510_isp_device *isp,struct isp_wrap_ds1_info
     stDs1Buf->ds1_y_buf0_base = ds1Info->ds1_y_buf0_base;//ISP_BUF_DS1_Y;
     stDs1Buf->ds1_y_buf1_base = ds1Info->ds1_y_buf1_base;//ISP_BUF_DS1_Y;
     stDs1Buf->ds1_y_line_stride = ds1Info->ds1_line_stride;//(Width +15)/16*16;//ISP_BUF_DS1_Y_STRIDE;
-    stDs1Buf->ds1_uv_line_stride = ds1Info->ds1_line_stride;//(Width +15)/16*16;//ISP_BUF_DS1_Y_STRIDE;	
+    stDs1Buf->ds1_uv_line_stride = ds1Info->ds1_line_stride;//(Width +15)/16*16;//ISP_BUF_DS1_Y_STRIDE;
     stDs1Buf->ds1_uv_buf0_base = ds1Info->ds1_uv_buf0_base;//ISP_BUF_DS1_Y + stDs1Buf->ds1_y_line_stride *Height;//ISP_BUF_DS1_UV;
     stDs1Buf->ds1_uv_buf1_base = ds1Info->ds1_uv_buf1_base;//ISP_BUF_DS1_Y + stDs1Buf->ds1_y_line_stride *Height;//ISP_BUF_DS1_UV;
     Isp_Drv_F2k_Wrap_SetDs1Out(isp,&pstDs1OutAttr);
@@ -465,7 +465,7 @@ void isp_f2k_wrap_SetDs2Out(struct k510_isp_device *isp,struct isp_wrap_ds2_info
 	}
     ISP_WRAP_DS2_PIXEL_FORMAT_CTL_S *stDs2PixelFormat = &pstDs2OutAttr.stDs2PixelFormat;
 	stDs2PixelFormat->ds2_out_img_format = ds2Info->ds2_out_img_format;//ISP_RGBRAW_DATA;
-	stDs2PixelFormat->ds2_out_img_out_format = ds2Info->ds2_out_img_out_format;//OUT_ARGB;     
+	stDs2PixelFormat->ds2_out_img_out_format = ds2Info->ds2_out_img_out_format;//OUT_ARGB;
 	stDs2PixelFormat->ds2_out_pixel_width = ds2Info->ds2_out_pxl_width;//PIXEL_8;
 	stDs2PixelFormat->ds2_out_yuv422_pxl_order = ds2Info->ds2_out_yuv422_pxl_order;//YUYV; //not need
 	stDs2PixelFormat->ds2_out_yuv_in_format = ds2Info->ds2_out_yuv_in_format;//IN_YUV422; //not need
@@ -482,12 +482,12 @@ void isp_f2k_wrap_SetDs2Out(struct k510_isp_device *isp,struct isp_wrap_ds2_info
     stDs2Buf->ds2_r_line_stride = ds2Info->ds2_line_stride;
     stDs2Buf->ds2_g_line_stride = ds2Info->ds2_line_stride;
     stDs2Buf->ds2_b_line_stride = ds2Info->ds2_line_stride;
-	Isp_Drv_F2k_Wrap_SetDs2Out(isp,&pstDs2OutAttr);	
+	Isp_Drv_F2k_Wrap_SetDs2Out(isp,&pstDs2OutAttr);
 }
 //
 void isp_f2k_wrap_SetDmaConfig(struct k510_isp_device *isp)
 {
-    
+
     ISP_WRAP_DMA_ATTR_S pstDmaAttr;
     unsigned int DmaChIndex = 0;
 	ISP_WRAP_DMA_MODE_S *stDmaChMode = &pstDmaAttr.stDmaChMode;
@@ -583,107 +583,107 @@ int isp_f2k_wrap_SetAxiCtl(struct k510_isp_device *isp)
 */
 int isp_f2k_wrap_SetIntMask(struct k510_isp_device *isp)
 {
-	
+
 	ISP_WRAP_CORE_INT_CTL_S stCoreIntCtl;
-    stCoreIntCtl.int_raw_in_mask= 1 ;  
-    stCoreIntCtl.int_3a_mask= 1 ;      
-    stCoreIntCtl.raw_int_mask= 1 ;     
-    stCoreIntCtl.rgb_int_mask= 1 ;     
-    stCoreIntCtl.yuv_int_mask= 1 ;     
-    stCoreIntCtl.ldc_int_mask= 1 ;     
+    stCoreIntCtl.int_raw_in_mask= 1 ;
+    stCoreIntCtl.int_3a_mask= 1 ;
+    stCoreIntCtl.raw_int_mask= 1 ;
+    stCoreIntCtl.rgb_int_mask= 1 ;
+    stCoreIntCtl.yuv_int_mask= 1 ;
+    stCoreIntCtl.ldc_int_mask= 1 ;
     stCoreIntCtl.main_out_int_mask= 1 ;
-    stCoreIntCtl.isp_awb_int_mask= 1 ; 
-    stCoreIntCtl.isp_ae_int_mask= 1 ;  
-    stCoreIntCtl.isp_af_int_mask= 1 ; 
+    stCoreIntCtl.isp_awb_int_mask= 1 ;
+    stCoreIntCtl.isp_ae_int_mask= 1 ;
+    stCoreIntCtl.isp_af_int_mask= 1 ;
     Isp_Drv_F2k_Wrap_SetCoreIntCtlMask(isp,&stCoreIntCtl);
 
     ISP_WRAP_DMA_WR_INT_MASK0_S stDmaWRMask0;
-    stDmaWRMask0.wr_3dnr_y_frm_end_int_mask= 1 ;    
-    stDmaWRMask0.wr_3dnr_y_line_base_int_mask= 1 ;  
+    stDmaWRMask0.wr_3dnr_y_frm_end_int_mask= 1 ;
+    stDmaWRMask0.wr_3dnr_y_line_base_int_mask= 1 ;
     stDmaWRMask0.wr_3dnr_y_err_frm_end_int_mask= 1 ;
-    stDmaWRMask0.wr_3dnr_y_err_immediate_int_mask= 1 ;     
-    stDmaWRMask0.wr_3dnr_uv_frm_end_int_mask= 1 ;   
-    stDmaWRMask0.wr_3dnr_uv_line_base_int_mask= 1 ; 
-    stDmaWRMask0.wr_3dnr_uv_err_frm_end_int_mask= 1 ;      
-    stDmaWRMask0.wr_3dnr_uv_err_immediate_int_mask= 1 ;    
-    stDmaWRMask0.ldc_wr_y_frm_end_int_mask= 1 ;     
-    stDmaWRMask0.ldc_wr_y_line_base_int_mask= 1 ;   
-    stDmaWRMask0.ldc_wr_y_err_frm_end_int_mask= 1 ; 
-    stDmaWRMask0.ldc_wr_y_err_immediate_int_mask= 1 ;      
-    stDmaWRMask0.ldc_wr_uv_frm_end_int_mask= 1 ;    
-    stDmaWRMask0.ldc_wr_uv_line_base_int_mask= 1 ;  
+    stDmaWRMask0.wr_3dnr_y_err_immediate_int_mask= 1 ;
+    stDmaWRMask0.wr_3dnr_uv_frm_end_int_mask= 1 ;
+    stDmaWRMask0.wr_3dnr_uv_line_base_int_mask= 1 ;
+    stDmaWRMask0.wr_3dnr_uv_err_frm_end_int_mask= 1 ;
+    stDmaWRMask0.wr_3dnr_uv_err_immediate_int_mask= 1 ;
+    stDmaWRMask0.ldc_wr_y_frm_end_int_mask= 1 ;
+    stDmaWRMask0.ldc_wr_y_line_base_int_mask= 1 ;
+    stDmaWRMask0.ldc_wr_y_err_frm_end_int_mask= 1 ;
+    stDmaWRMask0.ldc_wr_y_err_immediate_int_mask= 1 ;
+    stDmaWRMask0.ldc_wr_uv_frm_end_int_mask= 1 ;
+    stDmaWRMask0.ldc_wr_uv_line_base_int_mask= 1 ;
     stDmaWRMask0.ldc_wr_uv_err_frm_end_int_mask= 1 ;
-    stDmaWRMask0.ldc_wr_uv_err_immediate_int_mask= 1 ;     
-    stDmaWRMask0.wdr_wr_raw_frm_end_int_mask= 1 ;   
-    stDmaWRMask0.wdr_wr_raw_line_base_int_mask= 1 ; 
-    stDmaWRMask0.wdr_wr_raw_err_frm_end_int_mask= 1 ;      
-    stDmaWRMask0.wdr_wr_raw_err_immediate_int_mask= 1 ;    
+    stDmaWRMask0.ldc_wr_uv_err_immediate_int_mask= 1 ;
+    stDmaWRMask0.wdr_wr_raw_frm_end_int_mask= 1 ;
+    stDmaWRMask0.wdr_wr_raw_line_base_int_mask= 1 ;
+    stDmaWRMask0.wdr_wr_raw_err_frm_end_int_mask= 1 ;
+    stDmaWRMask0.wdr_wr_raw_err_immediate_int_mask= 1 ;
     stDmaWRMask0.main_out_wr_y_frm_end_int_mask= 1 ;
-    stDmaWRMask0.main_out_wr_y_line_base_int_mask= 1 ;     
-    stDmaWRMask0.main_out_wr_y_err_frm_end_int_mask= 1 ;   
-    stDmaWRMask0.main_out_wr_y_err_immediate_int_mask= 1 ; 
-    stDmaWRMask0.main_out_wr_uv_frm_end_int_mask= 1 ;      
-    stDmaWRMask0.main_out_wr_uv_line_base_int_mask= 1 ;    
-    stDmaWRMask0.main_out_wr_uv_err_frm_end_int_mask= 1 ;  
+    stDmaWRMask0.main_out_wr_y_line_base_int_mask= 1 ;
+    stDmaWRMask0.main_out_wr_y_err_frm_end_int_mask= 1 ;
+    stDmaWRMask0.main_out_wr_y_err_immediate_int_mask= 1 ;
+    stDmaWRMask0.main_out_wr_uv_frm_end_int_mask= 1 ;
+    stDmaWRMask0.main_out_wr_uv_line_base_int_mask= 1 ;
+    stDmaWRMask0.main_out_wr_uv_err_frm_end_int_mask= 1 ;
     stDmaWRMask0.main_out_wr_uv_err_immediate_int_mask= 1 ;
     Isp_Drv_F2k_Wrap_SetDmaWRIntMask0(isp,&stDmaWRMask0);
     ISP_WRAP_DMA_WR_INT_MASK1_S stDmaWRMask1;
-    stDmaWRMask1.ds0_out_wr_y_frm_end_mask= 1 ; 
-    stDmaWRMask1.ds0_out_wr_y_line_base_mask= 1 ;      
-    stDmaWRMask1.ds0_out_wr_y_err_frm_end_mask= 1 ;    
-    stDmaWRMask1.ds0_out_wr_y_err_immediate_mask= 1 ;  
+    stDmaWRMask1.ds0_out_wr_y_frm_end_mask= 1 ;
+    stDmaWRMask1.ds0_out_wr_y_line_base_mask= 1 ;
+    stDmaWRMask1.ds0_out_wr_y_err_frm_end_mask= 1 ;
+    stDmaWRMask1.ds0_out_wr_y_err_immediate_mask= 1 ;
     stDmaWRMask1.ds0_out_wr_uv_frm_end_mask= 1 ;
-    stDmaWRMask1.ds0_out_wr_uv_line_base_mask= 1 ;     
-    stDmaWRMask1.ds0_out_wr_uv_err_frm_end_mask= 1 ;   
-    stDmaWRMask1.ds0_out_wr_uv_err_immediate_mask= 1 ; 
-    stDmaWRMask1.ds1_out_wr_y_frm_end_mask= 1 ; 
-    stDmaWRMask1.ds1_out_wr_y_line_base_mask= 1 ;      
-    stDmaWRMask1.ds1_out_wr_y_err_frm_end_mask= 1 ;    
-    stDmaWRMask1.ds1_out_wr_y_err_immediate_mask= 1 ;  
+    stDmaWRMask1.ds0_out_wr_uv_line_base_mask= 1 ;
+    stDmaWRMask1.ds0_out_wr_uv_err_frm_end_mask= 1 ;
+    stDmaWRMask1.ds0_out_wr_uv_err_immediate_mask= 1 ;
+    stDmaWRMask1.ds1_out_wr_y_frm_end_mask= 1 ;
+    stDmaWRMask1.ds1_out_wr_y_line_base_mask= 1 ;
+    stDmaWRMask1.ds1_out_wr_y_err_frm_end_mask= 1 ;
+    stDmaWRMask1.ds1_out_wr_y_err_immediate_mask= 1 ;
     stDmaWRMask1.ds1_out_wr_uv_frm_end_mask= 1 ;
-    stDmaWRMask1.ds1_out_wr_uv_line_base_mask= 1 ;     
-    stDmaWRMask1.ds1_out_wr_uv_err_frm_end_mask= 1 ;   
-    stDmaWRMask1.ds1_out_wr_uv_err_immediate_mask= 1 ; 
-    stDmaWRMask1.ds2_out_wr_r_frm_end_mask= 1 ; 
-    stDmaWRMask1.ds2_out_wr_r_line_base_mask= 1 ;      
-    stDmaWRMask1.ds2_out_wr_r_err_frm_end_mask= 1 ;    
-    stDmaWRMask1.ds2_out_wr_r_err_immediate_mask= 1 ;  
-    stDmaWRMask1.ds2_out_wr_g_frm_end_mask= 1 ; 
-    stDmaWRMask1.ds2_out_wr_g_line_base_mask= 1 ;      
-    stDmaWRMask1.ds2_out_wr_g_err_frm_end_mask= 1 ;    
-    stDmaWRMask1.ds2_out_wr_g_err_immediate_mask= 1 ;  
-    stDmaWRMask1.ds2_out_wr_b_frm_end_mask= 1 ; 
-    stDmaWRMask1.ds2_out_wr_b_line_base_mask= 1 ;      
-    stDmaWRMask1.ds2_out_wr_b_err_frm_end_mask= 1 ;    
-    stDmaWRMask1.ds2_out_wr_b_err_immediate_mask= 1 ; 
+    stDmaWRMask1.ds1_out_wr_uv_line_base_mask= 1 ;
+    stDmaWRMask1.ds1_out_wr_uv_err_frm_end_mask= 1 ;
+    stDmaWRMask1.ds1_out_wr_uv_err_immediate_mask= 1 ;
+    stDmaWRMask1.ds2_out_wr_r_frm_end_mask= 1 ;
+    stDmaWRMask1.ds2_out_wr_r_line_base_mask= 1 ;
+    stDmaWRMask1.ds2_out_wr_r_err_frm_end_mask= 1 ;
+    stDmaWRMask1.ds2_out_wr_r_err_immediate_mask= 1 ;
+    stDmaWRMask1.ds2_out_wr_g_frm_end_mask= 1 ;
+    stDmaWRMask1.ds2_out_wr_g_line_base_mask= 1 ;
+    stDmaWRMask1.ds2_out_wr_g_err_frm_end_mask= 1 ;
+    stDmaWRMask1.ds2_out_wr_g_err_immediate_mask= 1 ;
+    stDmaWRMask1.ds2_out_wr_b_frm_end_mask= 1 ;
+    stDmaWRMask1.ds2_out_wr_b_line_base_mask= 1 ;
+    stDmaWRMask1.ds2_out_wr_b_err_frm_end_mask= 1 ;
+    stDmaWRMask1.ds2_out_wr_b_err_immediate_mask= 1 ;
     Isp_Drv_F2k_Wrap_SetDmaWRIntMask1(isp,&stDmaWRMask1);
     ISP_WRAP_DMA_RD_INT_MASK0_S stDmaRDMask0;
     stDmaRDMask0.rd_3dnr_y_frm_end_int_mask= 1 ;
-    stDmaRDMask0.rd_3dnr_y_line_base_int_mask= 1 ;     
-    stDmaRDMask0.rd_3dnr_y_err_frm_end_int_mask= 1 ;   
-    stDmaRDMask0.rd_3dnr_y_err_immediate_int_mask= 1 ; 
-    stDmaRDMask0.rd_3dnr_uv_frm_end_int_mask= 1 ;      
-    stDmaRDMask0.rd_3dnr_uv_line_base_int_mask= 1 ;    
-    stDmaRDMask0.rd_3dnr_uv_err_frm_end_int_mask= 1 ;  
+    stDmaRDMask0.rd_3dnr_y_line_base_int_mask= 1 ;
+    stDmaRDMask0.rd_3dnr_y_err_frm_end_int_mask= 1 ;
+    stDmaRDMask0.rd_3dnr_y_err_immediate_int_mask= 1 ;
+    stDmaRDMask0.rd_3dnr_uv_frm_end_int_mask= 1 ;
+    stDmaRDMask0.rd_3dnr_uv_line_base_int_mask= 1 ;
+    stDmaRDMask0.rd_3dnr_uv_err_frm_end_int_mask= 1 ;
     stDmaRDMask0.rd_3dnr_uv_err_immediate_int_mask= 1 ;
-    stDmaRDMask0.ldc_rd_y_frm_end_int_mask= 1 ; 
-    stDmaRDMask0.ldc_rd_y_line_base_int_mask= 1 ;      
-    stDmaRDMask0.ldc_rd_y_err_frm_end_int_mask= 1 ;    
-    stDmaRDMask0.ldc_rd_y_err_immediate_int_mask= 1 ;  
+    stDmaRDMask0.ldc_rd_y_frm_end_int_mask= 1 ;
+    stDmaRDMask0.ldc_rd_y_line_base_int_mask= 1 ;
+    stDmaRDMask0.ldc_rd_y_err_frm_end_int_mask= 1 ;
+    stDmaRDMask0.ldc_rd_y_err_immediate_int_mask= 1 ;
     stDmaRDMask0.ldc_rd_uv_frm_end_int_mask= 1 ;
-    stDmaRDMask0.ldc_rd_uv_line_base_int_mask= 1 ;     
-    stDmaRDMask0.ldc_rd_uv_err_frm_end_int_mask= 1 ;   
-    stDmaRDMask0.ldc_rd_uv_err_immediate_int_mask= 1 ; 
-    stDmaRDMask0.wdr_rd_raw_frm_end_int_mask= 1 ;      
-    stDmaRDMask0.wdr_rd_raw_line_base_int_mask= 1 ;    
-    stDmaRDMask0.wdr_rd_raw_err_frm_end_int_mask= 1 ;  
+    stDmaRDMask0.ldc_rd_uv_line_base_int_mask= 1 ;
+    stDmaRDMask0.ldc_rd_uv_err_frm_end_int_mask= 1 ;
+    stDmaRDMask0.ldc_rd_uv_err_immediate_int_mask= 1 ;
+    stDmaRDMask0.wdr_rd_raw_frm_end_int_mask= 1 ;
+    stDmaRDMask0.wdr_rd_raw_line_base_int_mask= 1 ;
+    stDmaRDMask0.wdr_rd_raw_err_frm_end_int_mask= 1 ;
     stDmaRDMask0.wdr_rd_raw_err_immediate_int_mask= 1 ;
-    Isp_Drv_F2k_Wrap_SetDmaRDIntMask0(isp,&stDmaRDMask0);  
+    Isp_Drv_F2k_Wrap_SetDmaRDIntMask0(isp,&stDmaRDMask0);
 }
 //
 int isp_f2k_wrap_SetConfigDone(struct k510_isp_device *isp,unsigned int wp_en)
 {
-	
+
     ISP_WRAP_CONFIG_DONE_S pstConfigDone;
 	pstConfigDone.int_polarity = 1;
 	pstConfigDone.sen_reg_pro_en = wp_en;//0;
@@ -703,7 +703,7 @@ int isp_f2k_wrap_reset(struct k510_isp_device *isp)
 {
 	unsigned int stData;
 	union U_ISP_WRAP_AXI_CTL axi_ctl;
-	
+
 	isp_f2k_wrap_SetConfigDone(isp,1);
 	//
 	stData = 0;
@@ -712,9 +712,9 @@ int isp_f2k_wrap_reset(struct k510_isp_device *isp)
 	msleep(50);
 
 	axi_ctl.u32 = 0;
-	axi_ctl.bits.axi_wr_ch_rst_req = 1;   
-	axi_ctl.bits.axi_rd_ch_rst_req = 1;        
-	isp_reg_writel(isp, axi_ctl.u32, ISP_IOMEM_F2K_WRAP, ISP_WRAP_AXI_CTL);	
+	axi_ctl.bits.axi_wr_ch_rst_req = 1;
+	axi_ctl.bits.axi_rd_ch_rst_req = 1;
+	isp_reg_writel(isp, axi_ctl.u32, ISP_IOMEM_F2K_WRAP, ISP_WRAP_AXI_CTL);
 	axi_ctl.u32 = 0;
 	axi_ctl = (union U_ISP_WRAP_AXI_CTL)isp_reg_readl(isp, ISP_IOMEM_F2K_WRAP, ISP_WRAP_AXI_CTL);
 	printk("%s>AXI_CTL = 0x%x\n", __func__, axi_ctl);
@@ -726,10 +726,10 @@ int isp_f2k_wrap_reset(struct k510_isp_device *isp)
 	}
 
 	isp_f2k_wrap_SetConfigDone(isp,1);
-	
+
 	stData = 0;
 	isp_reg_writel(isp,stData,ISP_IOMEM_F2K_WRAP,ISP_WRAP_PIPE_CLK_CTL);
-	
+
 	//
 	stData = 0xffffffff;
 	isp_reg_writel(isp,stData,ISP_IOMEM_F2K_WRAP,ISP_WRAP_SWRST_CTL);
@@ -743,7 +743,7 @@ static int isp_f2k_wrap_config(struct isp_f2k_device *f2k,struct isp_wrap_cfg_in
 {
 	struct k510_isp_device *isp = to_isp_device(f2k);
     //struct isp_wrap_cfg_info *isp_wrap_cfg =&isp_cfg->isp_wrap_cfg;
-	isp_f2k_wrap_SetConfigDone(isp,1); 
+	isp_f2k_wrap_SetConfigDone(isp,1);
     //
     isp_f2k_wrap_SetComRst(isp);
     //
@@ -785,24 +785,24 @@ static int isp_f2k_wrap_config(struct isp_f2k_device *f2k,struct isp_wrap_cfg_in
     //
 	isp_f2k_wrap_SetIntMask(isp);
     //
-	isp_f2k_wrap_SetConfigDone(isp,0); 
+	isp_f2k_wrap_SetConfigDone(isp,0);
 
-    return 0; 
+    return 0;
 }
 //wrap int
 static int isp_f2k_wrap_setIntCore(struct k510_isp_device *isp,struct isp_wrap_intcore_info *intCoreEn)
 {
     ISP_WRAP_CORE_INT_CTL_S coreIntMask;
-    coreIntMask.int_raw_in_mask = ~intCoreEn->int_raw_in_en;  
-    coreIntMask.int_3a_mask = ~intCoreEn->int_3a_en;      
-    coreIntMask.raw_int_mask = ~intCoreEn->raw_int_en;     
-    coreIntMask.rgb_int_mask = ~intCoreEn->rgb_int_en;     
-    coreIntMask.yuv_int_mask = ~intCoreEn->yuv_int_en;     
-    coreIntMask.ldc_int_mask = ~intCoreEn->ldc_int_en;     
+    coreIntMask.int_raw_in_mask = ~intCoreEn->int_raw_in_en;
+    coreIntMask.int_3a_mask = ~intCoreEn->int_3a_en;
+    coreIntMask.raw_int_mask = ~intCoreEn->raw_int_en;
+    coreIntMask.rgb_int_mask = ~intCoreEn->rgb_int_en;
+    coreIntMask.yuv_int_mask = ~intCoreEn->yuv_int_en;
+    coreIntMask.ldc_int_mask = ~intCoreEn->ldc_int_en;
     coreIntMask.main_out_int_mask = ~intCoreEn->main_out_int_en;
-    coreIntMask.isp_awb_int_mask = ~intCoreEn->isp_awb_int_en; 
-    coreIntMask.isp_ae_int_mask = ~intCoreEn->isp_ae_int_en;  
-    coreIntMask.isp_af_int_mask = ~intCoreEn->isp_af_int_en;  
+    coreIntMask.isp_awb_int_mask = ~intCoreEn->isp_awb_int_en;
+    coreIntMask.isp_ae_int_mask = ~intCoreEn->isp_ae_int_en;
+    coreIntMask.isp_af_int_mask = ~intCoreEn->isp_af_int_en;
 	Isp_Drv_F2k_Wrap_SetCoreIntCtlMask(isp,&coreIntMask);
 	return 0;
 };
@@ -810,33 +810,33 @@ static int isp_f2k_wrap_setIntCore(struct k510_isp_device *isp,struct isp_wrap_i
 static int isp_f2k_wrap_setIntWr0(struct k510_isp_device *isp,struct isp_wrap_intwr0_info *intWr0En)
 {
     ISP_WRAP_DMA_WR_INT_MASK0_S wrIntMask0;
-    wrIntMask0.wr_3dnr_y_frm_end_int_mask = ~intWr0En->wr_3dnr_y_frm_end_int_en;  
-    wrIntMask0.wr_3dnr_y_line_base_int_mask = 1;  
+    wrIntMask0.wr_3dnr_y_frm_end_int_mask = ~intWr0En->wr_3dnr_y_frm_end_int_en;
+    wrIntMask0.wr_3dnr_y_line_base_int_mask = 1;
     wrIntMask0.wr_3dnr_y_err_frm_end_int_mask = 1;
-    wrIntMask0.wr_3dnr_y_err_immediate_int_mask = 1;     
-    wrIntMask0.wr_3dnr_uv_frm_end_int_mask = ~intWr0En->wr_3dnr_uv_frm_end_int_en; 
-    wrIntMask0.wr_3dnr_uv_line_base_int_mask = 1; 
-    wrIntMask0.wr_3dnr_uv_err_frm_end_int_mask = 1;      
-    wrIntMask0.wr_3dnr_uv_err_immediate_int_mask = 1;    
-    wrIntMask0.ldc_wr_y_frm_end_int_mask = ~intWr0En->ldc_wr_y_frm_end_int_en; 
-    wrIntMask0.ldc_wr_y_line_base_int_mask = 1;   
-    wrIntMask0.ldc_wr_y_err_frm_end_int_mask = 1; 
-    wrIntMask0.ldc_wr_y_err_immediate_int_mask = 1;      
-    wrIntMask0.ldc_wr_uv_frm_end_int_mask = ~intWr0En->ldc_wr_uv_frm_end_int_en;   
-    wrIntMask0.ldc_wr_uv_line_base_int_mask = 1;  
+    wrIntMask0.wr_3dnr_y_err_immediate_int_mask = 1;
+    wrIntMask0.wr_3dnr_uv_frm_end_int_mask = ~intWr0En->wr_3dnr_uv_frm_end_int_en;
+    wrIntMask0.wr_3dnr_uv_line_base_int_mask = 1;
+    wrIntMask0.wr_3dnr_uv_err_frm_end_int_mask = 1;
+    wrIntMask0.wr_3dnr_uv_err_immediate_int_mask = 1;
+    wrIntMask0.ldc_wr_y_frm_end_int_mask = ~intWr0En->ldc_wr_y_frm_end_int_en;
+    wrIntMask0.ldc_wr_y_line_base_int_mask = 1;
+    wrIntMask0.ldc_wr_y_err_frm_end_int_mask = 1;
+    wrIntMask0.ldc_wr_y_err_immediate_int_mask = 1;
+    wrIntMask0.ldc_wr_uv_frm_end_int_mask = ~intWr0En->ldc_wr_uv_frm_end_int_en;
+    wrIntMask0.ldc_wr_uv_line_base_int_mask = 1;
     wrIntMask0.ldc_wr_uv_err_frm_end_int_mask = 1;
-    wrIntMask0.ldc_wr_uv_err_immediate_int_mask = 1;     
-    wrIntMask0.wdr_wr_raw_frm_end_int_mask = ~intWr0En->wdr_wr_raw_frm_end_int_en;   
-    wrIntMask0.wdr_wr_raw_line_base_int_mask = 1; 
-    wrIntMask0.wdr_wr_raw_err_frm_end_int_mask = 1;      
-    wrIntMask0.wdr_wr_raw_err_immediate_int_mask = 1; 
+    wrIntMask0.ldc_wr_uv_err_immediate_int_mask = 1;
+    wrIntMask0.wdr_wr_raw_frm_end_int_mask = ~intWr0En->wdr_wr_raw_frm_end_int_en;
+    wrIntMask0.wdr_wr_raw_line_base_int_mask = 1;
+    wrIntMask0.wdr_wr_raw_err_frm_end_int_mask = 1;
+    wrIntMask0.wdr_wr_raw_err_immediate_int_mask = 1;
     wrIntMask0.main_out_wr_y_frm_end_int_mask = ~intWr0En->main_out_wr_y_frm_end_int_en;
-    wrIntMask0.main_out_wr_y_line_base_int_mask = 1;     
-    wrIntMask0.main_out_wr_y_err_frm_end_int_mask = 1;   
-    wrIntMask0.main_out_wr_y_err_immediate_int_mask = 1; 
-    wrIntMask0.main_out_wr_uv_frm_end_int_mask = ~intWr0En->main_out_wr_uv_frm_end_int_en;      
-    wrIntMask0.main_out_wr_uv_line_base_int_mask = 1;    
-    wrIntMask0.main_out_wr_uv_err_frm_end_int_mask = 1;  
+    wrIntMask0.main_out_wr_y_line_base_int_mask = 1;
+    wrIntMask0.main_out_wr_y_err_frm_end_int_mask = 1;
+    wrIntMask0.main_out_wr_y_err_immediate_int_mask = 1;
+    wrIntMask0.main_out_wr_uv_frm_end_int_mask = ~intWr0En->main_out_wr_uv_frm_end_int_en;
+    wrIntMask0.main_out_wr_uv_line_base_int_mask = 1;
+    wrIntMask0.main_out_wr_uv_err_frm_end_int_mask = 1;
     wrIntMask0.main_out_wr_uv_err_immediate_int_mask = 1;
 	Isp_Drv_F2k_Wrap_SetDmaWRIntMask0(isp,&wrIntMask0);
 	return 0;
@@ -846,33 +846,33 @@ static int isp_f2k_wrap_setIntWr1(struct k510_isp_device *isp,struct isp_wrap_in
 {
     ISP_WRAP_DMA_WR_INT_MASK1_S wrIntMask1;
 	wrIntMask1.ds0_out_wr_y_frm_end_mask = ~intWr1En->ds0_out_wr_y_frm_end_en;
-	wrIntMask1.ds0_out_wr_y_line_base_mask = 1;     
-	wrIntMask1.ds0_out_wr_y_err_frm_end_mask = 1;   
-	wrIntMask1.ds0_out_wr_y_err_immediate_mask = 1; 
-	wrIntMask1.ds0_out_wr_uv_frm_end_mask = ~intWr1En->ds0_out_wr_uv_frm_end_en;      
-	wrIntMask1.ds0_out_wr_uv_line_base_mask = 1;    
-	wrIntMask1.ds0_out_wr_uv_err_frm_end_mask = 1;  
+	wrIntMask1.ds0_out_wr_y_line_base_mask = 1;
+	wrIntMask1.ds0_out_wr_y_err_frm_end_mask = 1;
+	wrIntMask1.ds0_out_wr_y_err_immediate_mask = 1;
+	wrIntMask1.ds0_out_wr_uv_frm_end_mask = ~intWr1En->ds0_out_wr_uv_frm_end_en;
+	wrIntMask1.ds0_out_wr_uv_line_base_mask = 1;
+	wrIntMask1.ds0_out_wr_uv_err_frm_end_mask = 1;
 	wrIntMask1.ds0_out_wr_uv_err_immediate_mask = 1;
 	wrIntMask1.ds1_out_wr_y_frm_end_mask = ~intWr1En->ds1_out_wr_y_frm_end_en;
-	wrIntMask1.ds1_out_wr_y_line_base_mask = 1;     
-	wrIntMask1.ds1_out_wr_y_err_frm_end_mask = 1;   
-	wrIntMask1.ds1_out_wr_y_err_immediate_mask = 1; 
-	wrIntMask1.ds1_out_wr_uv_frm_end_mask = ~intWr1En->ds1_out_wr_uv_frm_end_en;      
-	wrIntMask1.ds1_out_wr_uv_line_base_mask = 1;    
-	wrIntMask1.ds1_out_wr_uv_err_frm_end_mask = 1;  
+	wrIntMask1.ds1_out_wr_y_line_base_mask = 1;
+	wrIntMask1.ds1_out_wr_y_err_frm_end_mask = 1;
+	wrIntMask1.ds1_out_wr_y_err_immediate_mask = 1;
+	wrIntMask1.ds1_out_wr_uv_frm_end_mask = ~intWr1En->ds1_out_wr_uv_frm_end_en;
+	wrIntMask1.ds1_out_wr_uv_line_base_mask = 1;
+	wrIntMask1.ds1_out_wr_uv_err_frm_end_mask = 1;
 	wrIntMask1.ds1_out_wr_uv_err_immediate_mask = 1;
 	wrIntMask1.ds2_out_wr_r_frm_end_mask = ~intWr1En->ds2_out_wr_r_frm_end_en;
-	wrIntMask1.ds2_out_wr_r_line_base_mask = 1;     
-	wrIntMask1.ds2_out_wr_r_err_frm_end_mask = 1;   
-	wrIntMask1.ds2_out_wr_r_err_immediate_mask = 1; 
+	wrIntMask1.ds2_out_wr_r_line_base_mask = 1;
+	wrIntMask1.ds2_out_wr_r_err_frm_end_mask = 1;
+	wrIntMask1.ds2_out_wr_r_err_immediate_mask = 1;
 	wrIntMask1.ds2_out_wr_g_frm_end_mask = ~intWr1En->ds2_out_wr_g_frm_end_en;
-	wrIntMask1.ds2_out_wr_g_line_base_mask = 1;     
-	wrIntMask1.ds2_out_wr_g_err_frm_end_mask = 1;   
-	wrIntMask1.ds2_out_wr_g_err_immediate_mask = 1; 
-	wrIntMask1.ds2_out_wr_b_frm_end_mask = ~intWr1En->ds2_out_wr_b_frm_end_en; 
-	wrIntMask1.ds2_out_wr_b_line_base_mask = 1;     
-	wrIntMask1.ds2_out_wr_b_err_frm_end_mask = 1;   
-	wrIntMask1.ds2_out_wr_b_err_immediate_mask = 1;   
+	wrIntMask1.ds2_out_wr_g_line_base_mask = 1;
+	wrIntMask1.ds2_out_wr_g_err_frm_end_mask = 1;
+	wrIntMask1.ds2_out_wr_g_err_immediate_mask = 1;
+	wrIntMask1.ds2_out_wr_b_frm_end_mask = ~intWr1En->ds2_out_wr_b_frm_end_en;
+	wrIntMask1.ds2_out_wr_b_line_base_mask = 1;
+	wrIntMask1.ds2_out_wr_b_err_frm_end_mask = 1;
+	wrIntMask1.ds2_out_wr_b_err_immediate_mask = 1;
 	Isp_Drv_F2k_Wrap_SetDmaWRIntMask1(isp,&wrIntMask1);
 	return 0;
 }
@@ -881,64 +881,64 @@ static int isp_f2k_wrap_setIntRd0(struct k510_isp_device *isp,struct isp_wrap_in
 {
     ISP_WRAP_DMA_RD_INT_MASK0_S rdIntMask0;
     rdIntMask0.rd_3dnr_y_frm_end_int_mask = ~intRd0En->rd_3dnr_y_frm_end_int_en;
-    rdIntMask0.rd_3dnr_y_line_base_int_mask = 1;     
-    rdIntMask0.rd_3dnr_y_err_frm_end_int_mask = 1;   
-    rdIntMask0.rd_3dnr_y_err_immediate_int_mask = 1; 
-    rdIntMask0.rd_3dnr_uv_frm_end_int_mask = ~intRd0En->rd_3dnr_uv_frm_end_int_en;      
-    rdIntMask0.rd_3dnr_uv_line_base_int_mask = 1;    
-    rdIntMask0.rd_3dnr_uv_err_frm_end_int_mask = 1;  
+    rdIntMask0.rd_3dnr_y_line_base_int_mask = 1;
+    rdIntMask0.rd_3dnr_y_err_frm_end_int_mask = 1;
+    rdIntMask0.rd_3dnr_y_err_immediate_int_mask = 1;
+    rdIntMask0.rd_3dnr_uv_frm_end_int_mask = ~intRd0En->rd_3dnr_uv_frm_end_int_en;
+    rdIntMask0.rd_3dnr_uv_line_base_int_mask = 1;
+    rdIntMask0.rd_3dnr_uv_err_frm_end_int_mask = 1;
     rdIntMask0.rd_3dnr_uv_err_immediate_int_mask = 1;
-    rdIntMask0.ldc_rd_y_frm_end_int_mask = ~intRd0En->ldc_rd_y_frm_end_int_en; 
-    rdIntMask0.ldc_rd_y_line_base_int_mask = 1;      
-    rdIntMask0.ldc_rd_y_err_frm_end_int_mask = 1;    
-    rdIntMask0.ldc_rd_y_err_immediate_int_mask = 1;  
+    rdIntMask0.ldc_rd_y_frm_end_int_mask = ~intRd0En->ldc_rd_y_frm_end_int_en;
+    rdIntMask0.ldc_rd_y_line_base_int_mask = 1;
+    rdIntMask0.ldc_rd_y_err_frm_end_int_mask = 1;
+    rdIntMask0.ldc_rd_y_err_immediate_int_mask = 1;
     rdIntMask0.ldc_rd_uv_frm_end_int_mask = ~intRd0En->ldc_rd_uv_frm_end_int_en;
-    rdIntMask0.ldc_rd_uv_line_base_int_mask = 1;     
-    rdIntMask0.ldc_rd_uv_err_frm_end_int_mask = 1;   
-    rdIntMask0.ldc_rd_uv_err_immediate_int_mask = 1; 
-    rdIntMask0.wdr_rd_raw_frm_end_int_mask = ~intRd0En->wdr_rd_raw_frm_end_int_en;      
-    rdIntMask0.wdr_rd_raw_line_base_int_mask = 1;    
-    rdIntMask0.wdr_rd_raw_err_frm_end_int_mask = 1;  
+    rdIntMask0.ldc_rd_uv_line_base_int_mask = 1;
+    rdIntMask0.ldc_rd_uv_err_frm_end_int_mask = 1;
+    rdIntMask0.ldc_rd_uv_err_immediate_int_mask = 1;
+    rdIntMask0.wdr_rd_raw_frm_end_int_mask = ~intRd0En->wdr_rd_raw_frm_end_int_en;
+    rdIntMask0.wdr_rd_raw_line_base_int_mask = 1;
+    rdIntMask0.wdr_rd_raw_err_frm_end_int_mask = 1;
     rdIntMask0.wdr_rd_raw_err_immediate_int_mask = 1;
 	Isp_Drv_F2k_Wrap_SetDmaRDIntMask0(isp,&rdIntMask0);
 	return 0;
 }
 
-void k510isp_f2k_irq_enable(struct k510_isp_device *isp,struct isp_irq_info *irq_info) 
+void k510isp_f2k_irq_enable(struct k510_isp_device *isp,struct isp_irq_info *irq_info)
 {
 	dev_dbg(isp->dev,"%s:start\n",__func__);
 	struct isp_wrap_intcore_info intCoreEn;
 	intCoreEn.int_raw_in_en = irq_info->raw_en;
 	if((1 ==irq_info->awb_en)||(1 ==irq_info->ae_en)||(1 ==irq_info->af_en))
 	{
-		intCoreEn.int_3a_en = 1; 
+		intCoreEn.int_3a_en = 1;
 	}
-	else 
-		intCoreEn.int_3a_en = 0;      
-	intCoreEn.raw_int_en = irq_info->raw_en;     
-	intCoreEn.rgb_int_en = irq_info->rgb_en;     
-	intCoreEn.yuv_int_en = irq_info->yuv_en;     
-	intCoreEn.ldc_int_en = irq_info->ldc_core_en;     
+	else
+		intCoreEn.int_3a_en = 0;
+	intCoreEn.raw_int_en = irq_info->raw_en;
+	intCoreEn.rgb_int_en = irq_info->rgb_en;
+	intCoreEn.yuv_int_en = irq_info->yuv_en;
+	intCoreEn.ldc_int_en = irq_info->ldc_core_en;
 	intCoreEn.main_out_int_en = irq_info->main_core_en;
 
 #if 0
-	intCoreEn.isp_awb_int_en = irq_info->awb_en; 
-	intCoreEn.isp_ae_int_en = irq_info->ae_en;  
-	intCoreEn.isp_af_int_en = irq_info->af_en;  
+	intCoreEn.isp_awb_int_en = irq_info->awb_en;
+	intCoreEn.isp_ae_int_en = irq_info->ae_en;
+	intCoreEn.isp_af_int_en = irq_info->af_en;
 #else
-	intCoreEn.isp_awb_int_en = 0; 
-	intCoreEn.isp_ae_int_en = 0;  
-	intCoreEn.isp_af_int_en = 0;  
+	intCoreEn.isp_awb_int_en = 0;
+	intCoreEn.isp_ae_int_en = 0;
+	intCoreEn.isp_af_int_en = 0;
 #endif
 	isp_f2k_wrap_setIntCore(isp,&intCoreEn);
 
 	struct isp_wrap_intwr0_info intWr0En;
-	intWr0En.wr_3dnr_y_frm_end_int_en = irq_info->nr3d_w_en; 
+	intWr0En.wr_3dnr_y_frm_end_int_en = irq_info->nr3d_w_en;
 	intWr0En.wr_3dnr_uv_frm_end_int_en = irq_info->nr3d_w_en;
 	intWr0En.ldc_wr_y_frm_end_int_en = irq_info->ldc_w_en;
 	intWr0En.ldc_wr_uv_frm_end_int_en = irq_info->ldc_w_en;
 	intWr0En.wdr_wr_raw_frm_end_int_en = irq_info->wdr_w_en;
-	intWr0En.main_out_wr_y_frm_end_int_en = irq_info->main_dma_en;     
+	intWr0En.main_out_wr_y_frm_end_int_en = irq_info->main_dma_en;
 	intWr0En.main_out_wr_uv_frm_end_int_en = irq_info->main_dma_en;
 	isp_f2k_wrap_setIntWr0(isp,&intWr0En);
 
@@ -955,7 +955,7 @@ void k510isp_f2k_irq_enable(struct k510_isp_device *isp,struct isp_irq_info *irq
 	struct isp_wrap_intrd0_info intRd0En;
 	intRd0En.rd_3dnr_y_frm_end_int_en = irq_info->nr3d_r_en;
 	intRd0En.rd_3dnr_uv_frm_end_int_en = irq_info->nr3d_r_en;
-	intRd0En.ldc_rd_y_frm_end_int_en = irq_info->ldc_r_en; 
+	intRd0En.ldc_rd_y_frm_end_int_en = irq_info->ldc_r_en;
 	intRd0En.ldc_rd_uv_frm_end_int_en = irq_info->ldc_r_en;
 	intRd0En.wdr_rd_raw_frm_end_int_en = irq_info->wdr_r_en;
 	isp_f2k_wrap_setIntRd0(isp,&intRd0En);
@@ -967,12 +967,12 @@ void k510isp_f2k_irq_enable(struct k510_isp_device *isp,struct isp_irq_info *irq
 static int isp_f2k_core_SetItc(struct k510_isp_device *isp,ITC_INFO_S *itcInfo)
 {
     ISP_CORE_ITC_CTL_S stItcCtl;
-	stItcCtl.hsync_pol = itcInfo->hsync_pol;    
-    stItcCtl.vsync_pol = itcInfo->vsync_pol;    
-    stItcCtl.hsync_input_timing = itcInfo->hsync_input_timing;  
+	stItcCtl.hsync_pol = itcInfo->hsync_pol;
+    stItcCtl.vsync_pol = itcInfo->vsync_pol;
+    stItcCtl.hsync_input_timing = itcInfo->hsync_input_timing;
     stItcCtl.vsync_input_timing = itcInfo->vsync_input_timing;
-    stItcCtl.mirror_ctl = itcInfo->flip_ctl;  
-    stItcCtl.video_format_ctl = itcInfo->video_fmt_sel; 
+    stItcCtl.mirror_ctl = itcInfo->flip_ctl;
+    stItcCtl.video_format_ctl = itcInfo->video_fmt_sel;
     Isp_Drv_F2k_Core_SetItcCtl(isp,&stItcCtl);
 	return 0;
 }
@@ -982,10 +982,10 @@ static int isp_f2k_core_SetImage(struct k510_isp_device *isp,ITC_INFO_S *itcInfo
 
     ISP_CORE_IMAGE_ATTR_S stImgAttr;
     stImgAttr.image_height = itcInfo->total_size.Height - 1;
-    stImgAttr.image_width = itcInfo->total_size.Width - 1; 
-    stImgAttr.image_v_start = itcInfo->itc_size.Height_st;      
-    stImgAttr.image_h_start = itcInfo->itc_size.Width_st;      
-    stImgAttr.image_active_width = itcInfo->itc_size.Width; 
+    stImgAttr.image_width = itcInfo->total_size.Width - 1;
+    stImgAttr.image_v_start = itcInfo->itc_size.Height_st;
+    stImgAttr.image_h_start = itcInfo->itc_size.Width_st;
+    stImgAttr.image_active_width = itcInfo->itc_size.Width;
     stImgAttr.image_active_height = itcInfo->itc_size.Height;
     Isp_Drv_F2k_Core_SetImageAttr(isp,&stImgAttr);
 	return 0;
@@ -1000,7 +1000,7 @@ static int isp_f2k_core_SetTpgCtl(struct k510_isp_device *isp,TPG_INFO_S *tpgInf
 	stTestCtl.test_pattern_sel = tpgInfo->tpg_sel;
 	stTestCtl.wdr_l_mul_data = tpgInfo->wdr_l_mul_data;
 	stTestCtl.wdr_m_mul_data = tpgInfo->wdr_m_mul_data;
-	stTestCtl.wdr_s_mul_data = tpgInfo->wdr_s_mul_data; 
+	stTestCtl.wdr_s_mul_data = tpgInfo->wdr_s_mul_data;
     Isp_Drv_F2k_Core_SetTestCtl(isp,&stTestCtl);
 	return 0;
 }
@@ -1020,13 +1020,13 @@ static int isp_f2k_core_SetLscCtl(struct k510_isp_device *isp,LSC_INFO_S *lscInf
 {
 
     ISP_CORE_LSC_CTL_S stLscCtl;
-    stLscCtl.lsc_en = lscInfo->lsc_en; 
-    stLscCtl.lsc_h_center = lscInfo->lsc_h_center;     
+    stLscCtl.lsc_en = lscInfo->lsc_en;
+    stLscCtl.lsc_h_center = lscInfo->lsc_h_center;
     stLscCtl.lsc_v_center = lscInfo->lsc_v_center;
     stLscCtl.lsc_red_ratio = lscInfo->lsc_r_ratio;
-    stLscCtl.lsc_green_ratio = lscInfo->lsc_g_ratio;  
-    stLscCtl.lsc_blue_ratio = lscInfo->lsc_b_ratio;   
-    stLscCtl.lsc_ir_ratio = lscInfo->lsc_ir_ratio;  
+    stLscCtl.lsc_green_ratio = lscInfo->lsc_g_ratio;
+    stLscCtl.lsc_blue_ratio = lscInfo->lsc_b_ratio;
+    stLscCtl.lsc_ir_ratio = lscInfo->lsc_ir_ratio;
     Isp_Drv_F2k_Core_SetLscCtl(isp,&stLscCtl);
 	return 0;
 }
@@ -1035,42 +1035,42 @@ static int isp_f2k_core_SetAeCtl(struct k510_isp_device *isp,AE_INFO_S *aeInfo)
 {
 
     ISP_CORE_AE_CTL_S stAeCtl;
-    stAeCtl.ae_as_en = aeInfo->ae_as_en;       
-    stAeCtl.ae_ag_en = aeInfo->ae_ag_en;       
-    stAeCtl.ae_airis_en = aeInfo->ae_airis_en;    
+    stAeCtl.ae_as_en = aeInfo->ae_as_en;
+    stAeCtl.ae_ag_en = aeInfo->ae_ag_en;
+    stAeCtl.ae_airis_en = aeInfo->ae_airis_en;
     stAeCtl.ae_enter_ls_sel = aeInfo->ae_enter_ls_sel;
-    stAeCtl.ae_exit_ls_sel = aeInfo->ae_exit_ls_sel; 
+    stAeCtl.ae_exit_ls_sel = aeInfo->ae_exit_ls_sel;
     stAeCtl.ae_win_mode_sel = aeInfo->ae_win_mode_sel;
     stAeCtl.ae_back_light_mode_sel = aeInfo->ae_back_light_mode_sel;
-    stAeCtl.ae_day_change_en = aeInfo->ae_day_change_en;    
-    stAeCtl.ae_day_change_sel = aeInfo->ae_day_change_sel;     
+    stAeCtl.ae_day_change_en = aeInfo->ae_day_change_en;
+    stAeCtl.ae_day_change_sel = aeInfo->ae_day_change_sel;
     stAeCtl.ae_win_h_start = aeInfo->ae_win_size.h_start;
     stAeCtl.ae_win_v_start = aeInfo->ae_win_size.v_start;
-    stAeCtl.ae_win_h_end = aeInfo->ae_win_size.h_end;  
-    stAeCtl.ae_win_v_end = aeInfo->ae_win_size.v_end;  
-    stAeCtl.ae_tar_bright = aeInfo->ae_tar_bright;      
+    stAeCtl.ae_win_h_end = aeInfo->ae_win_size.h_end;
+    stAeCtl.ae_win_v_end = aeInfo->ae_win_size.v_end;
+    stAeCtl.ae_tar_bright = aeInfo->ae_tar_bright;
     stAeCtl.ae_tar_bright_range = aeInfo->ae_tar_bright_range;
     stAeCtl.ae_l_ex_time = aeInfo->ae_l_ex_time;
     stAeCtl.ae_m_ex_time = aeInfo->ae_m_ex_time;
     stAeCtl.ae_s_ex_time = aeInfo->ae_s_ex_time;
-    stAeCtl.ae_agc = aeInfo->ae_agc;     
+    stAeCtl.ae_agc = aeInfo->ae_agc;
     stAeCtl.ae_ad_shuttle_freq = aeInfo->ae_ad_shuttle_freq;
     stAeCtl.ae_ad_gain_freq = aeInfo->ae_ad_gain_freq;
     stAeCtl.ae_adjust_step_max = aeInfo->ae_adjust_step_max;
-    stAeCtl.ae_ex_value_max = aeInfo->ae_ex_value_max;  
-    stAeCtl.ae_ex_value_mid = aeInfo->ae_ex_value_mid;    
-    stAeCtl.ae_ex_value_min = aeInfo->ae_ex_value_min; 
-    stAeCtl.ae_gain_value_max = aeInfo->ae_gain_value_max;    
+    stAeCtl.ae_ex_value_max = aeInfo->ae_ex_value_max;
+    stAeCtl.ae_ex_value_mid = aeInfo->ae_ex_value_mid;
+    stAeCtl.ae_ex_value_min = aeInfo->ae_ex_value_min;
+    stAeCtl.ae_gain_value_max = aeInfo->ae_gain_value_max;
     stAeCtl.ae_gain_value_mid = aeInfo->ae_gain_value_mid;
     stAeCtl.ae_gain_value_min = aeInfo->ae_gain_value_min;
     stAeCtl.ae_dn_switch_ad_step_max = aeInfo->ae_dn_switch_ad_step_max;
     stAeCtl.ae_dn_switch_wait_time = aeInfo->ae_dn_switch_wait_time;
     stAeCtl.ape_max_diff = aeInfo->ape_max_diff;
-    stAeCtl.ape_drv_signal_max = aeInfo->ape_drv_signal_max;    
-    stAeCtl.ape_coeff_distance = aeInfo->ape_coeff_distance;    
+    stAeCtl.ape_drv_signal_max = aeInfo->ape_drv_signal_max;
+    stAeCtl.ape_coeff_distance = aeInfo->ape_coeff_distance;
     stAeCtl.ape_coeff_speed = aeInfo->ape_coeff_speed;
     stAeCtl.ape_coeff_acceleration = aeInfo->ape_coeff_acceleration;
-    stAeCtl.ape_drv_manual_value = aeInfo->ape_drv_manual_value;  
+    stAeCtl.ape_drv_manual_value = aeInfo->ape_drv_manual_value;
     stAeCtl.ape_damp_manual_value = aeInfo->ape_damp_manual_value;
     Isp_Drv_F2k_Core_SetAeCtl(isp,&stAeCtl);
 	return 0;
@@ -1096,16 +1096,16 @@ static int isp_f2k_core_GetAeSts(struct k510_isp_device *isp,struct k510isp_ae_s
 static int isp_f2k_core_SetAwbCtl(struct k510_isp_device *isp,AWB_INFO_S *awbInfo)
 {
     ISP_CORE_AWB_CTL_S stAwbCtl;
-    stAwbCtl.awb_d65_en = awbInfo->awb_d65_en; 
-    stAwbCtl.awb_ccm_en = awbInfo->awb_ccm_en; 
-    stAwbCtl.awb_en = awbInfo->awb_en;     
+    stAwbCtl.awb_d65_en = awbInfo->awb_d65_en;
+    stAwbCtl.awb_ccm_en = awbInfo->awb_ccm_en;
+    stAwbCtl.awb_en = awbInfo->awb_en;
     stAwbCtl.awb_mode_sel = awbInfo->awb_mode_sel;
     stAwbCtl.awb_hist_mode_sel = awbInfo->awb_hist_mode_sel;
-    stAwbCtl.awb_veri_en = awbInfo->awb_veri_en;      
-    stAwbCtl.awb_mode_sel = awbInfo->awb_mode_sel;     
+    stAwbCtl.awb_veri_en = awbInfo->awb_veri_en;
+    stAwbCtl.awb_mode_sel = awbInfo->awb_mode_sel;
     stAwbCtl.awb_value_save_en = awbInfo->awb_value_save_en;
     stAwbCtl.awb_ccm_adp_adjust_en = awbInfo->awb_ccm_adp_adjust_en;
-    stAwbCtl.awb_stab_en = awbInfo->awb_stab_en;   
+    stAwbCtl.awb_stab_en = awbInfo->awb_stab_en;
     stAwbCtl.awb_d65_red_gain = awbInfo->awb_d65_red_gain;
     stAwbCtl.awb_d65_blue_gain = awbInfo->awb_d65_blue_gain;
     stAwbCtl.ccm_rr_coff = awbInfo->ccm_coff[0][0];
@@ -1120,16 +1120,16 @@ static int isp_f2k_core_SetAwbCtl(struct k510_isp_device *isp,AWB_INFO_S *awbInf
     stAwbCtl.ccm_correct_coff = awbInfo->ccm_correct_coff;
     stAwbCtl.awb_win_h_start = awbInfo->awb_win_size.h_start;
     stAwbCtl.awb_win_v_start = awbInfo->awb_win_size.v_start;
-    stAwbCtl.awb_win_h_end = awbInfo->awb_win_size.h_end;  
-    stAwbCtl.awb_win_v_end = awbInfo->awb_win_size.v_end;  
-    stAwbCtl.awb_correct_diff_th = awbInfo->awb_correct_diff_th;     
+    stAwbCtl.awb_win_h_end = awbInfo->awb_win_size.h_end;
+    stAwbCtl.awb_win_v_end = awbInfo->awb_win_size.v_end;
+    stAwbCtl.awb_correct_diff_th = awbInfo->awb_correct_diff_th;
     stAwbCtl.awb_color_changeres_time = awbInfo->awb_color_changeres_time;
     stAwbCtl.awb_historgram_th = awbInfo->awb_historgram_th;
-    stAwbCtl.awb_red_gain_adjust = awbInfo->awb_red_gain_adjust;     
-    stAwbCtl.awb_green_gain_adjust = awbInfo->awb_green_gain_adjust;   
+    stAwbCtl.awb_red_gain_adjust = awbInfo->awb_red_gain_adjust;
+    stAwbCtl.awb_green_gain_adjust = awbInfo->awb_green_gain_adjust;
     stAwbCtl.awb_blue_gain_adjust = awbInfo->awb_blue_gain_adjust;
     stAwbCtl.awb_red_max_value = awbInfo->awb_red_max_value;
-    stAwbCtl.awb_blue_max_value = awbInfo->awb_blue_max_value;      
+    stAwbCtl.awb_blue_max_value = awbInfo->awb_blue_max_value;
     stAwbCtl.awb_red_min_value = awbInfo->awb_red_min_value;
     stAwbCtl.awb_blue_min_value = awbInfo->awb_blue_min_value;
     stAwbCtl.awb_red_obj_value = awbInfo->awb_red_obj_value;
@@ -1137,29 +1137,50 @@ static int isp_f2k_core_SetAwbCtl(struct k510_isp_device *isp,AWB_INFO_S *awbInf
     Isp_Drv_F2k_Core_SetAwbCtl(isp,&stAwbCtl);
 	return 0;
 }
+
+// reg opt
+
+static int isp_f2k_core_RegSet(struct k510_isp_device *isp,struct k510isp_reg_val *reg_val)
+{
+	ISP_CORE_REG_VAL_S stRegVal;
+	stRegVal.reg_addr = reg_val->reg_addr;
+	stRegVal.reg_value = reg_val->reg_value;
+	Isp_Drv_F2k_Core_SetReg(isp,&stRegVal);
+	return 0;
+}
+
+static int isp_f2k_core_RegGet(struct k510_isp_device *isp,struct k510isp_reg_val *reg_val)
+{
+	ISP_CORE_REG_VAL_S gtRegVal;
+	gtRegVal.reg_addr = reg_val->reg_addr;
+	Isp_Drv_F2k_Core_GetReg(isp,&gtRegVal);
+	reg_val->reg_value = gtRegVal.reg_value;
+	return 0;
+}
+
 //WDR
 static int isp_f2k_core_SetWdrCtl(struct k510_isp_device *isp,struct isp_core_wdr_Info *wdrInfo)
 {
 
     ISP_CORE_WDR_CTL_S stWdrCtl;
-    stWdrCtl.wdr_fusion_en = wdrInfo->wdr_fusion_en;      
-    stWdrCtl.wdr_frame_sel = wdrInfo->wdr_frame_sel;      
-    stWdrCtl.wdr_adp_adjust_en = wdrInfo->wdr_adp_adjust_en;  
+    stWdrCtl.wdr_fusion_en = wdrInfo->wdr_fusion_en;
+    stWdrCtl.wdr_frame_sel = wdrInfo->wdr_frame_sel;
+    stWdrCtl.wdr_adp_adjust_en = wdrInfo->wdr_adp_adjust_en;
     stWdrCtl.wdr_stab_en = wdrInfo->wdr_stab_en;
-    stWdrCtl.wdr_en = wdrInfo->wdr_en;      
-    stWdrCtl.wdr_ghost_remove_en = wdrInfo->wdr_ghost_remove_en; 
+    stWdrCtl.wdr_en = wdrInfo->wdr_en;
+    stWdrCtl.wdr_ghost_remove_en = wdrInfo->wdr_ghost_remove_en;
     stWdrCtl.wdr_3frame_out_mode = wdrInfo->wdr_3frame_out_mode;
     stWdrCtl.wdr_mode_sel = wdrInfo->wdr_mode_sel;
     stWdrCtl.wdr_2frame_ex_ratio = wdrInfo->wdr_2frame_ex_ratio;
-    stWdrCtl.wdr_3frame_ex_ratio = wdrInfo->wdr_3frame_ex_ratio; 
-    stWdrCtl.wdr_stat_img_sel = wdrInfo->wdr_stat_img_sel;   
+    stWdrCtl.wdr_3frame_ex_ratio = wdrInfo->wdr_3frame_ex_ratio;
+    stWdrCtl.wdr_stat_img_sel = wdrInfo->wdr_stat_img_sel;
     stWdrCtl.wdr_ltm_data_sel = wdrInfo->wdr_ltm_data_sel;
     stWdrCtl.wdr_tz_data_sel = wdrInfo->wdr_tz_data_sel;
     stWdrCtl.wdr_remove_purple_en = wdrInfo->wdr_remove_purple_en;
     stWdrCtl.wdr_over_ex_ratio_th1 = wdrInfo->wdr_over_ex_ratio_th1;
     stWdrCtl.wdr_over_ex_ratio_th2 = wdrInfo->wdr_over_ex_ratio_th2;
     stWdrCtl.wdr_fusion_ratio_th = wdrInfo->wdr_fusion_ratio_th;
-    stWdrCtl.wdr_fusion_value1 = wdrInfo->wdr_fusion_value1;  
+    stWdrCtl.wdr_fusion_value1 = wdrInfo->wdr_fusion_value1;
     stWdrCtl.wdr_fusion_value2 = wdrInfo->wdr_fusion_value2;
     Isp_Drv_F2k_Core_SetWdrCtl(isp,&stWdrCtl);
 	return 0;
@@ -1185,21 +1206,21 @@ static int isp_f2k_core_SetCscCtl(struct k510_isp_device *isp,CSC_INFO_S *cscInf
 static int isp_f2k_core_SetAdaCtl(struct k510_isp_device *isp,ADA_INFO_S *adaInfo)
 {
     ISP_CORE_ADA_CTL_S stAdaCtl;
-    stAdaCtl.ada_rgb_gamma_en = adaInfo->ada_rgb_gamma_en; 
-    stAdaCtl.ada_yuv_gamma_en = adaInfo->ada_yuv_gamma_en; 
-    stAdaCtl.ada_adjust_en = adaInfo->ada_adjust_en;    
+    stAdaCtl.ada_rgb_gamma_en = adaInfo->ada_rgb_gamma_en;
+    stAdaCtl.ada_yuv_gamma_en = adaInfo->ada_yuv_gamma_en;
+    stAdaCtl.ada_adjust_en = adaInfo->ada_adjust_en;
     stAdaCtl.ada_img_stab_en = adaInfo->ada_img_stab_en;
     stAdaCtl.ada_ccr_en = adaInfo->ada_ccr_en;
     stAdaCtl.ada_adp_en = adaInfo->ada_adp_en;
-    stAdaCtl.ada_adp_ccr_en = adaInfo->ada_adp_ccr_en;   
+    stAdaCtl.ada_adp_ccr_en = adaInfo->ada_adp_ccr_en;
     stAdaCtl.ada_stat_mode_sel = adaInfo->ada_stat_mode_sel;
     stAdaCtl.ada_enh_mode_sel = adaInfo->ada_enh_mode_sel;
-    stAdaCtl.ada_stat_max_value = adaInfo->ada_stat_max_value; 
+    stAdaCtl.ada_stat_max_value = adaInfo->ada_stat_max_value;
     stAdaCtl.ada_ad_stren_max_value = adaInfo->ada_ad_stren_max_value;
     stAdaCtl.ada_win_h_start = adaInfo->ada_win_size.h_start;
     stAdaCtl.ada_win_v_start = adaInfo->ada_win_size.v_start;
-    stAdaCtl.ada_win_h_end = adaInfo->ada_win_size.h_end;  
-    stAdaCtl.ada_win_v_end = adaInfo->ada_win_size.v_end; 
+    stAdaCtl.ada_win_h_end = adaInfo->ada_win_size.h_end;
+    stAdaCtl.ada_win_v_end = adaInfo->ada_win_size.v_end;
     Isp_Drv_F2k_Core_SetAdaCtl(isp,&stAdaCtl);
 	return 0;
 }
@@ -1207,16 +1228,16 @@ static int isp_f2k_core_SetAdaCtl(struct k510_isp_device *isp,ADA_INFO_S *adaInf
 static int isp_f2k_core_SetRgbirCtl(struct k510_isp_device *isp,RGBIR_INFO_S *rgbirInfo)
 {
     ISP_CORE_RGBIR_CTL_S stRgbirCtl;
-    stRgbirCtl.rgbir_en = rgbirInfo->rgbir_en; 
-    stRgbirCtl.rgbir_rtf_en = rgbirInfo->rgbir_rtf_en;    
-    stRgbirCtl.rgbir_rpc_en = rgbirInfo->rgbir_rpc_en;    
+    stRgbirCtl.rgbir_en = rgbirInfo->rgbir_en;
+    stRgbirCtl.rgbir_rtf_en = rgbirInfo->rgbir_rtf_en;
+    stRgbirCtl.rgbir_rpc_en = rgbirInfo->rgbir_rpc_en;
     stRgbirCtl.rgbir_fusion_en = rgbirInfo->rgbir_fusion_en;
     stRgbirCtl.rgbir_output_sel = rgbirInfo->rgbir_output_sel;
-    stRgbirCtl.rgbir_rpc_max_value = rgbirInfo->rgbir_rpc_max_value; 
+    stRgbirCtl.rgbir_rpc_max_value = rgbirInfo->rgbir_rpc_max_value;
     stRgbirCtl.rgbir_rpc_color_coff = rgbirInfo->rgbir_rpc_color_coff;
-    stRgbirCtl.rgbir_rpc_luma_coff = rgbirInfo->rgbir_rpc_luma_coff; 
+    stRgbirCtl.rgbir_rpc_luma_coff = rgbirInfo->rgbir_rpc_luma_coff;
     stRgbirCtl.rgbir_rpc_th = rgbirInfo->rgbir_rpc_th;
-    stRgbirCtl.rgbir_rpc_th1 = rgbirInfo->rgbir_rpc_th1; 
+    stRgbirCtl.rgbir_rpc_th1 = rgbirInfo->rgbir_rpc_th1;
     Isp_Drv_F2k_Core_SetRgbIrCtl(isp,&stRgbirCtl);
 	return 0;
 }
@@ -1226,13 +1247,13 @@ static int isp_f2k_core_Set2dnrCtl(struct k510_isp_device *isp,NR2D_INFO_S *nr2d
     ISP_CORE_2DNR_CTL_S st2dnrCtl;
     st2dnrCtl.core_2dnr_pcf_en = nr2dInfo->d2nr_pcf_en;
     st2dnrCtl.core_2dnr_raw_en = nr2dInfo->d2nr_raw_en;
-    st2dnrCtl.core_2dnr_edge_en = nr2dInfo->d2nr_edge_en;      
+    st2dnrCtl.core_2dnr_edge_en = nr2dInfo->d2nr_edge_en;
     st2dnrCtl.core_2dnr_bap_en = nr2dInfo->d2nr_bap_en;
-    st2dnrCtl.core_2dnr_luma_en = nr2dInfo->d2nr_luma_en;      
-    st2dnrCtl.core_2dnr_chroma_en = nr2dInfo->d2nr_chroma_en;    
-    st2dnrCtl.core_2dnr_pcf_adp_en = nr2dInfo->d2nr_pcf_adp_en;   
-    st2dnrCtl.core_2dnr_raw_adp_en = nr2dInfo->d2nr_raw_adp_en;   
-    st2dnrCtl.core_2dnr_luma_adp_en = nr2dInfo->d2nr_luma_adp_en;  
+    st2dnrCtl.core_2dnr_luma_en = nr2dInfo->d2nr_luma_en;
+    st2dnrCtl.core_2dnr_chroma_en = nr2dInfo->d2nr_chroma_en;
+    st2dnrCtl.core_2dnr_pcf_adp_en = nr2dInfo->d2nr_pcf_adp_en;
+    st2dnrCtl.core_2dnr_raw_adp_en = nr2dInfo->d2nr_raw_adp_en;
+    st2dnrCtl.core_2dnr_luma_adp_en = nr2dInfo->d2nr_luma_adp_en;
     st2dnrCtl.core_2dnr_chroma_adp_en = nr2dInfo->d2nr_chroma_adp_en;
     st2dnrCtl.core_2dnr_raw_intensity = nr2dInfo->d2nr_raw_intensity;
     st2dnrCtl.core_2dnr_bap_intensity = nr2dInfo->d2nr_bap_intensity;
@@ -1246,32 +1267,32 @@ static int isp_f2k_core_Set2dnrCtl(struct k510_isp_device *isp,NR2D_INFO_S *nr2d
 static int isp_f2k_core_Set3dnrCtl(struct k510_isp_device *isp,NR3D_INFO_S *nr3dInfo)
 {
     ISP_CORE_3DNR_CTL_S st3dnrCtl;
-    st3dnrCtl.core_3dnr_en = nr3dInfo->d3nr_en;     
-    st3dnrCtl.core_3dnr_pre_luma_en = nr3dInfo->d3nr_pre_luma_en;  
-    st3dnrCtl.core_3dnr_pre_chroma_en = nr3dInfo->d3nr_pre_chroma_en; 
+    st3dnrCtl.core_3dnr_en = nr3dInfo->d3nr_en;
+    st3dnrCtl.core_3dnr_pre_luma_en = nr3dInfo->d3nr_pre_luma_en;
+    st3dnrCtl.core_3dnr_pre_chroma_en = nr3dInfo->d3nr_pre_chroma_en;
     st3dnrCtl.core_3dnr_main_luma_en = nr3dInfo->d3nr_main_luma_en;
     st3dnrCtl.core_3dnr_main_chroma_en = nr3dInfo->d3nr_main_chroma_en;
-    st3dnrCtl.core_3dnr_post_luma_en = nr3dInfo->d3nr_post_luma_en;  
+    st3dnrCtl.core_3dnr_post_luma_en = nr3dInfo->d3nr_post_luma_en;
     st3dnrCtl.core_3dnr_post_chroma_en = nr3dInfo->d3nr_post_chroma_en;
     st3dnrCtl.core_3dnr_2d_luma_en = nr3dInfo->d3nr_2d_luma_en;
     st3dnrCtl.core_3dnr_2d_chroma_en = nr3dInfo->d3nr_2d_luma_en;
-    st3dnrCtl.core_3dnr_wb_en = nr3dInfo->d3nr_wb_en;  
+    st3dnrCtl.core_3dnr_wb_en = nr3dInfo->d3nr_wb_en;
     st3dnrCtl.core_3dnr_wb_sel = nr3dInfo->d3nr_wb_sel;
     st3dnrCtl.core_3dnr_adp_luma_en = nr3dInfo->d3nr_adp_luma_en;
     st3dnrCtl.core_3dnr_adp_chroma_en = nr3dInfo->d3nr_adp_chroma_en;
-    st3dnrCtl.core_3dnr_pre_luma_th = nr3dInfo->d3nr_pre_luma_th; 
-    st3dnrCtl.core_3dnr_pre_luma_intensity = nr3dInfo->d3nr_pre_luma_intensity;   
+    st3dnrCtl.core_3dnr_pre_luma_th = nr3dInfo->d3nr_pre_luma_th;
+    st3dnrCtl.core_3dnr_pre_luma_intensity = nr3dInfo->d3nr_pre_luma_intensity;
     st3dnrCtl.core_3dnr_pre_chroma_intensity = nr3dInfo->d3nr_pre_chroma_intensity;
     st3dnrCtl.core_3dnr_mid_filter_th = nr3dInfo->d3nr_mid_filter_th;
-    st3dnrCtl.core_3dnr_pre_mid_filter_th = nr3dInfo->d3nr_pre_mid_filter_th;    
-    st3dnrCtl.core_3dnr_cur_mid_filter_th = nr3dInfo->d3nr_cur_mid_filter_th;    
+    st3dnrCtl.core_3dnr_pre_mid_filter_th = nr3dInfo->d3nr_pre_mid_filter_th;
+    st3dnrCtl.core_3dnr_cur_mid_filter_th = nr3dInfo->d3nr_cur_mid_filter_th;
     st3dnrCtl.core_3dnr_low_pass_filter_th = nr3dInfo->d3nr_low_pass_filter_th;
-    st3dnrCtl.core_3dnr_luma_th = nr3dInfo->d3nr_luma_th;      
+    st3dnrCtl.core_3dnr_luma_th = nr3dInfo->d3nr_luma_th;
     st3dnrCtl.core_3dnr_min_value = nr3dInfo->d3nr_min_value;
     st3dnrCtl.core_3dnr_luma_intensity = nr3dInfo->d3nr_luma_intensity;
-    st3dnrCtl.core_3dnr_chroma_intensity = nr3dInfo->d3nr_chroma_intensity;    
-    st3dnrCtl.core_3dnr_post_edge_th = nr3dInfo->d3nr_post_edge_th; 
-    st3dnrCtl.core_3dnr_post_luma_intensity = nr3dInfo->d3nr_post_luma_intensity;  
+    st3dnrCtl.core_3dnr_chroma_intensity = nr3dInfo->d3nr_chroma_intensity;
+    st3dnrCtl.core_3dnr_post_edge_th = nr3dInfo->d3nr_post_edge_th;
+    st3dnrCtl.core_3dnr_post_luma_intensity = nr3dInfo->d3nr_post_luma_intensity;
     st3dnrCtl.core_3dnr_post_chroma_intensity = nr3dInfo->d3nr_post_chroma_intensity;
     Isp_Drv_F2k_Core_Set3DnrCtl(isp,&st3dnrCtl);
 	return 0;
@@ -1281,17 +1302,17 @@ static int isp_f2k_core_SetEnhCtl(struct k510_isp_device *isp,ENH_INFO_S *enhInf
 {
     ISP_CORE_ENH_CTL_S stEnhCtl;
     stEnhCtl.enh_ltm_en = enhInfo->enh_ltm_en;
-    stEnhCtl.enh_sharp_en = enhInfo->enh_sharp_en;     
-    stEnhCtl.enh_cc_en = enhInfo->enh_cc_en; 
-    stEnhCtl.enh_adp_ltm_en = enhInfo->enh_adp_ltm_en;    
-    stEnhCtl.enh_adp_sharp_en = enhInfo->enh_adp_sharp_en; 
-    stEnhCtl.enh_adp_cc_en = enhInfo->enh_adp_cc_en;    
-    stEnhCtl.ltm_gain = enhInfo->ltm_gain;  
-    stEnhCtl.ltm_th = enhInfo->ltm_th; 
-    stEnhCtl.enh_nr_th = enhInfo->enh_nr_th; 
+    stEnhCtl.enh_sharp_en = enhInfo->enh_sharp_en;
+    stEnhCtl.enh_cc_en = enhInfo->enh_cc_en;
+    stEnhCtl.enh_adp_ltm_en = enhInfo->enh_adp_ltm_en;
+    stEnhCtl.enh_adp_sharp_en = enhInfo->enh_adp_sharp_en;
+    stEnhCtl.enh_adp_cc_en = enhInfo->enh_adp_cc_en;
+    stEnhCtl.ltm_gain = enhInfo->ltm_gain;
+    stEnhCtl.ltm_th = enhInfo->ltm_th;
+    stEnhCtl.enh_nr_th = enhInfo->enh_nr_th;
     stEnhCtl.enh_th1 = enhInfo->enh_th1;
     stEnhCtl.enh_th2 = enhInfo->enh_th2;
-    stEnhCtl.sharp_gain = enhInfo->sharp_gain; 
+    stEnhCtl.sharp_gain = enhInfo->sharp_gain;
     Isp_Drv_F2k_Core_SetEnhLtmCtl(isp,&stEnhCtl);
     Isp_Drv_F2k_Core_SetEnhCCCtl(isp,&stEnhCtl);
     Isp_Drv_F2k_Core_SetEnhSharpenCtl(isp,&stEnhCtl);
@@ -1301,10 +1322,10 @@ static int isp_f2k_core_SetEnhCtl(struct k510_isp_device *isp,ENH_INFO_S *enhInf
 static int isp_f2k_core_SetPostCtl(struct k510_isp_device *isp,POST_INFO_S *postInfo)
 {
     ISP_CORE_POST_CTL_S stPostCtl;
-    stPostCtl.post_cont_ad_en = postInfo->post_cont_ad_en;   
-    stPostCtl.post_luma_ad_en = postInfo->post_luma_ad_en;   
+    stPostCtl.post_cont_ad_en = postInfo->post_cont_ad_en;
+    stPostCtl.post_luma_ad_en = postInfo->post_luma_ad_en;
     stPostCtl.post_satu_ad_en = postInfo->post_satu_ad_en;
-    stPostCtl.cont_ad_intensity = postInfo->cont_ad_intensity;    
+    stPostCtl.cont_ad_intensity = postInfo->cont_ad_intensity;
     stPostCtl.luma_ad_intensity = postInfo->luma_ad_intensity;
     stPostCtl.satu_ad_intensity = postInfo->satu_ad_intensity;
     Isp_Drv_F2k_Core_SetPostContCtl(isp,&stPostCtl);
@@ -1317,14 +1338,14 @@ static int isp_f2k_core_SetOtcCtl(struct k510_isp_device *isp,OTC_INFO_S *otcInf
 {
     ISP_CORE_OTC_CTL_S stOtcCtl;
     stOtcCtl.post_otc_en = otcInfo->post_otc_en;
-   	stOtcCtl.otc_yc_sel = otcInfo->otc_yc_sel; 
-   	stOtcCtl.otc_uv_format_sel = otcInfo->otc_uv_format_sel; 
-   	stOtcCtl.otc_hsync_pol_sel = otcInfo->otc_hsync_pol_sel; 
-   	stOtcCtl.otc_vsync_pol_sel = otcInfo->otc_vsync_pol_sel;    
-   	stOtcCtl.otc_stt_vr = otcInfo->otc_out_size.Width_st;   
-   	stOtcCtl.otc_stt_hr = otcInfo->otc_out_size.Height_st;   
-   	stOtcCtl.otc_height = otcInfo->otc_out_size.Height;   
-   	stOtcCtl.otc_width = otcInfo->otc_out_size.Width; 
+   	stOtcCtl.otc_yc_sel = otcInfo->otc_yc_sel;
+   	stOtcCtl.otc_uv_format_sel = otcInfo->otc_uv_format_sel;
+   	stOtcCtl.otc_hsync_pol_sel = otcInfo->otc_hsync_pol_sel;
+   	stOtcCtl.otc_vsync_pol_sel = otcInfo->otc_vsync_pol_sel;
+   	stOtcCtl.otc_stt_vr = otcInfo->otc_out_size.Width_st;
+   	stOtcCtl.otc_stt_hr = otcInfo->otc_out_size.Height_st;
+   	stOtcCtl.otc_height = otcInfo->otc_out_size.Height;
+   	stOtcCtl.otc_width = otcInfo->otc_out_size.Width;
     Isp_Drv_F2k_Core_SetOtcCtl(isp,&stOtcCtl);
 	return 0;
 }
@@ -1332,14 +1353,14 @@ static int isp_f2k_core_SetOtcCtl(struct k510_isp_device *isp,OTC_INFO_S *otcInf
 static int isp_f2k_core_SetLdcCtl(struct k510_isp_device *isp,LDC_INFO_S *ldcInfo)
 {
     ISP_CORE_LDC_CTL_S stLdcCtl;
-    stLdcCtl.ldc_en = ldcInfo->ldc_en; 
-    stLdcCtl.ldc_arith_en = ldcInfo->ldc_arith_en;   
+    stLdcCtl.ldc_en = ldcInfo->ldc_en;
+    stLdcCtl.ldc_arith_en = ldcInfo->ldc_arith_en;
     stLdcCtl.ldc_req_freq = ldcInfo->ldc_req_freq;
     stLdcCtl.ldc_stt_ln = ldcInfo->ldc_stt_ln;
     stLdcCtl.ldc_h_center_pos = ldcInfo->ldc_h_center_pos;
     stLdcCtl.ldc_v_center_pos = ldcInfo->ldc_v_center_pos;
     stLdcCtl.ldc_rectify_cr = ldcInfo->ldc_rectify_cr;
-    stLdcCtl.ldc_rectify_cz = ldcInfo->ldc_rectify_cz; 
+    stLdcCtl.ldc_rectify_cz = ldcInfo->ldc_rectify_cz;
     Isp_Drv_F2k_Core_SetLdcCtl(isp,&stLdcCtl);
 	return 0;
 }
@@ -1347,11 +1368,11 @@ static int isp_f2k_core_SetLdcCtl(struct k510_isp_device *isp,LDC_INFO_S *ldcInf
 static int isp_f2k_core_SetAfCtl(struct k510_isp_device *isp,AF_INFO_S *afInfo)
 {
     ISP_CORE_AF_CTL_S stAfCtl;
-	stAfCtl.af_stat_en = afInfo->af_stat_en; 
-   	stAfCtl.af_stat_mode_sel= afInfo->af_stat_mode_sel; 
-    stAfCtl.af_stat_win_h_start= afInfo->af_win_size.h_start;    
-    stAfCtl.af_stat_win_v_start= afInfo->af_win_size.v_start; 
-    stAfCtl.af_stat_win_h_end= afInfo->af_win_size.h_end;  
+	stAfCtl.af_stat_en = afInfo->af_stat_en;
+   	stAfCtl.af_stat_mode_sel= afInfo->af_stat_mode_sel;
+    stAfCtl.af_stat_win_h_start= afInfo->af_win_size.h_start;
+    stAfCtl.af_stat_win_v_start= afInfo->af_win_size.v_start;
+    stAfCtl.af_stat_win_h_end= afInfo->af_win_size.h_end;
     stAfCtl.af_stat_win_v_end= afInfo->af_win_size.v_end;
     Isp_Drv_F2k_Core_SetAfCtl(isp,&stAfCtl);
 	return 0;
@@ -1421,7 +1442,7 @@ static int isp_f2k_core_SetFbd(struct k510_isp_device *isp,FBD_INFO_S *fbdInfo)
 	FBCD_BUF_S *yDataBufInfo = &fbdInfo->yDataBufInfo;
 	stIspFbdYBuf->fbd_y_data_buf_base0 = yDataBufInfo->data_buf_base0;
 	stIspFbdYBuf->fbd_y_data_buf_base0 = yDataBufInfo->data_buf_base1;
-	stIspFbdYBuf->fbd_y_data_stride = yDataBufInfo->data_stride;	
+	stIspFbdYBuf->fbd_y_data_stride = yDataBufInfo->data_stride;
 	FBCD_BUF_S *yHeadBufInfo = &fbdInfo->yHeadBufInfo;
 	stIspFbdYBuf->fbd_y_head_buf_base0 = yHeadBufInfo->data_buf_base0;
 	stIspFbdYBuf->fbd_y_head_buf_base1 = yHeadBufInfo->data_buf_base1;
@@ -1435,7 +1456,7 @@ static int isp_f2k_core_SetFbd(struct k510_isp_device *isp,FBD_INFO_S *fbdInfo)
 	stIspFbdYLBuf->fbd_yl_head_buf_base0 = ylHeadBufInfo->data_buf_base0;
 	stIspFbdYLBuf->fbd_yl_head_buf_base1 = ylHeadBufInfo->data_buf_base1;
 	stIspFbdYLBuf->fbd_yl_head_stride = ylHeadBufInfo->data_stride;
-	ISP_FBD_UV_BUF_S 	*stIspFbdUVBuf = &stIspFbdBuf->stIspFbdUVBuf; 
+	ISP_FBD_UV_BUF_S 	*stIspFbdUVBuf = &stIspFbdBuf->stIspFbdUVBuf;
 	FBCD_BUF_S  *uvDataBufInfo = &fbdInfo->uvDataBufInfo;
 	stIspFbdUVBuf->fbd_uv_data_buf_base0 = uvDataBufInfo->data_buf_base0;
 	stIspFbdUVBuf->fbd_uv_data_buf_base1 = uvDataBufInfo->data_buf_base1;
@@ -1541,7 +1562,7 @@ void isp_f2k_ds_SetInputSize(struct k510_isp_device *isp,IMAGE_SIZE *dsInSizeInf
 }
 //
 void isp_f2k_ds_SetRgb2YuvCoff(struct k510_isp_device *isp)
-{    
+{
     unsigned int osd_rgb2yuv_coeff[3][4];
     osd_rgb2yuv_coeff[0][0]= 0x00000132;
     osd_rgb2yuv_coeff[0][1]= 0x00000259;
@@ -1559,7 +1580,7 @@ void isp_f2k_ds_SetRgb2YuvCoff(struct k510_isp_device *isp)
 }
 //
 void isp_f2k_ds_SetYuv2RgbCoff(struct k510_isp_device *isp)
-{    
+{
     unsigned int osd_yuv2rgb_coeff[3][4];
   	osd_yuv2rgb_coeff[0][0] = 0x00000400;
 	osd_yuv2rgb_coeff[0][1] = 0x00000000;
@@ -1626,15 +1647,15 @@ void isp_f2k_ds_SetSingleDS(struct k510_isp_device *isp,unsigned int u8Index,str
     stDsFormat->out_rgb_mode =  dsInfo->out_rgb_mode;
     stDsFormat->out_yuv_mode =  dsInfo->out_yuv_mode;
     stDsFormat->out_uv_swap =  dsInfo->out_uv_swap;
-    unsigned int osdIndex = 0;     
+    unsigned int osdIndex = 0;
     ISP_DS_OSD_ATTR_S *stDsOsdAttr = &stDsAttr.DsOsdAttr[osdIndex];
     ISP_OSD_INFO_S *osdInfo = &dsInfo->osdInfo[osdIndex];
     isp_f2k_ds_SetOSD(stDsOsdAttr,osdInfo);
-    osdIndex = 1;     
+    osdIndex = 1;
     stDsOsdAttr = &stDsAttr.DsOsdAttr[osdIndex];
     osdInfo = &dsInfo->osdInfo[osdIndex];
     isp_f2k_ds_SetOSD(stDsOsdAttr,osdInfo);
-    osdIndex = 2;     
+    osdIndex = 2;
     stDsOsdAttr = &stDsAttr.DsOsdAttr[osdIndex];
     osdInfo = &dsInfo->osdInfo[osdIndex];
     isp_f2k_ds_SetOSD(stDsOsdAttr,osdInfo);
@@ -1685,7 +1706,7 @@ void isp_f2k_config(struct k510_isp_device *isp,struct isp_cfg_info *isp_cfg)
 						  GFP_KERNEL);
 		if (nr3d_dma_new.addr == NULL)
 			return -ENOMEM;
-		
+
 		nr3d_dma_old = isp->isp_f2k.nr3d_dma;
 		isp->isp_f2k.nr3d_dma = nr3d_dma_new;
 
@@ -1696,7 +1717,7 @@ void isp_f2k_config(struct k510_isp_device *isp,struct isp_cfg_info *isp_cfg)
 		isp_wrap_cfg->nr3dInfo.nr3d_y_line_stride = (isp_core_cfg->itcInfo.itc_size.Width + 15)/16*16*12/8;//0xb40;
 		isp_wrap_cfg->nr3dInfo.nr3d_uv_line_stride = (isp_core_cfg->itcInfo.itc_size.Width + 15)/16*16;//0x780;
 		isp_wrap_cfg->nr3dInfo.nr3d_y_buf_base = nr3d_dma_new.dma;
-		isp_wrap_cfg->nr3dInfo.nr3d_uv_buf_base = nr3d_dma_new.dma + isp_wrap_cfg->nr3dInfo.nr3d_y_line_stride * isp_core_cfg->itcInfo.itc_size.Height;	
+		isp_wrap_cfg->nr3dInfo.nr3d_uv_buf_base = nr3d_dma_new.dma + isp_wrap_cfg->nr3dInfo.nr3d_y_line_stride * isp_core_cfg->itcInfo.itc_size.Height;
 	}
 	//
     isp_f2k_core_config(f2k,isp_core_cfg);
@@ -1727,7 +1748,7 @@ static void isp_f2k_set_fbc_outaddr(struct isp_f2k_device *f2k, u32 addr)
 	addr = addr+1920*1080;
 	isp_reg_writel(isp,addr,ISP_IOMEM_F2K_WRAP,ISP_WRAP_MAIN_UV_BUF0_BASE);
 	isp_reg_writel(isp,addr,ISP_IOMEM_F2K_WRAP,ISP_WRAP_MAIN_UV_BUF1_BASE);
-	isp_reg_writel(isp,0x30001,ISP_IOMEM_F2K_WRAP,ISP_WRAP_CONFIG_DONE);	
+	isp_reg_writel(isp,0x30001,ISP_IOMEM_F2K_WRAP,ISP_WRAP_CONFIG_DONE);
 }
 
 /*
@@ -1749,7 +1770,7 @@ static void isp_f2k_set_main_outaddr(struct isp_f2k_device *f2k, u32 addr)
 	__func__,main_info->main_line_stride,main_info->main_size.Width,main_info->main_size.Height);
 	addr = addr + main_info->main_line_stride*main_info->main_size.Height;//1920*1080;
 	isp_reg_writel(isp,addr,ISP_IOMEM_F2K_WRAP,ISP_WRAP_MAIN_UV_BUF0_BASE);
-	isp_reg_writel(isp,addr,ISP_IOMEM_F2K_WRAP,ISP_WRAP_MAIN_UV_BUF1_BASE);	
+	isp_reg_writel(isp,addr,ISP_IOMEM_F2K_WRAP,ISP_WRAP_MAIN_UV_BUF1_BASE);
 	isp_reg_writel(isp,0x30001,ISP_IOMEM_F2K_WRAP,ISP_WRAP_CONFIG_DONE);
 }
 
@@ -1765,7 +1786,7 @@ static void isp_f2k_set_out0_outaddr(struct isp_f2k_device *f2k, u32 addr)
 	struct k510_isp_device *isp = to_isp_device(f2k);
 	struct isp_wrap_cfg_info *isp_wrap_cfg = &f2k->isp_cfg.isp_wrap_cfg;
 	struct isp_wrap_ds0_info *ds0_info = &isp_wrap_cfg->ds0Info;
-	
+
 #ifdef SET_DIFF_BUFF
 	if((f2k->pingpong[DS0_VIDEO]%2) == 0)
 	{
@@ -1777,7 +1798,7 @@ static void isp_f2k_set_out0_outaddr(struct isp_f2k_device *f2k, u32 addr)
 	{
 		isp_reg_writel(isp,addr,ISP_IOMEM_F2K_WRAP,ISP_WRAP_DS0_Y_BUF1_BASE);
 		addr = addr + ds0_info->ds0_line_stride*ds0_info->ds0_size.Height;//1920*1080;
-	  isp_reg_writel(isp,addr,ISP_IOMEM_F2K_WRAP,ISP_WRAP_DS0_UV_BUF1_BASE);	
+	  isp_reg_writel(isp,addr,ISP_IOMEM_F2K_WRAP,ISP_WRAP_DS0_UV_BUF1_BASE);
 	}
 	f2k->pingpong[DS0_VIDEO]++;
 	isp_reg_writel(isp,0x30001,ISP_IOMEM_F2K_WRAP,ISP_WRAP_CONFIG_DONE); //fix split screen
@@ -1812,7 +1833,7 @@ static void isp_f2k_set_out1_outaddr(struct isp_f2k_device *f2k, u32 addr)
 	addr = addr + ds1_info->ds1_line_stride*ds1_info->ds1_size.Height;//1920*1080;
 	isp_reg_writel(isp,addr,ISP_IOMEM_F2K_WRAP,ISP_WRAP_DS1_UV_BUF0_BASE);
 	isp_reg_writel(isp,addr,ISP_IOMEM_F2K_WRAP,ISP_WRAP_DS1_UV_BUF1_BASE);
-	isp_reg_writel(isp,0x30001,ISP_IOMEM_F2K_WRAP,ISP_WRAP_CONFIG_DONE);	
+	isp_reg_writel(isp,0x30001,ISP_IOMEM_F2K_WRAP,ISP_WRAP_CONFIG_DONE);
 }
 
 /*
@@ -1832,20 +1853,20 @@ static void isp_f2k_set_out2_outaddr(struct isp_f2k_device *f2k, u32 addr)
 	//
 	//dev_dbg(f2k->isp->dev,"%s:line_stride (%d),Width(%d),Height(%d) addr(0x%x)\n",\
 	__func__,ds2_info->ds2_line_stride,ds2_info->ds2_size.Width,height,addr);
-	r_addr = addr;		
+	r_addr = addr;
 	isp_reg_writel(isp,r_addr,ISP_IOMEM_F2K_WRAP,ISP_WRAP_DS2_R_BUF0_BASE);
 	isp_reg_writel(isp,r_addr,ISP_IOMEM_F2K_WRAP,ISP_WRAP_DS2_R_BUF1_BASE);
 
 	if( DS2_S_RGB == ds2_info->ds2_out_img_out_format)
 		g_addr = r_addr + ds2_info->ds2_line_stride * height;
-	else	
+	else
 		g_addr = r_addr + ds2_info->ds2_line_stride/4*2;
 	isp_reg_writel(isp,g_addr,ISP_IOMEM_F2K_WRAP,ISP_WRAP_DS2_G_BUF0_BASE);
 	isp_reg_writel(isp,g_addr,ISP_IOMEM_F2K_WRAP,ISP_WRAP_DS2_G_BUF1_BASE);
 	//
 	if( DS2_S_RGB == ds2_info->ds2_out_img_out_format)
 		b_addr = g_addr + ds2_info->ds2_line_stride * height;
-	else	
+	else
 		b_addr = g_addr + ds2_info->ds2_line_stride/4*3;
 	isp_reg_writel(isp,b_addr,ISP_IOMEM_F2K_WRAP,ISP_WRAP_DS2_B_BUF0_BASE);
 	isp_reg_writel(isp,b_addr,ISP_IOMEM_F2K_WRAP,ISP_WRAP_DS2_B_BUF1_BASE);
@@ -2024,13 +2045,13 @@ static void isp_f2k_core_print_status(struct isp_f2k_device *f2k)
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_IMAGE_H_START         		);
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_IMAGE_ACTIVE_WIDTH    		);
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_IMAGE_ACTIVE_HEIGHT   		);
-	//tpg	                                                        
+	//tpg
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_TEST_CTL              		);
-	//blc		                                                    
+	//blc
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_BLC_CTL               		);
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_BLC_OFFSET            		);
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_BLC_RATIO             		);
-	//lsc		                                                    
+	//lsc
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_LSC_CTL               		);
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_LSC_H_CENTER          		);
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_LSC_V_CENTER          		);
@@ -2038,7 +2059,7 @@ static void isp_f2k_core_print_status(struct isp_f2k_device *f2k)
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_LSC_G_RATIO           		);
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_LSC_B_RATIO           		);
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_LSC_IR_RATIO          		);
-	//ae		                                                    
+	//ae
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_AE_CTL                		);
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_AE_WIN_H_START        		);
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_AE_WIN_V_START        		);
@@ -2060,7 +2081,7 @@ static void isp_f2k_core_print_status(struct isp_f2k_device *f2k)
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_AE_GAIN_MIN           		);
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_AE_DN_SWITCH_ADJUST_STEP_MAX);
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_AE_DN_SWITCH_WAIT_TIME     );
-																	
+
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_APE_DIFF_MAX               );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_APE_DRV_SIGNAL_MAX         );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_APE_COEFF_DIS              );
@@ -2068,7 +2089,7 @@ static void isp_f2k_core_print_status(struct isp_f2k_device *f2k)
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_APE_COEFF_ACCE             );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_APE_DRV_MANUAL_VALUE       );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_APE_DAMP_MANUAL_VALUE      );
-																
+
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_AE_VALUE_READY             );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_AE_LONG_CUR_EX             );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_AE_MID_CUR_EX              );
@@ -2079,7 +2100,7 @@ static void isp_f2k_core_print_status(struct isp_f2k_device *f2k)
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_AE_EX_STATUS               );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_AE_SUM                     );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_AE_PIXEL_SUM               );
-	//awb                                                          
+	//awb
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_AWB_CTL                    );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_AWB_D65_RED_GAIN           );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_AWB_D65_BLUE_GAIN          );
@@ -2123,14 +2144,14 @@ static void isp_f2k_core_print_status(struct isp_f2k_device *f2k)
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_AWB_ORG_RED_VALUE          );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_AWB_ORG_GREEN_VALUE        );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_AWB_ORG_BLUE_VALUE         );
-	//wdr                                                           
+	//wdr
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_WDR_CTL                    );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_WDR_OVER_EX_RATIO_TH1      );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_WDR_OVER_EX_RATIO_TH2      );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_WDR_FUSION_RATIO_TH        );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_WDR_FUSION_VALUE1          );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_WDR_FUSION_VALUE2          );
-	//csc                                                          
+	//csc
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_CSC_R2Y_00                 );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_CSC_R2Y_01                 );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_CSC_R2Y_02                 );
@@ -2140,7 +2161,7 @@ static void isp_f2k_core_print_status(struct isp_f2k_device *f2k)
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_CSC_R2Y_20                 );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_CSC_R2Y_21                 );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_CSC_R2Y_22                 );
-	//ada                                                           
+	//ada
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_ADA_CTL                    );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_ADA_STAT_MAX_VALUE         );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_ADA_AD_STREN_MAX_VALUE     );
@@ -2148,21 +2169,21 @@ static void isp_f2k_core_print_status(struct isp_f2k_device *f2k)
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_ADA_WIN_V_START            );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_ADA_WIN_H_END              );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_ADA_WIN_V_END              );
-	//rgbir                                                         
+	//rgbir
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_RGBIR_CTL                  );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_RGBIR_RPC_MAX_VALUE        );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_RGBIR_RPC_COLOR_COFF       );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_RGBIR_RPC_LUMA_COFF        );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_RGBIR_RPC_TH               );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_RGBIR_RPC_TH1              );
-	//2dnr                                                         
+	//2dnr
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_2DNR_CTL                   );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_2DNR_RAW_INTENSITY         );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_2DNR_BAP_INTENSITY         );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_2DNR_EDGE_INTENSITY        );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_2DNR_LUMA_INTENSITY        );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_2DNR_CHROMA_INTENSITY      );
-	//3dnr                                                          
+	//3dnr
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_3DNR_CTL                   );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_3DNR_PRE_LUMA_TH           );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_3DNR_PRE_LUMA_INTENSITY    );
@@ -2178,7 +2199,7 @@ static void isp_f2k_core_print_status(struct isp_f2k_device *f2k)
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_3DNR_POST_EDGE_TH          );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_3DNR_POST_LUMA_INTENSITY   );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_3DNR_POST_CHROMA_INTENSITY );
-	//enh                                                          
+	//enh
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_ENH_CTL                    );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_LTM_GAIN                   );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_LTM_TH                     );
@@ -2186,28 +2207,28 @@ static void isp_f2k_core_print_status(struct isp_f2k_device *f2k)
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_ENH_TH1                    );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_ENH_TH2                    );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_SHARP_GAIN                 );
-	//post                                                          
+	//post
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_POST_CTL                   );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_CONT_GAIN                  );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_LUMA_GAIN                  );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_SATU_GAIN                  );
-	//otc                                                          
+	//otc
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_OTC_STT_VR                 );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_OTC_STT_HR                 );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_OTC_HEIGHT                 );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_OTC_WIDTH                  );
-	//ldc                                                          
+	//ldc
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_LDC_CTL                    );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_LDC_REQ_FREQ               );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_LDC_H_CENTER_POS           );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_LDC_V_CENTER_POS           );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_LDC_RECTIFY_CR             );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_LDC_RECTIFY_CZ             );
-	//ram table                                                     
+	//ram table
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_RAM_WR_STATUS              );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_RAM_RD_STATUS              );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_RAM_READ_LOCK              );
-	//af                                                            
+	//af
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_AF_CTL                     );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_AF_STAT_WIN_H_START        );
 	ISP_F2K_CORE_PRINT_REGISTER(isp,ISP_CORE_AF_STAT_WIN_V_START        );
@@ -2398,32 +2419,32 @@ static void isp_3dnr_mfbc_print_status(struct isp_f2k_device *f2k)
 	dev_dbg(isp->dev, "-------------ISP 3DNR MFBC Register dump start----------\n");
 	ISP_3DNR_MFBC_PRINT_REGISTER(isp,ISP_FBC_INPUT_SIZE     		);
 	ISP_3DNR_MFBC_PRINT_REGISTER(isp,ISP_FBC_OUT_FORMAT     		);
-																	
+
 	ISP_3DNR_MFBC_PRINT_REGISTER(isp,ISP_FBC_Y_DATA_BUF_BASE0    	);
 	ISP_3DNR_MFBC_PRINT_REGISTER(isp,ISP_FBC_Y_DATA_BUF_BASE1    	);
 	ISP_3DNR_MFBC_PRINT_REGISTER(isp,ISP_FBC_Y_DATA_LINE_STRIDE    );
 	ISP_3DNR_MFBC_PRINT_REGISTER(isp,ISP_FBC_Y_DATA_WR_BLEN     	);
-																	
+
 	ISP_3DNR_MFBC_PRINT_REGISTER(isp,ISP_FBC_Y_HEAD_BUF_BASE0     	);
 	ISP_3DNR_MFBC_PRINT_REGISTER(isp,ISP_FBC_Y_HEAD_BUF_BASE1     	);
 	ISP_3DNR_MFBC_PRINT_REGISTER(isp,ISP_FBC_Y_HEAD_LINE_STRIDE    );
 	ISP_3DNR_MFBC_PRINT_REGISTER(isp,ISP_FBC_Y_HEAD_WR_BLEN     	);
-																	
+
 	ISP_3DNR_MFBC_PRINT_REGISTER(isp,ISP_FBC_UV_DATA_BUF_BASE0     );
 	ISP_3DNR_MFBC_PRINT_REGISTER(isp,ISP_FBC_UV_DATA_BUF_BASE1     );
 	ISP_3DNR_MFBC_PRINT_REGISTER(isp,ISP_FBC_UV_DATA_LINE_STRIDE   );
 	ISP_3DNR_MFBC_PRINT_REGISTER(isp,ISP_FBC_UV_DATA_WR_BLEN       );
-																	
+
 	ISP_3DNR_MFBC_PRINT_REGISTER(isp,ISP_FBC_UV_HEAD_BUF_BASE0     );
 	ISP_3DNR_MFBC_PRINT_REGISTER(isp,ISP_FBC_UV_HEAD_BUF_BASE1     );
 	ISP_3DNR_MFBC_PRINT_REGISTER(isp,ISP_FBC_UV_HEAD_LINE_STRIDE   );
 	ISP_3DNR_MFBC_PRINT_REGISTER(isp,ISP_FBC_UV_HEAD_WR_BLEN     	);
-																	
+
 	ISP_3DNR_MFBC_PRINT_REGISTER(isp,ISP_FBC_YL_DATA_BUF_BASE0     );
 	ISP_3DNR_MFBC_PRINT_REGISTER(isp,ISP_FBC_YL_DATA_BUF_BASE1     );
 	ISP_3DNR_MFBC_PRINT_REGISTER(isp,ISP_FBC_YL_DATA_LINE_STRIDE   );
 	ISP_3DNR_MFBC_PRINT_REGISTER(isp,ISP_FBC_YL_DATA_WR_BLEN       );
-																	
+
 	ISP_3DNR_MFBC_PRINT_REGISTER(isp,ISP_FBC_YL_HEAD_BUF_BASE0     );
 	ISP_3DNR_MFBC_PRINT_REGISTER(isp,ISP_FBC_YL_HEAD_BUF_BASE1     );
 	ISP_3DNR_MFBC_PRINT_REGISTER(isp,ISP_FBC_YL_HEAD_LINE_STRIDE   );
@@ -2588,39 +2609,39 @@ static void isp_f2k_remap_print_status(struct isp_f2k_device *f2k)
 	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_INFO_AREA_30_1_CTRL);
 	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_INFO_AREA_31_0_CTRL);
 	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_INFO_AREA_31_1_CTRL);
-						
-	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_00_0_CTRL); 
-	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_01_0_CTRL); 
-	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_02_0_CTRL); 
-	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_03_0_CTRL); 
-	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_04_0_CTRL); 
-	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_05_0_CTRL); 
-	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_06_0_CTRL); 
-	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_07_0_CTRL); 
-	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_08_0_CTRL); 
-	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_09_0_CTRL); 
-	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_10_0_CTRL); 
-	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_11_0_CTRL); 
-	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_12_0_CTRL); 
-	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_13_0_CTRL); 
-	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_14_0_CTRL); 
-	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_15_0_CTRL); 
-	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_16_0_CTRL); 
-	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_17_0_CTRL); 
-	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_18_0_CTRL); 
+
+	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_00_0_CTRL);
+	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_01_0_CTRL);
+	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_02_0_CTRL);
+	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_03_0_CTRL);
+	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_04_0_CTRL);
+	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_05_0_CTRL);
+	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_06_0_CTRL);
+	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_07_0_CTRL);
+	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_08_0_CTRL);
+	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_09_0_CTRL);
+	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_10_0_CTRL);
+	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_11_0_CTRL);
+	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_12_0_CTRL);
+	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_13_0_CTRL);
+	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_14_0_CTRL);
+	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_15_0_CTRL);
+	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_16_0_CTRL);
+	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_17_0_CTRL);
+	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_18_0_CTRL);
 	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_19_0_CTRL);
-	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_20_0_CTRL); 
-	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_21_0_CTRL); 
-	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_22_0_CTRL); 
-	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_23_0_CTRL); 
-	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_24_0_CTRL); 
-	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_25_0_CTRL); 
-	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_26_0_CTRL); 
-	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_27_0_CTRL); 
-	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_28_0_CTRL); 
-	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_29_0_CTRL);    
-	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_30_0_CTRL); 
-	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_31_0_CTRL); 
+	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_20_0_CTRL);
+	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_21_0_CTRL);
+	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_22_0_CTRL);
+	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_23_0_CTRL);
+	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_24_0_CTRL);
+	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_25_0_CTRL);
+	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_26_0_CTRL);
+	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_27_0_CTRL);
+	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_28_0_CTRL);
+	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_29_0_CTRL);
+	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_30_0_CTRL);
+	ISP_F2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_31_0_CTRL);
     dev_dbg(isp->dev, "-------------ISP F2K MAIN REMAP Register dump end----------\n");
     //
 	dev_dbg(isp->dev, "-------------ISP F2K OUT0 REMAP Register dump start----------\n");
@@ -2688,39 +2709,39 @@ static void isp_f2k_remap_print_status(struct isp_f2k_device *f2k)
 	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_INFO_AREA_30_1_CTRL);
 	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_INFO_AREA_31_0_CTRL);
 	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_INFO_AREA_31_1_CTRL);
-						
-	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_00_0_CTRL); 
-	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_01_0_CTRL); 
-	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_02_0_CTRL); 
-	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_03_0_CTRL); 
-	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_04_0_CTRL); 
-	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_05_0_CTRL); 
-	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_06_0_CTRL); 
-	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_07_0_CTRL); 
-	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_08_0_CTRL); 
-	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_09_0_CTRL); 
-	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_10_0_CTRL); 
-	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_11_0_CTRL); 
-	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_12_0_CTRL); 
-	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_13_0_CTRL); 
-	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_14_0_CTRL); 
-	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_15_0_CTRL); 
-	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_16_0_CTRL); 
-	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_17_0_CTRL); 
-	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_18_0_CTRL); 
+
+	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_00_0_CTRL);
+	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_01_0_CTRL);
+	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_02_0_CTRL);
+	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_03_0_CTRL);
+	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_04_0_CTRL);
+	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_05_0_CTRL);
+	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_06_0_CTRL);
+	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_07_0_CTRL);
+	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_08_0_CTRL);
+	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_09_0_CTRL);
+	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_10_0_CTRL);
+	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_11_0_CTRL);
+	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_12_0_CTRL);
+	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_13_0_CTRL);
+	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_14_0_CTRL);
+	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_15_0_CTRL);
+	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_16_0_CTRL);
+	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_17_0_CTRL);
+	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_18_0_CTRL);
 	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_19_0_CTRL);
-	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_20_0_CTRL); 
-	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_21_0_CTRL); 
-	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_22_0_CTRL); 
-	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_23_0_CTRL); 
-	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_24_0_CTRL); 
-	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_25_0_CTRL); 
-	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_26_0_CTRL); 
-	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_27_0_CTRL); 
-	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_28_0_CTRL); 
-	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_29_0_CTRL);    
-	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_30_0_CTRL); 
-	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_31_0_CTRL); 
+	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_20_0_CTRL);
+	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_21_0_CTRL);
+	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_22_0_CTRL);
+	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_23_0_CTRL);
+	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_24_0_CTRL);
+	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_25_0_CTRL);
+	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_26_0_CTRL);
+	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_27_0_CTRL);
+	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_28_0_CTRL);
+	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_29_0_CTRL);
+	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_30_0_CTRL);
+	ISP_F2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_31_0_CTRL);
     dev_dbg(isp->dev, "-------------ISP F2K OUT0 REMAP Register dump end----------\n");
     //
 	dev_dbg(isp->dev, "-------------ISP F2K OUT1 REMAP Register dump start----------\n");
@@ -2788,39 +2809,39 @@ static void isp_f2k_remap_print_status(struct isp_f2k_device *f2k)
 	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_INFO_AREA_30_1_CTRL);
 	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_INFO_AREA_31_0_CTRL);
 	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_INFO_AREA_31_1_CTRL);
-						
-	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_00_0_CTRL); 
-	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_01_0_CTRL); 
-	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_02_0_CTRL); 
-	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_03_0_CTRL); 
-	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_04_0_CTRL); 
-	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_05_0_CTRL); 
-	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_06_0_CTRL); 
-	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_07_0_CTRL); 
-	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_08_0_CTRL); 
-	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_09_0_CTRL); 
-	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_10_0_CTRL); 
-	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_11_0_CTRL); 
-	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_12_0_CTRL); 
-	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_13_0_CTRL); 
-	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_14_0_CTRL); 
-	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_15_0_CTRL); 
-	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_16_0_CTRL); 
-	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_17_0_CTRL); 
-	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_18_0_CTRL); 
+
+	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_00_0_CTRL);
+	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_01_0_CTRL);
+	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_02_0_CTRL);
+	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_03_0_CTRL);
+	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_04_0_CTRL);
+	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_05_0_CTRL);
+	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_06_0_CTRL);
+	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_07_0_CTRL);
+	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_08_0_CTRL);
+	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_09_0_CTRL);
+	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_10_0_CTRL);
+	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_11_0_CTRL);
+	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_12_0_CTRL);
+	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_13_0_CTRL);
+	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_14_0_CTRL);
+	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_15_0_CTRL);
+	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_16_0_CTRL);
+	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_17_0_CTRL);
+	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_18_0_CTRL);
 	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_19_0_CTRL);
-	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_20_0_CTRL); 
-	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_21_0_CTRL); 
-	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_22_0_CTRL); 
-	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_23_0_CTRL); 
-	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_24_0_CTRL); 
-	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_25_0_CTRL); 
-	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_26_0_CTRL); 
-	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_27_0_CTRL); 
-	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_28_0_CTRL); 
-	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_29_0_CTRL);    
-	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_30_0_CTRL); 
-	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_31_0_CTRL); 
+	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_20_0_CTRL);
+	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_21_0_CTRL);
+	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_22_0_CTRL);
+	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_23_0_CTRL);
+	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_24_0_CTRL);
+	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_25_0_CTRL);
+	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_26_0_CTRL);
+	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_27_0_CTRL);
+	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_28_0_CTRL);
+	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_29_0_CTRL);
+	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_30_0_CTRL);
+	ISP_F2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_31_0_CTRL);
     dev_dbg(isp->dev, "-------------ISP F2K OUT1 REMAP Register dump end----------\n");
 }
 /* -----------------------------------------------------------------------------
@@ -2835,7 +2856,7 @@ static void video_buffer_next(struct isp_f2k_device *f2k, enum video_type dsNum)
 	unsigned long flags;
 	int drop=0;
 	struct isp_cfg_info *isp_cfg = &f2k->isp_cfg;
-	
+
 	dev_dbg(video->isp->dev,"%s:start\n",__func__);
 	spin_lock_irqsave(&video->irqlock, flags);
 	if (WARN_ON(list_empty(&video->dmaqueue))) {
@@ -2844,7 +2865,7 @@ static void video_buffer_next(struct isp_f2k_device *f2k, enum video_type dsNum)
 		if(isp_cfg->isp_wrap_cfg.ds0Info.ds0_out_en == 0 && dsNum == DS0_VIDEO)
 		{
 		  return;
-		}		
+		}
 		f2k->profile.no_buf_drop_cnt++;
 		return;
 	}
@@ -2854,15 +2875,15 @@ static void video_buffer_next(struct isp_f2k_device *f2k, enum video_type dsNum)
 		if(isp_cfg->isp_wrap_cfg.ds0Info.ds0_out_en == 0 && dsNum == DS0_VIDEO)
 		{
 		  return;
-		}		
+		}
 		f2k->profile.no_buf_drop_cnt++;
 		return;
 	}
 
-	buf = list_first_entry(&video->dmaqueue, struct k510isp_buffer, irqlist);	
+	buf = list_first_entry(&video->dmaqueue, struct k510isp_buffer, irqlist);
 
 	if(f2k->profile.drop_threshold > 0LL && f2k->profile.buf_set_time[dsNum] != 0)
-	{	  
+	{
 	  unsigned long long delta;
 	  delta = get_usec() - f2k->profile.buf_set_time[dsNum];
 	  if(delta > f2k->profile.drop_threshold)
@@ -2881,7 +2902,7 @@ static void video_buffer_next(struct isp_f2k_device *f2k, enum video_type dsNum)
     list_del(&buf->irqlist);
     next_buf = list_first_entry(&video->dmaqueue, struct k510isp_buffer, irqlist);
   }
-  
+
   if(next_buf != NULL)
   {
     if(dsNum == MAIN_VIDEO)
@@ -2893,7 +2914,7 @@ static void video_buffer_next(struct isp_f2k_device *f2k, enum video_type dsNum)
 	  else if(dsNum == DS2_VIDEO)
 	    isp_f2k_set_out2_outaddr(f2k, next_buf->dma);
 	}
-	
+
 	spin_unlock_irqrestore(&video->irqlock, flags);
 
 	if(!drop)
@@ -2956,7 +2977,7 @@ static void video_buffer_next(struct isp_f2k_device *f2k, enum video_type dsNum)
 		pipe->state &= ~ISP_PIPELINE_STREAM;
 		spin_unlock(&pipe->lock);
 	}
-	
+
 	spin_unlock_irqrestore(&video->irqlock, flags);
 
 	return;
@@ -2972,7 +2993,7 @@ static void f2k_isr_main_buffer(struct isp_f2k_device *f2k)
 	{
 		//dev_err(f2k->isp->dev,"%s:list_empty\n",__func__);
 		return 0;
-	}	
+	}
 
 	if (f2k->state == ISP_PIPELINE_STREAM_CONTINUOUS && f2k->underrun) {
 		dev_err(f2k->isp->dev,"%s:f2k->state(0x%x)\n",__func__,f2k->state);
@@ -2980,7 +3001,7 @@ static void f2k_isr_main_buffer(struct isp_f2k_device *f2k)
 		return 1;
 	}
 
-	video_buffer_next(f2k, MAIN_VIDEO);	
+	video_buffer_next(f2k, MAIN_VIDEO);
 
 	f2k->profile.buf_set_time[MAIN_VIDEO] = get_usec();
 	pipe->state |= ISP_PIPELINE_IDLE_OUTPUT;
@@ -2998,7 +3019,7 @@ static void f2k_isr_out0_buffer(struct isp_f2k_device *f2k)
 	{
 		//dev_dbg(f2k->isp->dev,"%s:list_empty\n",__func__);
 		return 0;
-	}	
+	}
 
 	if (f2k->state == ISP_PIPELINE_STREAM_CONTINUOUS && f2k->underrun) {
 		f2k->underrun = 0;
@@ -3009,7 +3030,7 @@ static void f2k_isr_out0_buffer(struct isp_f2k_device *f2k)
 
 	f2k->profile.buf_set_time[DS0_VIDEO] = get_usec();
 
-	pipe->state |= ISP_PIPELINE_IDLE_OUTPUT;	
+	pipe->state |= ISP_PIPELINE_IDLE_OUTPUT;
 
 	return buffer != NULL;
 }
@@ -3024,14 +3045,14 @@ static void f2k_isr_out1_buffer(struct isp_f2k_device *f2k)
 	{
 		//dev_dbg(f2k->isp->dev,"%s:list_empty\n",__func__);
 		return 0;
-	}	
+	}
 
 	if (f2k->state == ISP_PIPELINE_STREAM_CONTINUOUS && f2k->underrun) {
 		f2k->underrun = 0;
 		return 1;
 	}
 
-	video_buffer_next(f2k, DS1_VIDEO);	
+	video_buffer_next(f2k, DS1_VIDEO);
 	f2k->profile.buf_set_time[DS1_VIDEO] = get_usec();
 
 	pipe->state |= ISP_PIPELINE_IDLE_OUTPUT;
@@ -3049,14 +3070,14 @@ static void f2k_isr_out2_buffer(struct isp_f2k_device *f2k)
 	{
 		//dev_dbg(f2k->isp->dev,"%s:list_empty\n",__func__);
 		return 0;
-	}	
+	}
 
 	if (f2k->state == ISP_PIPELINE_STREAM_CONTINUOUS && f2k->underrun) {
 		f2k->underrun = 0;
 		return 1;
 	}
 
-	video_buffer_next(f2k, DS2_VIDEO);	
+	video_buffer_next(f2k, DS2_VIDEO);
 
 	pipe->state |= ISP_PIPELINE_IDLE_OUTPUT;
 
@@ -3082,7 +3103,7 @@ int k510isp_f2k_main_isr(struct isp_f2k_device *f2k,u32 events)
 }
 
 int k510isp_f2k_ds0_isr(struct isp_f2k_device *f2k,u32 events)
-{  
+{
 	dev_dbg(f2k->isp->dev,"%s:events(0x%x)start\n",__func__,events);
 	if (f2k->state == ISP_PIPELINE_STREAM_STOPPED)
 		return 0;
@@ -3090,7 +3111,7 @@ int k510isp_f2k_ds0_isr(struct isp_f2k_device *f2k,u32 events)
 	/* Handle queued buffers on frame end interrupts */
 	//if(events & (IRQW1_STS_OUT0_Y_FRAME_IRQ|IRQW1_STS_OUT0_UV_FRAME_IRQ))
 	f2k_isr_out0_buffer(f2k);
-		
+
 	return 0;
 }
 
@@ -3103,7 +3124,7 @@ int k510isp_f2k_ds1_isr(struct isp_f2k_device *f2k,u32 events)
 	/* Handle queued buffers on frame end interrupts */
 	//if(events & (IRQW1_STS_OUT1_Y_FRAME_IRQ|IRQW1_STS_OUT1_UV_FRAME_IRQ))
 	f2k_isr_out1_buffer(f2k);
-		
+
 	return 0;
 }
 
@@ -3116,7 +3137,7 @@ int k510isp_f2k_ds2_isr(struct isp_f2k_device *f2k,u32 events)
 	/* Handle queued buffers on frame end interrupts */
 	//if(events & (IRQW1_STS_OUT2_R_FRAME_IRQ|IRQW1_STS_OUT2_G_FRAME_IRQ|IRQW1_STS_OUT2_B_FRAME_IRQ))
 	f2k_isr_out2_buffer(f2k);
-		
+
 	return 0;
 }
 /* -----------------------------------------------------------------------------
@@ -3157,14 +3178,14 @@ static int f2k_video_queue(struct k510isp_video *video, struct k510isp_buffer *b
 	if (f2k->output & ISP_F2K_OUTPUT_DS1_MEM)
 	{
 		f2k->pingpong[DS1_VIDEO] = 0;
-		isp_f2k_set_out1_outaddr(f2k, buffer->dma);		
+		isp_f2k_set_out1_outaddr(f2k, buffer->dma);
 	}
 	if (f2k->output & ISP_F2K_OUTPUT_DS2_MEM)
 	{
 		f2k->pingpong[DS2_VIDEO] = 0;
 		isp_f2k_set_out2_outaddr(f2k, buffer->dma);
 	}
-	
+
 #ifdef SET_DIFF_BUFF
 	buffer++;
 	if (f2k->output & ISP_F2K_OUTPUT_FBC)
@@ -3218,7 +3239,7 @@ int k510isp_f2k_reset(struct k510_isp_device *isp)
 {
 	isp_f2k_wrap_reset(isp);
 	reset_control_reset(isp->reset[FBC_RST]);
-	reset_control_reset(isp->reset[ISP_F2K_RST]);	
+	reset_control_reset(isp->reset[ISP_F2K_RST]);
 	return 0;
 }
 /*
@@ -3232,7 +3253,7 @@ int k510isp_f2k_reset(struct k510_isp_device *isp)
 static long f2k_ioctl(struct v4l2_subdev *sd, unsigned int cmd, void *arg)
 {
 	struct isp_f2k_device *f2k = v4l2_get_subdevdata(sd);
-	int ret;	
+	int ret;
 	dev_dbg(f2k->isp->dev,"%s:cmd(0x%x)\n",__func__,cmd);
 	struct isp_wrap_cfg_info *isp_wrap_cfg = &f2k->isp_cfg.isp_wrap_cfg;
 	struct isp_core_cfg_info *isp_core_cfg = &f2k->isp_cfg.isp_core_cfg;
@@ -3273,7 +3294,7 @@ static long f2k_ioctl(struct v4l2_subdev *sd, unsigned int cmd, void *arg)
 		mutex_lock(&f2k->ioctl_lock);
 		ret = isp_f2k_remap_out1_config(f2k, arg);
 		mutex_unlock(&f2k->ioctl_lock);
-		break; 
+		break;
 	case VIDIOC_K510ISP_F2K_AE_STAT_REQ:
 		mutex_lock(&f2k->ioctl_lock);
 		isp_f2k_core_GetAeSts(f2k->isp,arg);
@@ -3286,13 +3307,23 @@ static long f2k_ioctl(struct v4l2_subdev *sd, unsigned int cmd, void *arg)
 		break;
 	case VIDIOC_K510ISP_F2K_CORE_CFG_GET:
 		mutex_lock(&f2k->ioctl_lock);
-		
+
 		mutex_unlock(&f2k->ioctl_lock);
 		break;
 	case VIDIOC_K510ISP_SYSCTL_RST_F2K:
 		mutex_lock(&f2k->ioctl_lock);
 		reset_control_reset(f2k->isp->reset[ISP_F2K_RST]);
-		reset_control_reset(f2k->isp->reset[FBC_RST]);		
+		reset_control_reset(f2k->isp->reset[FBC_RST]);
+		mutex_unlock(&f2k->ioctl_lock);
+		break;
+	case VIDIOC_K510ISP_F2K_CORE_REG_SET:
+		mutex_lock(&f2k->ioctl_lock);
+		isp_f2k_core_RegSet(f2k->isp,arg);
+		mutex_unlock(&f2k->ioctl_lock);
+		break;
+	case VIDIOC_K510ISP_F2K_CORE_REG_GET:
+		mutex_lock(&f2k->ioctl_lock);
+		isp_f2k_core_RegGet(f2k->isp,arg);
 		mutex_unlock(&f2k->ioctl_lock);
 		break;
 	default:
@@ -3341,7 +3372,7 @@ static int f2k_set_stream(struct v4l2_subdev *sd, int enable)
 	dev_dbg(f2k->isp->dev,"%s:enable(0x%d)\n",__func__,enable);
 
 	struct isp_cfg_info *isp_cfg = &f2k->isp_cfg;
-	struct isp_irq_info irq_info;  
+	struct isp_irq_info irq_info;
 
 	if (f2k->state == ISP_PIPELINE_STREAM_STOPPED) {
 		if (enable == ISP_PIPELINE_STREAM_STOPPED)
@@ -3352,7 +3383,7 @@ static int f2k_set_stream(struct v4l2_subdev *sd, int enable)
 			k510isp_f2k_reset(isp);
 			mutex_unlock(&f2k->ioctl_lock);
 			return 0;
-		}	
+		}
 		atomic_set(&f2k->stopping, 0);
 	}
 
@@ -3413,7 +3444,7 @@ static int f2k_set_stream(struct v4l2_subdev *sd, int enable)
 		    if(f2k->profile.drop_cnt[i] > 0)
 		      dev_info(f2k->isp->dev,"f2k ds%d jump drop_cnt %d\n", i, f2k->profile.drop_cnt[i]);
 		  }
-		}		
+		}
 		dev_info(f2k->isp->dev,"f2k dmaErrCnt %d, no_buf_drop_cnt %d, total %d\n", f2k->profile.dmaErrCnt, f2k->profile.no_buf_drop_cnt, f2k->profile.pic_cnt);
 		break;
 	}
@@ -3543,7 +3574,7 @@ f2k_try_format(struct isp_f2k_device *f2k, struct v4l2_subdev_pad_config *cfg,
 			else if (fmt->code == MEDIA_BUS_FMT_UYVY8_2X8)
 				fmt->code = MEDIA_BUS_FMT_UYVY8_1X16;
 		}
-	
+
 		/* Hardcode the output size to the crop rectangle size. */
 		crop = __f2k_get_crop(f2k, cfg, which);
 		fmt->width = crop->width;
@@ -3630,7 +3661,7 @@ static int f2k_enum_mbus_code(struct v4l2_subdev *sd,
 	case ISP_F2K_PAD_SINK:
 		if (code->index >= ARRAY_SIZE(f2k_fmts))
 		{
-			dev_err(f2k->isp->dev,"%s:code->index %d\n",__func__,code->index);	
+			dev_err(f2k->isp->dev,"%s:code->index %d\n",__func__,code->index);
 			return -EINVAL;
 		}
 		code->code = f2k_fmts[code->index];
@@ -3652,7 +3683,7 @@ static int f2k_enum_mbus_code(struct v4l2_subdev *sd,
 				code->code = MEDIA_BUS_FMT_UYVY8_1X16;
 			else
 			{
-				dev_err(f2k->isp->dev,"%s:code->index1 %d\n",__func__,code->index);	
+				dev_err(f2k->isp->dev,"%s:code->index1 %d\n",__func__,code->index);
 				return -EINVAL;
 			}
 		} else {
@@ -3663,7 +3694,7 @@ static int f2k_enum_mbus_code(struct v4l2_subdev *sd,
 				code->code = format->code;
 			else
 			{
-				dev_err(f2k->isp->dev,"%s:code->index2 %d\n",__func__,code->index);	
+				dev_err(f2k->isp->dev,"%s:code->index2 %d\n",__func__,code->index);
 				return -EINVAL;
 			}
 		}
@@ -3688,7 +3719,7 @@ static int f2k_enum_frame_size(struct v4l2_subdev *sd,
 	{
 		dev_err(f2k->isp->dev,"%s:fse->index%d\n",__func__,fse->index);
 		return -EINVAL;
-	}	
+	}
 
 	format.code = fse->code;
 	format.width = 1;
@@ -3697,11 +3728,11 @@ static int f2k_enum_frame_size(struct v4l2_subdev *sd,
 	fse->min_width = format.width;
 	fse->min_height = format.height;
 
-	if (format.code != fse->code)	
+	if (format.code != fse->code)
 	{
 		dev_err(f2k->isp->dev,"%s:format.code,fse->code %d\n",__func__,fse->code);
 		return -EINVAL;
-	}	
+	}
 
 	format.code = fse->code;
 	format.width = -1;
@@ -3736,7 +3767,7 @@ static int f2k_get_selection(struct v4l2_subdev *sd, struct v4l2_subdev_pad_conf
 	{
 		dev_err(f2k->isp->dev,"%s:no pad\n",__func__);
 		return -EINVAL;
-	}	
+	}
 
 	switch (sel->target) {
 	case V4L2_SEL_TGT_CROP_BOUNDS:
@@ -3786,14 +3817,14 @@ static int f2k_set_selection(struct v4l2_subdev *sd, struct v4l2_subdev_pad_conf
 	{
 		dev_err(f2k->isp->dev,"%s:pad == NULL\n",__func__);
 		return -EINVAL;
-	}		
+	}
 
 	/* The crop rectangle can't be changed while streaming. */
 	if (f2k->state != ISP_PIPELINE_STREAM_STOPPED)
 	{
 		dev_err(f2k->isp->dev,"%s:ISP_PIPELINE_STREAM_RUNNING\n",__func__);
 		return -EBUSY;
-	}	
+	}
 
 	/* Modifying the crop rectangle always changes the format on the source
 	 * pad. If the KEEP_CONFIG flag is set, just return the current crop
@@ -3891,7 +3922,7 @@ static int f2k_set_format(struct v4l2_subdev *sd, struct v4l2_subdev_pad_config
 		dev_warn(f2k->isp->dev, "%s:pad error!\n",__func__);
 		return -EINVAL;
 	}
-	
+
 	if (fmt->pad == ISP_F2K_PAD_SINK) {
 		/* Reset the crop rectangle. */
 		crop = &f2k->crop_in;
@@ -3899,7 +3930,7 @@ static int f2k_set_format(struct v4l2_subdev *sd, struct v4l2_subdev_pad_config
 		crop->top = 0;
 		crop->width = fmt->format.width;
 		crop->height = fmt->format.height;
-		//	
+		//
 		format = &fmt->format;
 		f2k->formats[ISP_F2K_PAD_SINK].width = format->width;
 		f2k->formats[ISP_F2K_PAD_SINK].height = format->height;
@@ -3921,7 +3952,7 @@ static int f2k_set_format(struct v4l2_subdev *sd, struct v4l2_subdev_pad_config
 		f2k->formats[ISP_F2K_PAD_MAIN_SOURCE].height = format->height;
 		f2k->formats[ISP_F2K_PAD_MAIN_SOURCE].field = V4L2_FIELD_NONE;
 		f2k->formats[ISP_F2K_PAD_MAIN_SOURCE].colorspace =V4L2_COLORSPACE_SRGB;
-		f2k->formats[ISP_F2K_PAD_MAIN_SOURCE].code = format->code;	
+		f2k->formats[ISP_F2K_PAD_MAIN_SOURCE].code = format->code;
 	}
 
 	if (fmt->pad == ISP_F2K_PAD_DS0_SOURCE) {
@@ -3971,7 +4002,7 @@ static int f2k_link_validate(struct v4l2_subdev *sd,
 	{
 		dev_err(f2k->isp->dev,"%s:format error\n",__func__);
 		return -EPIPE;
-	}	
+	}
 
 	return 0;
 }
@@ -3998,7 +4029,7 @@ static int f2k_init_formats(struct v4l2_subdev *sd, struct v4l2_subdev_fh *fh)
 		format.format.code = f2k->formats[pad].code;//MEDIA_BUS_FMT_SRGGB10_1X10;//MEDIA_BUS_FMT_SGRBG10_1X10;
 		format.format.width = f2k->formats[pad].width;//1920;//4096;
 		format.format.height = f2k->formats[pad].height;//1080;//4096;
-		f2k_set_format(sd, fh ? fh->pad : NULL, &format);		
+		f2k_set_format(sd, fh ? fh->pad : NULL, &format);
 	}
 
 	return 0;
@@ -4074,7 +4105,7 @@ static int f2k_link_setup(struct media_entity *entity,
 		{
 			dev_err(f2k->isp->dev,"%s:!ISP_F2K_INPUT_NONE\n",__func__);
 			return -EBUSY;
-		}	
+		}
 
 		if (remote->entity == &f2k->subdev.entity)
 			f2k->input = ISP_F2K_INPUT_VI;
@@ -4089,21 +4120,21 @@ static int f2k_link_setup(struct media_entity *entity,
 			{
 				dev_err(f2k->isp->dev,"%s:!ISP_F2K_PAD_MAIN_SOURCE\n",__func__);
 				return -EBUSY;
-			}	
+			}
 			f2k->output |= ISP_F2K_OUTPUT_MAIN_MEM;
 		} else {
 			f2k->output &= ~ISP_F2K_OUTPUT_MAIN_MEM;
 		}
 		break;
 	case ISP_F2K_PAD_DS0_SOURCE:
-	case ISP_F2K_PAD_DS0_SOURCE | 2 << 16:	
+	case ISP_F2K_PAD_DS0_SOURCE | 2 << 16:
 		/* Write to memory */
 		if (flags & MEDIA_LNK_FL_ENABLED) {
 			if (f2k->output & ISP_F2K_OUTPUT_DS0_MEM)
 			{
 				dev_err(f2k->isp->dev,"%s:!ISP_F2K_PAD_DS0_SOURCE\n",__func__);
 				return -EBUSY;
-			}	
+			}
 			f2k->output |= ISP_F2K_OUTPUT_DS0_MEM;
 		} else {
 			f2k->output &= ~ISP_F2K_OUTPUT_DS0_MEM;
@@ -4117,7 +4148,7 @@ static int f2k_link_setup(struct media_entity *entity,
 			{
 				dev_err(f2k->isp->dev,"%s:!ISP_F2K_PAD_DS1_SOURCE\n",__func__);
 				return -EBUSY;
-			}	
+			}
 			f2k->output |= ISP_F2K_OUTPUT_DS1_MEM;
 		} else {
 			f2k->output &= ~ISP_F2K_OUTPUT_DS1_MEM;
@@ -4131,7 +4162,7 @@ static int f2k_link_setup(struct media_entity *entity,
 			{
 				dev_err(f2k->isp->dev,"%s:!ISP_F2K_PAD_DS2_SOURCE\n",__func__);
 				return -EBUSY;
-			}	
+			}
 			f2k->output |= ISP_F2K_OUTPUT_DS2_MEM;
 		} else {
 			f2k->output &= ~ISP_F2K_OUTPUT_DS2_MEM;
@@ -4139,7 +4170,7 @@ static int f2k_link_setup(struct media_entity *entity,
 		break;
 	default:
 		dev_dbg(f2k->isp->dev,"%s:!no index\n",__func__);
-		return -EINVAL;			
+		return -EINVAL;
 	}
 
 	dev_dbg(f2k->isp->dev,"%s:end\n",__func__);
@@ -4182,7 +4213,7 @@ int k510isp_f2k_register_entities(struct isp_f2k_device *f2k,
 		dev_err(f2k->isp->dev, "%s: v4l2_device_register_subdev failed (%d)\n",
 			__func__, ret);
 		goto error;
-	}		
+	}
 
 	ret = k510isp_video_register(&f2k->video_out[MAIN_VIDEO], vdev);
 	if (ret < 0)
@@ -4222,7 +4253,7 @@ int k510isp_f2k_register_entities(struct isp_f2k_device *f2k,
 	k510isp_video_unregister(&f2k->video_out[DS1_VIDEO]);
 error_ds0:
 	k510isp_video_unregister(&f2k->video_out[DS0_VIDEO]);
-error_main:	
+error_main:
 	k510isp_video_unregister(&f2k->video_out[MAIN_VIDEO]);
 error:
 	k510isp_f2k_unregister_entities(f2k);
@@ -4269,7 +4300,7 @@ static int k510isp_f2k_init_entities(struct isp_f2k_device *f2k)
 	{
 		dev_err(isp->dev,"%s:media_entity_pads_init ret:%d\n",__func__,ret);
 		return ret;
-	}	
+	}
 	dev_dbg(isp->dev,"%s:media_entity_pads_init end\n",__func__);
 	f2k_init_formats(sd, NULL);
 //
@@ -4279,14 +4310,14 @@ static int k510isp_f2k_init_entities(struct isp_f2k_device *f2k)
 	f2k->video_out[MAIN_VIDEO].capture_mem = PAGE_ALIGN(4096 * 4096) * 3;
 	f2k->video_out[MAIN_VIDEO].bpl_alignment = 32; //16
 	f2k->video_out[MAIN_VIDEO].bpl_max = 0xffffffe0;//0xfffffff0; //0xffffffe0
-	//f2k->output |= ISP_F2K_OUTPUT_MAIN_MEM; 
-	
+	//f2k->output |= ISP_F2K_OUTPUT_MAIN_MEM;
+
 	ret = k510isp_video_init(&f2k->video_out[MAIN_VIDEO], "F2K");
 	if (ret < 0)
 	{
 		dev_err(isp->dev,"%s:k510isp_video_init ret:%d\n",__func__,ret);
 		goto error_video;
-	}	
+	}
 //
 	f2k->video_out[DS0_VIDEO].type = V4L2_BUF_TYPE_VIDEO_CAPTURE;//V4L2_BUF_TYPE_VIDEO_CAPTURE;//V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE;//V4L2_BUF_TYPE_VIDEO_OUTPUT;
 	f2k->video_out[DS0_VIDEO].ops = &f2k_video_ops;
@@ -4338,13 +4369,13 @@ static int k510isp_f2k_init_entities(struct isp_f2k_device *f2k)
 	return 0;
 
 error_ds1_video:
-	k510isp_video_cleanup(&f2k->video_out[DS1_VIDEO]);	
+	k510isp_video_cleanup(&f2k->video_out[DS1_VIDEO]);
 error_ds0_video:
 	k510isp_video_cleanup(&f2k->video_out[DS0_VIDEO]);
 error_main_video:
 	k510isp_video_cleanup(&f2k->video_out[MAIN_VIDEO]);
 error_video:
-	media_entity_cleanup(&f2k->subdev.entity); 
+	media_entity_cleanup(&f2k->subdev.entity);
 	return ret;
 }
 /*
@@ -4380,7 +4411,7 @@ int k510isp_f2k_init(struct k510_isp_device *isp)
 		dev_err(isp->dev,"%s:k510isp_f2k_init_entities\n",__func__);
 		mutex_destroy(&f2k->ioctl_lock);
 		return ret;
-	}	
+	}
 	dev_dbg(isp->dev,"%s:end\n",__func__);
 	return 0;
 }
@@ -4403,5 +4434,5 @@ void k510isp_f2k_cleanup(struct k510_isp_device *isp)
 		dma_free_coherent(isp->dev, f2k->nr3d_dma.dma_size, f2k->nr3d_dma.addr,
 				  f2k->nr3d_dma.dma);
 //
-	mutex_destroy(&f2k->ioctl_lock);			  	
+	mutex_destroy(&f2k->ioctl_lock);
 }
diff --git a/drivers/media/platform/canaan-isp/isp_2k/isp_r2k.c b/drivers/media/platform/canaan-isp/isp_2k/isp_r2k.c
index e878d5a8..54349efa 100755
--- a/drivers/media/platform/canaan-isp/isp_2k/isp_r2k.c
+++ b/drivers/media/platform/canaan-isp/isp_2k/isp_r2k.c
@@ -43,69 +43,69 @@ static unsigned long long get_usec(void)
 //
 void isp_r2k_wrap_SetComRst(struct k510_isp_device *isp)
 {
-    
+
     ISP_WRAP_RST_CTL_S stRstCtl;
-	stRstCtl.sw_3dnr_rst = 1;    
+	stRstCtl.sw_3dnr_rst = 1;
 	stRstCtl.wdr_2_frame_rst = 1;
 	stRstCtl.wdr_3_frame_rst =1;
-	stRstCtl.ldc_rst = 1; 
-	stRstCtl.main_out_rst = 1;   
-	stRstCtl.ds0_out_rst = 1;    
-	stRstCtl.ds1_out_rst = 1;   
-	stRstCtl.ds2_out_rst = 1; 
-	stRstCtl.wrap_com_rst = 1;   
-	stRstCtl.wrap_cfg_rst = 1;   
-	stRstCtl.core_com_rst = 1;   
-	stRstCtl.core_cfg_rst = 1; 
-	stRstCtl.axi_wr_ch_rst = 1;  
-	stRstCtl.axi_rd_ch_rst = 1;     
+	stRstCtl.ldc_rst = 1;
+	stRstCtl.main_out_rst = 1;
+	stRstCtl.ds0_out_rst = 1;
+	stRstCtl.ds1_out_rst = 1;
+	stRstCtl.ds2_out_rst = 1;
+	stRstCtl.wrap_com_rst = 1;
+	stRstCtl.wrap_cfg_rst = 1;
+	stRstCtl.core_com_rst = 1;
+	stRstCtl.core_cfg_rst = 1;
+	stRstCtl.axi_wr_ch_rst = 1;
+	stRstCtl.axi_rd_ch_rst = 1;
     Isp_Drv_R2k_Wrap_SetPipeReset(isp,&stRstCtl);
 }
 //
 void isp_r2k_wrap_SetDmaRst(struct k510_isp_device *isp)
 {
-    
+
     ISP_WRAP_DMA_RST_CTL_S stDmaRstCtl;
-    stDmaRstCtl.y_3dnr_wr_ch_rst = 1;     
-    stDmaRstCtl.uv_3dnr_wr_ch_rst = 1;    
-    stDmaRstCtl.ldc_y_wr_ch_rst = 1;      
-    stDmaRstCtl.ldc_uv_wr_ch_rst = 1;     
-    stDmaRstCtl.wdr_raw_wr_ch_rst = 1;    
-    stDmaRstCtl.main_out_y_wr_ch_rst = 1; 
+    stDmaRstCtl.y_3dnr_wr_ch_rst = 1;
+    stDmaRstCtl.uv_3dnr_wr_ch_rst = 1;
+    stDmaRstCtl.ldc_y_wr_ch_rst = 1;
+    stDmaRstCtl.ldc_uv_wr_ch_rst = 1;
+    stDmaRstCtl.wdr_raw_wr_ch_rst = 1;
+    stDmaRstCtl.main_out_y_wr_ch_rst = 1;
     stDmaRstCtl.main_out_uv_wr_ch_rst = 1;
-    stDmaRstCtl.y_3dnr_rd_ch_rst = 1;     
-    stDmaRstCtl.uv_3dnr_rd_ch_rst = 1;    
-    stDmaRstCtl.ldc_y_rd_ch_rst = 1;      
-    stDmaRstCtl.ldc_uv_rd_ch_rst = 1;     
-    stDmaRstCtl.wdr_raw_rd_ch_rst = 1;    
-    stDmaRstCtl.ds0_out_y_wr_ch_rst = 1;  
-    stDmaRstCtl.ds0_out_uv_wr_ch_rst = 1; 
-    stDmaRstCtl.ds1_out_y_wr_ch_rst = 1;  
-    stDmaRstCtl.ds1_out_uv_wr_ch_rst = 1; 
-    stDmaRstCtl.ds2_out_r_wr_ch_rst = 1;  
-    stDmaRstCtl.ds2_out_g_wr_ch_rst = 1;  
-    stDmaRstCtl.ds2_out_b_wr_ch_rst = 1;  
-    stDmaRstCtl.ds0_osd0_rd_ch_rst = 1;   
-    stDmaRstCtl.ds0_osd1_rd_ch_rst = 1;   
-    stDmaRstCtl.ds1_osd0_rd_ch_rst = 1;   
-    stDmaRstCtl.ds1_osd1_rd_ch_rst = 1;   
-    stDmaRstCtl.ds2_osd0_rd_ch_rst = 1;   
-    stDmaRstCtl.ds2_osd1_rd_ch_rst = 1;   
-    stDmaRstCtl.ds1_osd2_rd_ch_rst = 1;   
-    stDmaRstCtl.ds2_osd2_rd_ch_rst = 1;   
+    stDmaRstCtl.y_3dnr_rd_ch_rst = 1;
+    stDmaRstCtl.uv_3dnr_rd_ch_rst = 1;
+    stDmaRstCtl.ldc_y_rd_ch_rst = 1;
+    stDmaRstCtl.ldc_uv_rd_ch_rst = 1;
+    stDmaRstCtl.wdr_raw_rd_ch_rst = 1;
+    stDmaRstCtl.ds0_out_y_wr_ch_rst = 1;
+    stDmaRstCtl.ds0_out_uv_wr_ch_rst = 1;
+    stDmaRstCtl.ds1_out_y_wr_ch_rst = 1;
+    stDmaRstCtl.ds1_out_uv_wr_ch_rst = 1;
+    stDmaRstCtl.ds2_out_r_wr_ch_rst = 1;
+    stDmaRstCtl.ds2_out_g_wr_ch_rst = 1;
+    stDmaRstCtl.ds2_out_b_wr_ch_rst = 1;
+    stDmaRstCtl.ds0_osd0_rd_ch_rst = 1;
+    stDmaRstCtl.ds0_osd1_rd_ch_rst = 1;
+    stDmaRstCtl.ds1_osd0_rd_ch_rst = 1;
+    stDmaRstCtl.ds1_osd1_rd_ch_rst = 1;
+    stDmaRstCtl.ds2_osd0_rd_ch_rst = 1;
+    stDmaRstCtl.ds2_osd1_rd_ch_rst = 1;
+    stDmaRstCtl.ds1_osd2_rd_ch_rst = 1;
+    stDmaRstCtl.ds2_osd2_rd_ch_rst = 1;
     Isp_Drv_R2k_Wrap_SetDmaReset(isp,&stDmaRstCtl);
 }
 //
 void isp_r2k_wrap_SetPipeClkCtl(struct k510_isp_device *isp)
 {
-    
+
     ISP_WRAP_PIPE_CLK_CTL_S pstPipeClkCtl;
     pstPipeClkCtl.wrap_com_clk_en = 1;
     pstPipeClkCtl.wrap_cfg_clk_en = 1;
     pstPipeClkCtl.core_com_clk_en = 1;
     pstPipeClkCtl.core_cfg_clk_en = 1;
-    pstPipeClkCtl.axi_wr_ch_en = 1;   
-    pstPipeClkCtl.axi_rd_ch_en = 1;    
+    pstPipeClkCtl.axi_wr_ch_en = 1;
+    pstPipeClkCtl.axi_rd_ch_en = 1;
 	Isp_Drv_R2k_Wrap_SetComClkCtl(isp,&pstPipeClkCtl);
 }
 //
@@ -122,7 +122,7 @@ void isp_r2k_wrap_SetLdc(struct k510_isp_device *isp,struct isp_wrap_ldc_info *l
 	  {
 	  	pstLdcAttr.ldc_clk_en = 0;
 	  	pstLdcAttr.ldc_dma_en = 0;
-	  }	
+	  }
     ISP_WRAP_LDC_BUF_S              *stLdcBuf = &pstLdcAttr.stLdcBuf;
     stLdcBuf->ldc_y_buf_base = ldcInfo->ldc_y_buf_base;//ISP_BUF_LDC_Y;
     stLdcBuf->ldc_uv_buf_base = ldcInfo->ldc_uv_buf_base;//ISP_BUF_LDC_UV;
@@ -133,7 +133,7 @@ void isp_r2k_wrap_SetLdc(struct k510_isp_device *isp,struct isp_wrap_ldc_info *l
 //
 void isp_r2k_wrap_SetMainOut(struct k510_isp_device *isp,struct isp_wrap_main_info *mainInfo)
 {
-    
+
     ISP_WRAP_MAINOUT_ATTR_S pstMainOutAttr;
     pstMainOutAttr.main_out_clk_en = 1;
 	if( 1 == mainInfo->main_out_en)
@@ -213,9 +213,9 @@ void isp_r2k_wrap_SetDs0Out(struct k510_isp_device *isp,struct isp_wrap_ds0_info
 		stDs0ClkCtl->ds_out0_osd0_ch_clk_en = 0;
 		stDs0ClkCtl->ds_out0_osd1_ch_clk_en = 0;
 		stDs0ClkCtl->ds_out0_osd2_ch_clk_en = 0;
-		stDs0DmaEn->ds_out0_dma_en = 0;	
+		stDs0DmaEn->ds_out0_dma_en = 0;
 		stDs0DmaEn->ds_out0_y_ch_dma_en =0;
-		stDs0DmaEn->ds_out0_uv_ch_dma_en = 0;	
+		stDs0DmaEn->ds_out0_uv_ch_dma_en = 0;
 		stDs0DmaEn->ds0_osd0_ch_dma_en =0;
 		stDs0DmaEn->ds0_osd1_ch_dma_en = 0;
 		stDs0DmaEn->ds0_osd2_ch_dma_en = 0;
@@ -234,7 +234,7 @@ void isp_r2k_wrap_SetDs0Out(struct k510_isp_device *isp,struct isp_wrap_ds0_info
     stDs0Buf->ds0_y_buf0_base = ds0Info->ds0_y_buf0_base;//ISP_BUF_DS0_Y;
     stDs0Buf->ds0_y_buf1_base = ds0Info->ds0_y_buf1_base;//ISP_BUF_DS0_Y;
     stDs0Buf->ds0_y_line_stride = ds0Info->ds0_line_stride;//(Width + 15)/16*16;//ISP_BUF_DS0_Y_STRIDE;
-    stDs0Buf->ds0_uv_line_stride = ds0Info->ds0_line_stride;//(Width + 15)/16*16;//ISP_BUF_DS0_UV_STRIDE;	
+    stDs0Buf->ds0_uv_line_stride = ds0Info->ds0_line_stride;//(Width + 15)/16*16;//ISP_BUF_DS0_UV_STRIDE;
     stDs0Buf->ds0_uv_buf0_base = ds0Info->ds0_uv_buf0_base;//ISP_BUF_DS0_Y + stDs0Buf->ds0_y_line_stride * Height;//ISP_BUF_DS0_UV;
     stDs0Buf->ds0_uv_buf1_base = ds0Info->ds0_uv_buf1_base;//ISP_BUF_DS0_Y + stDs0Buf->ds0_y_line_stride * Height;//ISP_BUF_DS0_UV;
     Isp_Drv_R2k_Wrap_SetDs0Out(isp,&pstDs0OutAttr);
@@ -252,7 +252,7 @@ void isp_r2k_wrap_SetDs1Out(struct k510_isp_device *isp,struct isp_wrap_ds1_info
 	stDs1ClkCtl->ds1_out_clk_en  = 1;
 	stDs1ClkCtl->ds1_out_y_ch_clk_en = 1;
 	stDs1ClkCtl->ds1_out_uv_ch_clk_en = 1;
-    
+
 	if( 1 == ds1Info->ds1_out_en)	{
 
 		stDs1ClkCtl->ds_out1_osd0_ch_clk_en = 0;
@@ -309,7 +309,7 @@ void isp_r2k_wrap_SetDs1Out(struct k510_isp_device *isp,struct isp_wrap_ds1_info
     stDs1Buf->ds1_y_buf0_base = ds1Info->ds1_y_buf0_base;//ISP_BUF_DS1_Y;
     stDs1Buf->ds1_y_buf1_base = ds1Info->ds1_y_buf1_base;//ISP_BUF_DS1_Y;
     stDs1Buf->ds1_y_line_stride = ds1Info->ds1_line_stride;//(Width +15)/16*16;//ISP_BUF_DS1_Y_STRIDE;
-    stDs1Buf->ds1_uv_line_stride = ds1Info->ds1_line_stride;//(Width +15)/16*16;//ISP_BUF_DS1_Y_STRIDE;	
+    stDs1Buf->ds1_uv_line_stride = ds1Info->ds1_line_stride;//(Width +15)/16*16;//ISP_BUF_DS1_Y_STRIDE;
     stDs1Buf->ds1_uv_buf0_base = ds1Info->ds1_uv_buf0_base;//ISP_BUF_DS1_Y + stDs1Buf->ds1_y_line_stride *Height;//ISP_BUF_DS1_UV;
     stDs1Buf->ds1_uv_buf1_base = ds1Info->ds1_uv_buf1_base;//ISP_BUF_DS1_Y + stDs1Buf->ds1_y_line_stride *Height;//ISP_BUF_DS1_UV;
     Isp_Drv_R2k_Wrap_SetDs1Out(isp,&pstDs1OutAttr);
@@ -317,7 +317,7 @@ void isp_r2k_wrap_SetDs1Out(struct k510_isp_device *isp,struct isp_wrap_ds1_info
 //
 void isp_r2k_wrap_SetDs2Out(struct k510_isp_device *isp,struct isp_wrap_ds2_info *ds2Info)
 {
-	
+
 	unsigned int Width = ds2Info->ds2_size.Width;
 	unsigned int Height = ds2Info->ds2_size.Height;
     ISP_WRAP_DS2OUT_ATTR_S pstDs2OutAttr;
@@ -367,7 +367,7 @@ void isp_r2k_wrap_SetDs2Out(struct k510_isp_device *isp,struct isp_wrap_ds2_info
 	}
     ISP_WRAP_DS2_PIXEL_FORMAT_CTL_S *stDs2PixelFormat = &pstDs2OutAttr.stDs2PixelFormat;
 	stDs2PixelFormat->ds2_out_img_format = ds2Info->ds2_out_img_format;//ISP_RGBRAW_DATA;
-	stDs2PixelFormat->ds2_out_img_out_format = ds2Info->ds2_out_img_out_format;//OUT_ARGB;     
+	stDs2PixelFormat->ds2_out_img_out_format = ds2Info->ds2_out_img_out_format;//OUT_ARGB;
 	stDs2PixelFormat->ds2_out_pixel_width = ds2Info->ds2_out_pxl_width;//PIXEL_8;
 	stDs2PixelFormat->ds2_out_yuv422_pxl_order = ds2Info->ds2_out_yuv422_pxl_order;//YUYV; //not need
 	stDs2PixelFormat->ds2_out_yuv_in_format = ds2Info->ds2_out_yuv_in_format;//IN_YUV422; //not need
@@ -384,12 +384,12 @@ void isp_r2k_wrap_SetDs2Out(struct k510_isp_device *isp,struct isp_wrap_ds2_info
     stDs2Buf->ds2_r_line_stride = ds2Info->ds2_line_stride;
     stDs2Buf->ds2_g_line_stride = ds2Info->ds2_line_stride;
     stDs2Buf->ds2_b_line_stride = ds2Info->ds2_line_stride;
-	Isp_Drv_R2k_Wrap_SetDs2Out(isp,&pstDs2OutAttr);	
+	Isp_Drv_R2k_Wrap_SetDs2Out(isp,&pstDs2OutAttr);
 }
 //
 void isp_r2k_wrap_SetDmaConfig(struct k510_isp_device *isp)
 {
-    
+
     ISP_WRAP_DMA_ATTR_S pstDmaAttr;
     unsigned int DmaChIndex = 0;
 	ISP_WRAP_DMA_MODE_S *stDmaChMode = &pstDmaAttr.stDmaChMode;
@@ -485,106 +485,106 @@ int isp_r2k_wrap_SetAxiCtl(struct k510_isp_device *isp)
 */
 int isp_r2k_wrap_SetIntMask(struct k510_isp_device *isp)
 {
-	
+
 	ISP_WRAP_CORE_INT_CTL_S stCoreIntCtl;
-    stCoreIntCtl.int_raw_in_mask= 1 ;  
-    stCoreIntCtl.int_3a_mask= 1 ;      
-    stCoreIntCtl.raw_int_mask= 1 ;     
-    stCoreIntCtl.rgb_int_mask= 1 ;     
-    stCoreIntCtl.yuv_int_mask= 1 ;     
-    stCoreIntCtl.ldc_int_mask= 1 ;     
+    stCoreIntCtl.int_raw_in_mask= 1 ;
+    stCoreIntCtl.int_3a_mask= 1 ;
+    stCoreIntCtl.raw_int_mask= 1 ;
+    stCoreIntCtl.rgb_int_mask= 1 ;
+    stCoreIntCtl.yuv_int_mask= 1 ;
+    stCoreIntCtl.ldc_int_mask= 1 ;
     stCoreIntCtl.main_out_int_mask= 1 ;
-    stCoreIntCtl.isp_awb_int_mask= 1 ; 
-    stCoreIntCtl.isp_ae_int_mask= 1 ;  
-    stCoreIntCtl.isp_af_int_mask= 1 ; 
+    stCoreIntCtl.isp_awb_int_mask= 1 ;
+    stCoreIntCtl.isp_ae_int_mask= 1 ;
+    stCoreIntCtl.isp_af_int_mask= 1 ;
     Isp_Drv_R2k_Wrap_SetCoreIntCtlMask(isp,&stCoreIntCtl);
     ISP_WRAP_DMA_WR_INT_MASK0_S stDmaWRMask0;
-    stDmaWRMask0.wr_3dnr_y_frm_end_int_mask= 1 ;    
-    stDmaWRMask0.wr_3dnr_y_line_base_int_mask= 1 ;  
+    stDmaWRMask0.wr_3dnr_y_frm_end_int_mask= 1 ;
+    stDmaWRMask0.wr_3dnr_y_line_base_int_mask= 1 ;
     stDmaWRMask0.wr_3dnr_y_err_frm_end_int_mask= 1 ;
-    stDmaWRMask0.wr_3dnr_y_err_immediate_int_mask= 1 ;     
-    stDmaWRMask0.wr_3dnr_uv_frm_end_int_mask= 1 ;   
-    stDmaWRMask0.wr_3dnr_uv_line_base_int_mask= 1 ; 
-    stDmaWRMask0.wr_3dnr_uv_err_frm_end_int_mask= 1 ;      
-    stDmaWRMask0.wr_3dnr_uv_err_immediate_int_mask= 1 ;    
-    stDmaWRMask0.ldc_wr_y_frm_end_int_mask= 1 ;     
-    stDmaWRMask0.ldc_wr_y_line_base_int_mask= 1 ;   
-    stDmaWRMask0.ldc_wr_y_err_frm_end_int_mask= 1 ; 
-    stDmaWRMask0.ldc_wr_y_err_immediate_int_mask= 1 ;      
-    stDmaWRMask0.ldc_wr_uv_frm_end_int_mask= 1 ;    
-    stDmaWRMask0.ldc_wr_uv_line_base_int_mask= 1 ;  
+    stDmaWRMask0.wr_3dnr_y_err_immediate_int_mask= 1 ;
+    stDmaWRMask0.wr_3dnr_uv_frm_end_int_mask= 1 ;
+    stDmaWRMask0.wr_3dnr_uv_line_base_int_mask= 1 ;
+    stDmaWRMask0.wr_3dnr_uv_err_frm_end_int_mask= 1 ;
+    stDmaWRMask0.wr_3dnr_uv_err_immediate_int_mask= 1 ;
+    stDmaWRMask0.ldc_wr_y_frm_end_int_mask= 1 ;
+    stDmaWRMask0.ldc_wr_y_line_base_int_mask= 1 ;
+    stDmaWRMask0.ldc_wr_y_err_frm_end_int_mask= 1 ;
+    stDmaWRMask0.ldc_wr_y_err_immediate_int_mask= 1 ;
+    stDmaWRMask0.ldc_wr_uv_frm_end_int_mask= 1 ;
+    stDmaWRMask0.ldc_wr_uv_line_base_int_mask= 1 ;
     stDmaWRMask0.ldc_wr_uv_err_frm_end_int_mask= 1 ;
-    stDmaWRMask0.ldc_wr_uv_err_immediate_int_mask= 1 ;     
-    stDmaWRMask0.wdr_wr_raw_frm_end_int_mask= 1 ;   
-    stDmaWRMask0.wdr_wr_raw_line_base_int_mask= 1 ; 
-    stDmaWRMask0.wdr_wr_raw_err_frm_end_int_mask= 1 ;      
-    stDmaWRMask0.wdr_wr_raw_err_immediate_int_mask= 1 ;    
+    stDmaWRMask0.ldc_wr_uv_err_immediate_int_mask= 1 ;
+    stDmaWRMask0.wdr_wr_raw_frm_end_int_mask= 1 ;
+    stDmaWRMask0.wdr_wr_raw_line_base_int_mask= 1 ;
+    stDmaWRMask0.wdr_wr_raw_err_frm_end_int_mask= 1 ;
+    stDmaWRMask0.wdr_wr_raw_err_immediate_int_mask= 1 ;
     stDmaWRMask0.main_out_wr_y_frm_end_int_mask= 1 ;
-    stDmaWRMask0.main_out_wr_y_line_base_int_mask= 1 ;     
-    stDmaWRMask0.main_out_wr_y_err_frm_end_int_mask= 1 ;   
-    stDmaWRMask0.main_out_wr_y_err_immediate_int_mask= 1 ; 
-    stDmaWRMask0.main_out_wr_uv_frm_end_int_mask= 1 ;      
-    stDmaWRMask0.main_out_wr_uv_line_base_int_mask= 1 ;    
-    stDmaWRMask0.main_out_wr_uv_err_frm_end_int_mask= 1 ;  
+    stDmaWRMask0.main_out_wr_y_line_base_int_mask= 1 ;
+    stDmaWRMask0.main_out_wr_y_err_frm_end_int_mask= 1 ;
+    stDmaWRMask0.main_out_wr_y_err_immediate_int_mask= 1 ;
+    stDmaWRMask0.main_out_wr_uv_frm_end_int_mask= 1 ;
+    stDmaWRMask0.main_out_wr_uv_line_base_int_mask= 1 ;
+    stDmaWRMask0.main_out_wr_uv_err_frm_end_int_mask= 1 ;
     stDmaWRMask0.main_out_wr_uv_err_immediate_int_mask= 1 ;
     Isp_Drv_R2k_Wrap_SetDmaWRIntMask0(isp,&stDmaWRMask0);
     ISP_WRAP_DMA_WR_INT_MASK1_S stDmaWRMask1;
-    stDmaWRMask1.ds0_out_wr_y_frm_end_mask= 1 ; 
-    stDmaWRMask1.ds0_out_wr_y_line_base_mask= 1 ;      
-    stDmaWRMask1.ds0_out_wr_y_err_frm_end_mask= 1 ;    
-    stDmaWRMask1.ds0_out_wr_y_err_immediate_mask= 1 ;  
+    stDmaWRMask1.ds0_out_wr_y_frm_end_mask= 1 ;
+    stDmaWRMask1.ds0_out_wr_y_line_base_mask= 1 ;
+    stDmaWRMask1.ds0_out_wr_y_err_frm_end_mask= 1 ;
+    stDmaWRMask1.ds0_out_wr_y_err_immediate_mask= 1 ;
     stDmaWRMask1.ds0_out_wr_uv_frm_end_mask= 1 ;
-    stDmaWRMask1.ds0_out_wr_uv_line_base_mask= 1 ;     
-    stDmaWRMask1.ds0_out_wr_uv_err_frm_end_mask= 1 ;   
-    stDmaWRMask1.ds0_out_wr_uv_err_immediate_mask= 1 ; 
-    stDmaWRMask1.ds1_out_wr_y_frm_end_mask= 1 ; 
-    stDmaWRMask1.ds1_out_wr_y_line_base_mask= 1 ;      
-    stDmaWRMask1.ds1_out_wr_y_err_frm_end_mask= 1 ;    
-    stDmaWRMask1.ds1_out_wr_y_err_immediate_mask= 1 ;  
+    stDmaWRMask1.ds0_out_wr_uv_line_base_mask= 1 ;
+    stDmaWRMask1.ds0_out_wr_uv_err_frm_end_mask= 1 ;
+    stDmaWRMask1.ds0_out_wr_uv_err_immediate_mask= 1 ;
+    stDmaWRMask1.ds1_out_wr_y_frm_end_mask= 1 ;
+    stDmaWRMask1.ds1_out_wr_y_line_base_mask= 1 ;
+    stDmaWRMask1.ds1_out_wr_y_err_frm_end_mask= 1 ;
+    stDmaWRMask1.ds1_out_wr_y_err_immediate_mask= 1 ;
     stDmaWRMask1.ds1_out_wr_uv_frm_end_mask= 1 ;
-    stDmaWRMask1.ds1_out_wr_uv_line_base_mask= 1 ;     
-    stDmaWRMask1.ds1_out_wr_uv_err_frm_end_mask= 1 ;   
-    stDmaWRMask1.ds1_out_wr_uv_err_immediate_mask= 1 ; 
-    stDmaWRMask1.ds2_out_wr_r_frm_end_mask= 1 ; 
-    stDmaWRMask1.ds2_out_wr_r_line_base_mask= 1 ;      
-    stDmaWRMask1.ds2_out_wr_r_err_frm_end_mask= 1 ;    
-    stDmaWRMask1.ds2_out_wr_r_err_immediate_mask= 1 ;  
-    stDmaWRMask1.ds2_out_wr_g_frm_end_mask= 1 ; 
-    stDmaWRMask1.ds2_out_wr_g_line_base_mask= 1 ;      
-    stDmaWRMask1.ds2_out_wr_g_err_frm_end_mask= 1 ;    
-    stDmaWRMask1.ds2_out_wr_g_err_immediate_mask= 1 ;  
-    stDmaWRMask1.ds2_out_wr_b_frm_end_mask= 1 ; 
-    stDmaWRMask1.ds2_out_wr_b_line_base_mask= 1 ;      
-    stDmaWRMask1.ds2_out_wr_b_err_frm_end_mask= 1 ;    
-    stDmaWRMask1.ds2_out_wr_b_err_immediate_mask= 1 ; 
+    stDmaWRMask1.ds1_out_wr_uv_line_base_mask= 1 ;
+    stDmaWRMask1.ds1_out_wr_uv_err_frm_end_mask= 1 ;
+    stDmaWRMask1.ds1_out_wr_uv_err_immediate_mask= 1 ;
+    stDmaWRMask1.ds2_out_wr_r_frm_end_mask= 1 ;
+    stDmaWRMask1.ds2_out_wr_r_line_base_mask= 1 ;
+    stDmaWRMask1.ds2_out_wr_r_err_frm_end_mask= 1 ;
+    stDmaWRMask1.ds2_out_wr_r_err_immediate_mask= 1 ;
+    stDmaWRMask1.ds2_out_wr_g_frm_end_mask= 1 ;
+    stDmaWRMask1.ds2_out_wr_g_line_base_mask= 1 ;
+    stDmaWRMask1.ds2_out_wr_g_err_frm_end_mask= 1 ;
+    stDmaWRMask1.ds2_out_wr_g_err_immediate_mask= 1 ;
+    stDmaWRMask1.ds2_out_wr_b_frm_end_mask= 1 ;
+    stDmaWRMask1.ds2_out_wr_b_line_base_mask= 1 ;
+    stDmaWRMask1.ds2_out_wr_b_err_frm_end_mask= 1 ;
+    stDmaWRMask1.ds2_out_wr_b_err_immediate_mask= 1 ;
     Isp_Drv_R2k_Wrap_SetDmaWRIntMask1(isp,&stDmaWRMask1);
     ISP_WRAP_DMA_RD_INT_MASK0_S stDmaRDMask0;
     stDmaRDMask0.rd_3dnr_y_frm_end_int_mask= 1 ;
-    stDmaRDMask0.rd_3dnr_y_line_base_int_mask= 1 ;     
-    stDmaRDMask0.rd_3dnr_y_err_frm_end_int_mask= 1 ;   
-    stDmaRDMask0.rd_3dnr_y_err_immediate_int_mask= 1 ; 
-    stDmaRDMask0.rd_3dnr_uv_frm_end_int_mask= 1 ;      
-    stDmaRDMask0.rd_3dnr_uv_line_base_int_mask= 1 ;    
-    stDmaRDMask0.rd_3dnr_uv_err_frm_end_int_mask= 1 ;  
+    stDmaRDMask0.rd_3dnr_y_line_base_int_mask= 1 ;
+    stDmaRDMask0.rd_3dnr_y_err_frm_end_int_mask= 1 ;
+    stDmaRDMask0.rd_3dnr_y_err_immediate_int_mask= 1 ;
+    stDmaRDMask0.rd_3dnr_uv_frm_end_int_mask= 1 ;
+    stDmaRDMask0.rd_3dnr_uv_line_base_int_mask= 1 ;
+    stDmaRDMask0.rd_3dnr_uv_err_frm_end_int_mask= 1 ;
     stDmaRDMask0.rd_3dnr_uv_err_immediate_int_mask= 1 ;
-    stDmaRDMask0.ldc_rd_y_frm_end_int_mask= 1 ; 
-    stDmaRDMask0.ldc_rd_y_line_base_int_mask= 1 ;      
-    stDmaRDMask0.ldc_rd_y_err_frm_end_int_mask= 1 ;    
-    stDmaRDMask0.ldc_rd_y_err_immediate_int_mask= 1 ;  
+    stDmaRDMask0.ldc_rd_y_frm_end_int_mask= 1 ;
+    stDmaRDMask0.ldc_rd_y_line_base_int_mask= 1 ;
+    stDmaRDMask0.ldc_rd_y_err_frm_end_int_mask= 1 ;
+    stDmaRDMask0.ldc_rd_y_err_immediate_int_mask= 1 ;
     stDmaRDMask0.ldc_rd_uv_frm_end_int_mask= 1 ;
-    stDmaRDMask0.ldc_rd_uv_line_base_int_mask= 1 ;     
-    stDmaRDMask0.ldc_rd_uv_err_frm_end_int_mask= 1 ;   
-    stDmaRDMask0.ldc_rd_uv_err_immediate_int_mask= 1 ; 
-    stDmaRDMask0.wdr_rd_raw_frm_end_int_mask= 1 ;      
-    stDmaRDMask0.wdr_rd_raw_line_base_int_mask= 1 ;    
-    stDmaRDMask0.wdr_rd_raw_err_frm_end_int_mask= 1 ;  
+    stDmaRDMask0.ldc_rd_uv_line_base_int_mask= 1 ;
+    stDmaRDMask0.ldc_rd_uv_err_frm_end_int_mask= 1 ;
+    stDmaRDMask0.ldc_rd_uv_err_immediate_int_mask= 1 ;
+    stDmaRDMask0.wdr_rd_raw_frm_end_int_mask= 1 ;
+    stDmaRDMask0.wdr_rd_raw_line_base_int_mask= 1 ;
+    stDmaRDMask0.wdr_rd_raw_err_frm_end_int_mask= 1 ;
     stDmaRDMask0.wdr_rd_raw_err_immediate_int_mask= 1 ;
-    Isp_Drv_R2k_Wrap_SetDmaRDIntMask0(isp,&stDmaRDMask0);  
+    Isp_Drv_R2k_Wrap_SetDmaRDIntMask0(isp,&stDmaRDMask0);
 }
 //
 int isp_r2k_wrap_SetConfigDone(struct k510_isp_device *isp,unsigned int wp_en)
 {
-	
+
     ISP_WRAP_CONFIG_DONE_S pstConfigDone;
 	pstConfigDone.int_polarity = 1;
 	pstConfigDone.sen_reg_pro_en = wp_en;//0;
@@ -595,7 +595,7 @@ int isp_r2k_wrap_SetConfigDone(struct k510_isp_device *isp,unsigned int wp_en)
 	else
 	{
 	pstConfigDone.wrap_config_done_en = 1;
-	}	
+	}
     Isp_Drv_R2k_Wrap_SetConfigdoneCtl(isp,&pstConfigDone);
 	return 0;
 }
@@ -604,7 +604,7 @@ int isp_r2k_wrap_reset(struct k510_isp_device *isp)
 {
 	unsigned int stData;
 	union U_ISP_WRAP_AXI_CTL axi_ctl;
-	
+
 	isp_r2k_wrap_SetConfigDone(isp,1);
 	//
 	stData = 0;
@@ -613,9 +613,9 @@ int isp_r2k_wrap_reset(struct k510_isp_device *isp)
 	msleep(50);
 
 	axi_ctl.u32 = 0;
-	axi_ctl.bits.axi_wr_ch_rst_req = 1;   
-	axi_ctl.bits.axi_rd_ch_rst_req = 1;        
-	isp_reg_writel(isp, axi_ctl.u32, ISP_IOMEM_R2K_WRAP, ISP_WRAP_AXI_CTL);	
+	axi_ctl.bits.axi_wr_ch_rst_req = 1;
+	axi_ctl.bits.axi_rd_ch_rst_req = 1;
+	isp_reg_writel(isp, axi_ctl.u32, ISP_IOMEM_R2K_WRAP, ISP_WRAP_AXI_CTL);
 	axi_ctl.u32 = 0;
 	axi_ctl = (union U_ISP_WRAP_AXI_CTL)isp_reg_readl(isp, ISP_IOMEM_R2K_WRAP, ISP_WRAP_AXI_CTL);
 	printk("%s>AXI_CTL = 0x%x\n", __func__, axi_ctl);
@@ -627,10 +627,10 @@ int isp_r2k_wrap_reset(struct k510_isp_device *isp)
 	}
 
 	isp_r2k_wrap_SetConfigDone(isp,1);
-	
+
 	stData = 0;
 	isp_reg_writel(isp,stData,ISP_IOMEM_R2K_WRAP,ISP_WRAP_PIPE_CLK_CTL);
-	
+
 	//
 	stData = 0xffffffff;
 	isp_reg_writel(isp,stData,ISP_IOMEM_R2K_WRAP,ISP_WRAP_SWRST_CTL);
@@ -680,9 +680,9 @@ static int isp_r2k_wrap_config(struct isp_r2k_device *r2k,struct isp_wrap_cfg_in
     //
 	isp_r2k_wrap_SetIntMask(isp);
     //
-	isp_r2k_wrap_SetConfigDone(isp,0); 
+	isp_r2k_wrap_SetConfigDone(isp,0);
 
-	return 0; 
+	return 0;
 }
 /****************************************************************************
 *wrap int
@@ -690,16 +690,16 @@ static int isp_r2k_wrap_config(struct isp_r2k_device *r2k,struct isp_wrap_cfg_in
 int isp_r2k_wrap_setIntCore(struct k510_isp_device *isp,struct isp_wrap_intcore_info *intCoreEn)
 {
     ISP_WRAP_CORE_INT_CTL_S coreIntMask;
-    coreIntMask.int_raw_in_mask = ~intCoreEn->int_raw_in_en;  
-    coreIntMask.int_3a_mask = ~intCoreEn->int_3a_en;      
-    coreIntMask.raw_int_mask = ~intCoreEn->raw_int_en;     
-    coreIntMask.rgb_int_mask = ~intCoreEn->rgb_int_en;     
-    coreIntMask.yuv_int_mask = ~intCoreEn->yuv_int_en;     
-    coreIntMask.ldc_int_mask = ~intCoreEn->ldc_int_en;     
+    coreIntMask.int_raw_in_mask = ~intCoreEn->int_raw_in_en;
+    coreIntMask.int_3a_mask = ~intCoreEn->int_3a_en;
+    coreIntMask.raw_int_mask = ~intCoreEn->raw_int_en;
+    coreIntMask.rgb_int_mask = ~intCoreEn->rgb_int_en;
+    coreIntMask.yuv_int_mask = ~intCoreEn->yuv_int_en;
+    coreIntMask.ldc_int_mask = ~intCoreEn->ldc_int_en;
     coreIntMask.main_out_int_mask = ~intCoreEn->main_out_int_en;
-    coreIntMask.isp_awb_int_mask = ~intCoreEn->isp_awb_int_en; 
-    coreIntMask.isp_ae_int_mask = ~intCoreEn->isp_ae_int_en;  
-    coreIntMask.isp_af_int_mask = ~intCoreEn->isp_af_int_en;  
+    coreIntMask.isp_awb_int_mask = ~intCoreEn->isp_awb_int_en;
+    coreIntMask.isp_ae_int_mask = ~intCoreEn->isp_ae_int_en;
+    coreIntMask.isp_af_int_mask = ~intCoreEn->isp_af_int_en;
 	Isp_Drv_R2k_Wrap_SetCoreIntCtlMask(isp,&coreIntMask);
 	return 0;
 };
@@ -708,33 +708,33 @@ int isp_r2k_wrap_setIntWr0(struct k510_isp_device *isp,struct isp_wrap_intwr0_in
 {
 
     ISP_WRAP_DMA_WR_INT_MASK0_S wrIntMask0;
-    wrIntMask0.wr_3dnr_y_frm_end_int_mask = ~intWr0En->wr_3dnr_y_frm_end_int_en;    
-    wrIntMask0.wr_3dnr_y_line_base_int_mask = ~intWr0En->wr_3dnr_y_line_base_int_en;  
+    wrIntMask0.wr_3dnr_y_frm_end_int_mask = ~intWr0En->wr_3dnr_y_frm_end_int_en;
+    wrIntMask0.wr_3dnr_y_line_base_int_mask = ~intWr0En->wr_3dnr_y_line_base_int_en;
     wrIntMask0.wr_3dnr_y_err_frm_end_int_mask = ~intWr0En->wr_3dnr_y_err_frm_end_int_en;
-    wrIntMask0.wr_3dnr_y_err_immediate_int_mask = ~intWr0En->wr_3dnr_y_err_immediate_int_en;     
-    wrIntMask0.wr_3dnr_uv_frm_end_int_mask = ~intWr0En->wr_3dnr_uv_frm_end_int_en;   
-    wrIntMask0.wr_3dnr_uv_line_base_int_mask = ~intWr0En->wr_3dnr_uv_line_base_int_en; 
-    wrIntMask0.wr_3dnr_uv_err_frm_end_int_mask = ~intWr0En->wr_3dnr_uv_err_frm_end_int_en;      
-    wrIntMask0.wr_3dnr_uv_err_immediate_int_mask = ~intWr0En->wr_3dnr_uv_err_immediate_int_en;    
-    wrIntMask0.ldc_wr_y_frm_end_int_mask = ~intWr0En->ldc_wr_y_frm_end_int_en;     
-    wrIntMask0.ldc_wr_y_line_base_int_mask = ~intWr0En->ldc_wr_y_line_base_int_en;   
-    wrIntMask0.ldc_wr_y_err_frm_end_int_mask = ~intWr0En->ldc_wr_y_err_frm_end_int_en; 
-    wrIntMask0.ldc_wr_y_err_immediate_int_mask = ~intWr0En->ldc_wr_y_err_immediate_int_en;      
-    wrIntMask0.ldc_wr_uv_frm_end_int_mask = ~intWr0En->ldc_wr_uv_frm_end_int_en;    
-    wrIntMask0.ldc_wr_uv_line_base_int_mask = ~intWr0En->ldc_wr_uv_line_base_int_en;  
+    wrIntMask0.wr_3dnr_y_err_immediate_int_mask = ~intWr0En->wr_3dnr_y_err_immediate_int_en;
+    wrIntMask0.wr_3dnr_uv_frm_end_int_mask = ~intWr0En->wr_3dnr_uv_frm_end_int_en;
+    wrIntMask0.wr_3dnr_uv_line_base_int_mask = ~intWr0En->wr_3dnr_uv_line_base_int_en;
+    wrIntMask0.wr_3dnr_uv_err_frm_end_int_mask = ~intWr0En->wr_3dnr_uv_err_frm_end_int_en;
+    wrIntMask0.wr_3dnr_uv_err_immediate_int_mask = ~intWr0En->wr_3dnr_uv_err_immediate_int_en;
+    wrIntMask0.ldc_wr_y_frm_end_int_mask = ~intWr0En->ldc_wr_y_frm_end_int_en;
+    wrIntMask0.ldc_wr_y_line_base_int_mask = ~intWr0En->ldc_wr_y_line_base_int_en;
+    wrIntMask0.ldc_wr_y_err_frm_end_int_mask = ~intWr0En->ldc_wr_y_err_frm_end_int_en;
+    wrIntMask0.ldc_wr_y_err_immediate_int_mask = ~intWr0En->ldc_wr_y_err_immediate_int_en;
+    wrIntMask0.ldc_wr_uv_frm_end_int_mask = ~intWr0En->ldc_wr_uv_frm_end_int_en;
+    wrIntMask0.ldc_wr_uv_line_base_int_mask = ~intWr0En->ldc_wr_uv_line_base_int_en;
     wrIntMask0.ldc_wr_uv_err_frm_end_int_mask = ~intWr0En->ldc_wr_uv_err_frm_end_int_en;
-    wrIntMask0.ldc_wr_uv_err_immediate_int_mask = ~intWr0En->ldc_wr_uv_err_immediate_int_en;     
-    wrIntMask0.wdr_wr_raw_frm_end_int_mask = ~intWr0En->wdr_wr_raw_frm_end_int_en;   
-    wrIntMask0.wdr_wr_raw_line_base_int_mask = ~intWr0En->wdr_wr_raw_line_base_int_en; 
-    wrIntMask0.wdr_wr_raw_err_frm_end_int_mask = ~intWr0En->wdr_wr_raw_err_frm_end_int_en;      
-    wrIntMask0.wdr_wr_raw_err_immediate_int_mask = ~intWr0En->wdr_wr_raw_err_immediate_int_en; 
+    wrIntMask0.ldc_wr_uv_err_immediate_int_mask = ~intWr0En->ldc_wr_uv_err_immediate_int_en;
+    wrIntMask0.wdr_wr_raw_frm_end_int_mask = ~intWr0En->wdr_wr_raw_frm_end_int_en;
+    wrIntMask0.wdr_wr_raw_line_base_int_mask = ~intWr0En->wdr_wr_raw_line_base_int_en;
+    wrIntMask0.wdr_wr_raw_err_frm_end_int_mask = ~intWr0En->wdr_wr_raw_err_frm_end_int_en;
+    wrIntMask0.wdr_wr_raw_err_immediate_int_mask = ~intWr0En->wdr_wr_raw_err_immediate_int_en;
     wrIntMask0.main_out_wr_y_frm_end_int_mask = ~intWr0En->main_out_wr_y_frm_end_int_en;
-    wrIntMask0.main_out_wr_y_line_base_int_mask = ~intWr0En->main_out_wr_y_line_base_int_en;     
-    wrIntMask0.main_out_wr_y_err_frm_end_int_mask = ~intWr0En->main_out_wr_y_err_frm_end_int_en;   
-    wrIntMask0.main_out_wr_y_err_immediate_int_mask = ~intWr0En->main_out_wr_y_err_immediate_int_en; 
-    wrIntMask0.main_out_wr_uv_frm_end_int_mask = ~intWr0En->main_out_wr_uv_frm_end_int_en;      
-    wrIntMask0.main_out_wr_uv_line_base_int_mask = ~intWr0En->main_out_wr_uv_line_base_int_en;    
-    wrIntMask0.main_out_wr_uv_err_frm_end_int_mask = ~intWr0En->main_out_wr_uv_err_frm_end_int_en;  
+    wrIntMask0.main_out_wr_y_line_base_int_mask = ~intWr0En->main_out_wr_y_line_base_int_en;
+    wrIntMask0.main_out_wr_y_err_frm_end_int_mask = ~intWr0En->main_out_wr_y_err_frm_end_int_en;
+    wrIntMask0.main_out_wr_y_err_immediate_int_mask = ~intWr0En->main_out_wr_y_err_immediate_int_en;
+    wrIntMask0.main_out_wr_uv_frm_end_int_mask = ~intWr0En->main_out_wr_uv_frm_end_int_en;
+    wrIntMask0.main_out_wr_uv_line_base_int_mask = ~intWr0En->main_out_wr_uv_line_base_int_en;
+    wrIntMask0.main_out_wr_uv_err_frm_end_int_mask = ~intWr0En->main_out_wr_uv_err_frm_end_int_en;
     wrIntMask0.main_out_wr_uv_err_immediate_int_mask = ~intWr0En->main_out_wr_uv_err_immediate_int_en;
 	dev_dbg(isp->dev,"%s:wrIntMask0(0x%x)\n",__func__,wrIntMask0);
 	Isp_Drv_R2k_Wrap_SetDmaWRIntMask0(isp,&wrIntMask0);
@@ -745,102 +745,102 @@ int isp_r2k_wrap_setIntWr1(struct k510_isp_device *isp,struct isp_wrap_intwr1_in
 {
     ISP_WRAP_DMA_WR_INT_MASK1_S wrIntMask1;
 	wrIntMask1.ds0_out_wr_y_frm_end_mask = ~intWr1En->ds0_out_wr_y_frm_end_en;
-	wrIntMask1.ds0_out_wr_y_line_base_mask = ~intWr1En->ds0_out_wr_y_line_base_en;     
-	wrIntMask1.ds0_out_wr_y_err_frm_end_mask = ~intWr1En->ds0_out_wr_y_err_frm_end_en;   
-	wrIntMask1.ds0_out_wr_y_err_immediate_mask = ~intWr1En->ds0_out_wr_y_err_immediate_en; 
-	wrIntMask1.ds0_out_wr_uv_frm_end_mask = ~intWr1En->ds0_out_wr_uv_frm_end_en;      
-	wrIntMask1.ds0_out_wr_uv_line_base_mask = ~intWr1En->ds0_out_wr_uv_line_base_en;    
-	wrIntMask1.ds0_out_wr_uv_err_frm_end_mask = ~intWr1En->ds0_out_wr_uv_err_frm_end_en;  
+	wrIntMask1.ds0_out_wr_y_line_base_mask = ~intWr1En->ds0_out_wr_y_line_base_en;
+	wrIntMask1.ds0_out_wr_y_err_frm_end_mask = ~intWr1En->ds0_out_wr_y_err_frm_end_en;
+	wrIntMask1.ds0_out_wr_y_err_immediate_mask = ~intWr1En->ds0_out_wr_y_err_immediate_en;
+	wrIntMask1.ds0_out_wr_uv_frm_end_mask = ~intWr1En->ds0_out_wr_uv_frm_end_en;
+	wrIntMask1.ds0_out_wr_uv_line_base_mask = ~intWr1En->ds0_out_wr_uv_line_base_en;
+	wrIntMask1.ds0_out_wr_uv_err_frm_end_mask = ~intWr1En->ds0_out_wr_uv_err_frm_end_en;
 	wrIntMask1.ds0_out_wr_uv_err_immediate_mask = ~intWr1En->ds0_out_wr_uv_err_immediate_en;
 	wrIntMask1.ds1_out_wr_y_frm_end_mask = ~intWr1En->ds1_out_wr_y_frm_end_en;
-	wrIntMask1.ds1_out_wr_y_line_base_mask = ~intWr1En->ds1_out_wr_y_line_base_en;     
-	wrIntMask1.ds1_out_wr_y_err_frm_end_mask = ~intWr1En->ds1_out_wr_y_err_frm_end_en;   
-	wrIntMask1.ds1_out_wr_y_err_immediate_mask = ~intWr1En->ds1_out_wr_y_err_immediate_en; 
-	wrIntMask1.ds1_out_wr_uv_frm_end_mask = ~intWr1En->ds1_out_wr_uv_frm_end_en;      
-	wrIntMask1.ds1_out_wr_uv_line_base_mask = ~intWr1En->ds1_out_wr_uv_line_base_en;    
-	wrIntMask1.ds1_out_wr_uv_err_frm_end_mask = ~intWr1En->ds1_out_wr_uv_err_frm_end_en;  
+	wrIntMask1.ds1_out_wr_y_line_base_mask = ~intWr1En->ds1_out_wr_y_line_base_en;
+	wrIntMask1.ds1_out_wr_y_err_frm_end_mask = ~intWr1En->ds1_out_wr_y_err_frm_end_en;
+	wrIntMask1.ds1_out_wr_y_err_immediate_mask = ~intWr1En->ds1_out_wr_y_err_immediate_en;
+	wrIntMask1.ds1_out_wr_uv_frm_end_mask = ~intWr1En->ds1_out_wr_uv_frm_end_en;
+	wrIntMask1.ds1_out_wr_uv_line_base_mask = ~intWr1En->ds1_out_wr_uv_line_base_en;
+	wrIntMask1.ds1_out_wr_uv_err_frm_end_mask = ~intWr1En->ds1_out_wr_uv_err_frm_end_en;
 	wrIntMask1.ds1_out_wr_uv_err_immediate_mask = ~intWr1En->ds1_out_wr_uv_err_immediate_en;
 	wrIntMask1.ds2_out_wr_r_frm_end_mask = ~intWr1En->ds2_out_wr_r_frm_end_en;
-	wrIntMask1.ds2_out_wr_r_line_base_mask = ~intWr1En->ds2_out_wr_r_line_base_en;     
-	wrIntMask1.ds2_out_wr_r_err_frm_end_mask = ~intWr1En->ds2_out_wr_r_err_frm_end_en;   
-	wrIntMask1.ds2_out_wr_r_err_immediate_mask = ~intWr1En->ds2_out_wr_r_err_immediate_en; 
+	wrIntMask1.ds2_out_wr_r_line_base_mask = ~intWr1En->ds2_out_wr_r_line_base_en;
+	wrIntMask1.ds2_out_wr_r_err_frm_end_mask = ~intWr1En->ds2_out_wr_r_err_frm_end_en;
+	wrIntMask1.ds2_out_wr_r_err_immediate_mask = ~intWr1En->ds2_out_wr_r_err_immediate_en;
 	wrIntMask1.ds2_out_wr_g_frm_end_mask = ~intWr1En->ds2_out_wr_g_frm_end_en;
-	wrIntMask1.ds2_out_wr_g_line_base_mask = ~intWr1En->ds2_out_wr_g_line_base_en;     
-	wrIntMask1.ds2_out_wr_g_err_frm_end_mask = ~intWr1En->ds2_out_wr_g_err_frm_end_en;   
-	wrIntMask1.ds2_out_wr_g_err_immediate_mask = ~intWr1En->ds2_out_wr_g_err_immediate_en; 
+	wrIntMask1.ds2_out_wr_g_line_base_mask = ~intWr1En->ds2_out_wr_g_line_base_en;
+	wrIntMask1.ds2_out_wr_g_err_frm_end_mask = ~intWr1En->ds2_out_wr_g_err_frm_end_en;
+	wrIntMask1.ds2_out_wr_g_err_immediate_mask = ~intWr1En->ds2_out_wr_g_err_immediate_en;
 	wrIntMask1.ds2_out_wr_b_frm_end_mask = ~intWr1En->ds2_out_wr_b_frm_end_en;
-	wrIntMask1.ds2_out_wr_b_line_base_mask = ~intWr1En->ds2_out_wr_b_line_base_en;     
-	wrIntMask1.ds2_out_wr_b_err_frm_end_mask = ~intWr1En->ds0_out_wr_uv_err_frm_end_en;   
-	wrIntMask1.ds2_out_wr_b_err_immediate_mask = ~intWr1En->ds0_out_wr_uv_err_immediate_en; 
-	dev_dbg(isp->dev,"%s:wrIntMask1(0x%x)\n",__func__,wrIntMask1);  
+	wrIntMask1.ds2_out_wr_b_line_base_mask = ~intWr1En->ds2_out_wr_b_line_base_en;
+	wrIntMask1.ds2_out_wr_b_err_frm_end_mask = ~intWr1En->ds0_out_wr_uv_err_frm_end_en;
+	wrIntMask1.ds2_out_wr_b_err_immediate_mask = ~intWr1En->ds0_out_wr_uv_err_immediate_en;
+	dev_dbg(isp->dev,"%s:wrIntMask1(0x%x)\n",__func__,wrIntMask1);
 	Isp_Drv_R2k_Wrap_SetDmaWRIntMask1(isp,&wrIntMask1);
 	return 0;
 }
 //
 int isp_r2k_wrap_setIntRd0(struct k510_isp_device *isp,struct isp_wrap_intrd0_info *intRd0En)
 {
-    
+
     ISP_WRAP_DMA_RD_INT_MASK0_S rdIntMask0;
     rdIntMask0.rd_3dnr_y_frm_end_int_mask = ~intRd0En->rd_3dnr_y_frm_end_int_en;
-    rdIntMask0.rd_3dnr_y_line_base_int_mask = ~intRd0En->rd_3dnr_y_line_base_int_en;     
-    rdIntMask0.rd_3dnr_y_err_frm_end_int_mask = ~intRd0En->rd_3dnr_y_err_frm_end_int_en;   
-    rdIntMask0.rd_3dnr_y_err_immediate_int_mask = ~intRd0En->rd_3dnr_y_err_immediate_int_en; 
-    rdIntMask0.rd_3dnr_uv_frm_end_int_mask = ~intRd0En->rd_3dnr_uv_frm_end_int_en;      
-    rdIntMask0.rd_3dnr_uv_line_base_int_mask = ~intRd0En->rd_3dnr_uv_line_base_int_en;    
-    rdIntMask0.rd_3dnr_uv_err_frm_end_int_mask = ~intRd0En->rd_3dnr_uv_err_frm_end_int_en;  
+    rdIntMask0.rd_3dnr_y_line_base_int_mask = ~intRd0En->rd_3dnr_y_line_base_int_en;
+    rdIntMask0.rd_3dnr_y_err_frm_end_int_mask = ~intRd0En->rd_3dnr_y_err_frm_end_int_en;
+    rdIntMask0.rd_3dnr_y_err_immediate_int_mask = ~intRd0En->rd_3dnr_y_err_immediate_int_en;
+    rdIntMask0.rd_3dnr_uv_frm_end_int_mask = ~intRd0En->rd_3dnr_uv_frm_end_int_en;
+    rdIntMask0.rd_3dnr_uv_line_base_int_mask = ~intRd0En->rd_3dnr_uv_line_base_int_en;
+    rdIntMask0.rd_3dnr_uv_err_frm_end_int_mask = ~intRd0En->rd_3dnr_uv_err_frm_end_int_en;
     rdIntMask0.rd_3dnr_uv_err_immediate_int_mask = ~intRd0En->rd_3dnr_uv_err_immediate_int_en;
-    rdIntMask0.ldc_rd_y_frm_end_int_mask = ~intRd0En->ldc_rd_y_frm_end_int_en; 
-    rdIntMask0.ldc_rd_y_line_base_int_mask = ~intRd0En->ldc_rd_y_line_base_int_en;      
-    rdIntMask0.ldc_rd_y_err_frm_end_int_mask = ~intRd0En->ldc_rd_y_err_frm_end_int_en;    
-    rdIntMask0.ldc_rd_y_err_immediate_int_mask = ~intRd0En->ldc_rd_y_err_immediate_int_en;  
+    rdIntMask0.ldc_rd_y_frm_end_int_mask = ~intRd0En->ldc_rd_y_frm_end_int_en;
+    rdIntMask0.ldc_rd_y_line_base_int_mask = ~intRd0En->ldc_rd_y_line_base_int_en;
+    rdIntMask0.ldc_rd_y_err_frm_end_int_mask = ~intRd0En->ldc_rd_y_err_frm_end_int_en;
+    rdIntMask0.ldc_rd_y_err_immediate_int_mask = ~intRd0En->ldc_rd_y_err_immediate_int_en;
     rdIntMask0.ldc_rd_uv_frm_end_int_mask = ~intRd0En->ldc_rd_uv_frm_end_int_en;
-    rdIntMask0.ldc_rd_uv_line_base_int_mask = ~intRd0En->ldc_rd_uv_line_base_int_en;     
-    rdIntMask0.ldc_rd_uv_err_frm_end_int_mask = ~intRd0En->ldc_rd_uv_err_frm_end_int_en;   
-    rdIntMask0.ldc_rd_uv_err_immediate_int_mask = ~intRd0En->ldc_rd_uv_err_immediate_int_en; 
-    rdIntMask0.wdr_rd_raw_frm_end_int_mask = ~intRd0En->wdr_rd_raw_frm_end_int_en;      
-    rdIntMask0.wdr_rd_raw_line_base_int_mask = ~intRd0En->wdr_rd_raw_line_base_int_en;    
-    rdIntMask0.wdr_rd_raw_err_frm_end_int_mask = ~intRd0En->wdr_rd_raw_err_frm_end_int_en;  
+    rdIntMask0.ldc_rd_uv_line_base_int_mask = ~intRd0En->ldc_rd_uv_line_base_int_en;
+    rdIntMask0.ldc_rd_uv_err_frm_end_int_mask = ~intRd0En->ldc_rd_uv_err_frm_end_int_en;
+    rdIntMask0.ldc_rd_uv_err_immediate_int_mask = ~intRd0En->ldc_rd_uv_err_immediate_int_en;
+    rdIntMask0.wdr_rd_raw_frm_end_int_mask = ~intRd0En->wdr_rd_raw_frm_end_int_en;
+    rdIntMask0.wdr_rd_raw_line_base_int_mask = ~intRd0En->wdr_rd_raw_line_base_int_en;
+    rdIntMask0.wdr_rd_raw_err_frm_end_int_mask = ~intRd0En->wdr_rd_raw_err_frm_end_int_en;
     rdIntMask0.wdr_rd_raw_err_immediate_int_mask = ~intRd0En->wdr_rd_raw_err_immediate_int_en;
 	Isp_Drv_R2k_Wrap_SetDmaRDIntMask0(isp,&rdIntMask0);
 	return 0;
 }
 
-void k510isp_r2k_irq_enable(struct k510_isp_device *isp,struct isp_irq_info *irq_info) 
+void k510isp_r2k_irq_enable(struct k510_isp_device *isp,struct isp_irq_info *irq_info)
 {
 	dev_dbg(isp->dev,"%s:start\n",__func__);
 	struct isp_wrap_intcore_info intCoreEn;
 	intCoreEn.int_raw_in_en = irq_info->raw_en;
 	if((1 ==irq_info->awb_en)||(1 ==irq_info->ae_en)||(1 ==irq_info->af_en))
 	{
-		intCoreEn.int_3a_en = 1; 
+		intCoreEn.int_3a_en = 1;
 	}
-	else 
-		intCoreEn.int_3a_en = 0;    
+	else
+		intCoreEn.int_3a_en = 0;
 
-	intCoreEn.raw_int_en = irq_info->raw_en;     
-	intCoreEn.rgb_int_en = irq_info->rgb_en;     
-	intCoreEn.yuv_int_en = irq_info->yuv_en;     
-	intCoreEn.ldc_int_en = irq_info->ldc_core_en;     
+	intCoreEn.raw_int_en = irq_info->raw_en;
+	intCoreEn.rgb_int_en = irq_info->rgb_en;
+	intCoreEn.yuv_int_en = irq_info->yuv_en;
+	intCoreEn.ldc_int_en = irq_info->ldc_core_en;
 	intCoreEn.main_out_int_en = irq_info->main_core_en;
-#if 0 
-	intCoreEn.isp_awb_int_en = irq_info->awb_en; 
-	intCoreEn.isp_ae_int_en = irq_info->ae_en;  
-	intCoreEn.isp_af_int_en = irq_info->af_en;  
+#if 0
+	intCoreEn.isp_awb_int_en = irq_info->awb_en;
+	intCoreEn.isp_ae_int_en = irq_info->ae_en;
+	intCoreEn.isp_af_int_en = irq_info->af_en;
 #else
-	intCoreEn.isp_awb_int_en = 0; 
-	intCoreEn.isp_ae_int_en = 0;  
-	intCoreEn.isp_af_int_en = 0;  
+	intCoreEn.isp_awb_int_en = 0;
+	intCoreEn.isp_ae_int_en = 0;
+	intCoreEn.isp_af_int_en = 0;
 #endif
 
 	isp_r2k_wrap_setIntCore(isp,&intCoreEn);
 
 	static struct isp_wrap_intwr0_info intWr0En;
-	intWr0En.wr_3dnr_y_frm_end_int_en = irq_info->nr3d_w_en; 
+	intWr0En.wr_3dnr_y_frm_end_int_en = irq_info->nr3d_w_en;
 	intWr0En.wr_3dnr_uv_frm_end_int_en = irq_info->nr3d_w_en;
 	intWr0En.ldc_wr_y_frm_end_int_en = irq_info->ldc_w_en;
 	intWr0En.ldc_wr_uv_frm_end_int_en = irq_info->ldc_w_en;
 	intWr0En.wdr_wr_raw_frm_end_int_en = irq_info->wdr_w_en;
-	intWr0En.main_out_wr_y_frm_end_int_en = irq_info->main_dma_en;     
+	intWr0En.main_out_wr_y_frm_end_int_en = irq_info->main_dma_en;
 	intWr0En.main_out_wr_uv_frm_end_int_en = irq_info->main_dma_en;
 	dev_dbg(isp->dev,"%s:intWr0En(0x%x)\n",__func__,intWr0En);
 	isp_r2k_wrap_setIntWr0(isp,&intWr0En);
@@ -859,7 +859,7 @@ void k510isp_r2k_irq_enable(struct k510_isp_device *isp,struct isp_irq_info *irq
 	static struct isp_wrap_intrd0_info intRd0En;
 	intRd0En.rd_3dnr_y_frm_end_int_en = irq_info->nr3d_r_en;
 	intRd0En.rd_3dnr_uv_frm_end_int_en = irq_info->nr3d_r_en;
-	intRd0En.ldc_rd_y_frm_end_int_en = irq_info->ldc_r_en; 
+	intRd0En.ldc_rd_y_frm_end_int_en = irq_info->ldc_r_en;
 	intRd0En.ldc_rd_uv_frm_end_int_en = irq_info->ldc_r_en;
 	intRd0En.wdr_rd_raw_frm_end_int_en = irq_info->wdr_r_en;
 	isp_r2k_wrap_setIntRd0(isp,&intRd0En);
@@ -870,14 +870,14 @@ void k510isp_r2k_irq_enable(struct k510_isp_device *isp,struct isp_irq_info *irq
 //ITC
 static int isp_r2k_core_SetItc(struct k510_isp_device *isp,ITC_INFO_S *itcInfo)
 {
-	
+
     ISP_CORE_ITC_CTL_S stItcCtl;
-	stItcCtl.hsync_pol = itcInfo->hsync_pol;    
-    stItcCtl.vsync_pol = itcInfo->vsync_pol;    
-    stItcCtl.hsync_input_timing = itcInfo->hsync_input_timing;  
+	stItcCtl.hsync_pol = itcInfo->hsync_pol;
+    stItcCtl.vsync_pol = itcInfo->vsync_pol;
+    stItcCtl.hsync_input_timing = itcInfo->hsync_input_timing;
     stItcCtl.vsync_input_timing = itcInfo->vsync_input_timing;
-    stItcCtl.mirror_ctl = itcInfo->flip_ctl;  
-    stItcCtl.video_format_ctl = itcInfo->video_fmt_sel; 
+    stItcCtl.mirror_ctl = itcInfo->flip_ctl;
+    stItcCtl.video_format_ctl = itcInfo->video_fmt_sel;
     Isp_Drv_R2k_Core_SetItcCtl(isp,&stItcCtl);
 	return 0;
 }
@@ -887,10 +887,10 @@ static int isp_r2k_core_SetImage(struct k510_isp_device *isp,ITC_INFO_S *itcInfo
 
     ISP_CORE_IMAGE_ATTR_S stImgAttr;
     stImgAttr.image_height = itcInfo->total_size.Height - 1;
-    stImgAttr.image_width = itcInfo->total_size.Width - 1; 
-    stImgAttr.image_v_start = itcInfo->itc_size.Height_st;      
-    stImgAttr.image_h_start = itcInfo->itc_size.Width_st;      
-    stImgAttr.image_active_width = itcInfo->itc_size.Width; 
+    stImgAttr.image_width = itcInfo->total_size.Width - 1;
+    stImgAttr.image_v_start = itcInfo->itc_size.Height_st;
+    stImgAttr.image_h_start = itcInfo->itc_size.Width_st;
+    stImgAttr.image_active_width = itcInfo->itc_size.Width;
     stImgAttr.image_active_height = itcInfo->itc_size.Height;
     Isp_Drv_R2k_Core_SetImageAttr(isp,&stImgAttr);
 	return 0;
@@ -898,7 +898,7 @@ static int isp_r2k_core_SetImage(struct k510_isp_device *isp,ITC_INFO_S *itcInfo
 //TPG
 static int isp_r2k_core_SetTpgCtl(struct k510_isp_device *isp,TPG_INFO_S *tpgInfo)
 {
-	
+
     ISP_CORE_TEST_CTL_S stTestCtl;
 	stTestCtl.test_pattern_en = tpgInfo->tpg_en;
 	stTestCtl.bayer_mode_sel = tpgInfo->bayer_mode_sel;
@@ -906,14 +906,14 @@ static int isp_r2k_core_SetTpgCtl(struct k510_isp_device *isp,TPG_INFO_S *tpgInf
 	stTestCtl.test_pattern_sel = tpgInfo->tpg_sel;
 	stTestCtl.wdr_l_mul_data = tpgInfo->wdr_l_mul_data;
 	stTestCtl.wdr_m_mul_data = tpgInfo->wdr_m_mul_data;
-	stTestCtl.wdr_s_mul_data = tpgInfo->wdr_s_mul_data; 
+	stTestCtl.wdr_s_mul_data = tpgInfo->wdr_s_mul_data;
     Isp_Drv_R2k_Core_SetTestCtl(isp,&stTestCtl);
 	return 0;
 }
 //BLC
 static int isp_r2k_core_SetBlcCtl(struct k510_isp_device *isp,BLC_INFO_S *blcInfo)
 {
-	
+
     ISP_CORE_BLC_CTL_S stBlcCtl;
 	stBlcCtl.blc_en = blcInfo->blc_en;
 	stBlcCtl.blc_offset = blcInfo->blc_offset;
@@ -924,59 +924,59 @@ static int isp_r2k_core_SetBlcCtl(struct k510_isp_device *isp,BLC_INFO_S *blcInf
 //LSC
 static int isp_r2k_core_SetLscCtl(struct k510_isp_device *isp,LSC_INFO_S *lscInfo)
 {
-	
+
     ISP_CORE_LSC_CTL_S stLscCtl;
-    stLscCtl.lsc_en = lscInfo->lsc_en; 
-    stLscCtl.lsc_h_center = lscInfo->lsc_h_center;     
+    stLscCtl.lsc_en = lscInfo->lsc_en;
+    stLscCtl.lsc_h_center = lscInfo->lsc_h_center;
     stLscCtl.lsc_v_center = lscInfo->lsc_v_center;
     stLscCtl.lsc_red_ratio = lscInfo->lsc_r_ratio;
-    stLscCtl.lsc_green_ratio = lscInfo->lsc_g_ratio;  
-    stLscCtl.lsc_blue_ratio = lscInfo->lsc_b_ratio;   
-    stLscCtl.lsc_ir_ratio = lscInfo->lsc_ir_ratio;  
+    stLscCtl.lsc_green_ratio = lscInfo->lsc_g_ratio;
+    stLscCtl.lsc_blue_ratio = lscInfo->lsc_b_ratio;
+    stLscCtl.lsc_ir_ratio = lscInfo->lsc_ir_ratio;
     Isp_Drv_R2k_Core_SetLscCtl(isp,&stLscCtl);
 	return 0;
 }
 //AE
 static int isp_r2k_core_SetAeCtl(struct k510_isp_device *isp,AE_INFO_S *aeInfo)
 {
-	
+
     ISP_CORE_AE_CTL_S stAeCtl;
-    stAeCtl.ae_as_en = aeInfo->ae_as_en;       
-    stAeCtl.ae_ag_en = aeInfo->ae_ag_en;       
-    stAeCtl.ae_airis_en = aeInfo->ae_airis_en;    
+    stAeCtl.ae_as_en = aeInfo->ae_as_en;
+    stAeCtl.ae_ag_en = aeInfo->ae_ag_en;
+    stAeCtl.ae_airis_en = aeInfo->ae_airis_en;
     stAeCtl.ae_enter_ls_sel = aeInfo->ae_enter_ls_sel;
-    stAeCtl.ae_exit_ls_sel = aeInfo->ae_exit_ls_sel; 
+    stAeCtl.ae_exit_ls_sel = aeInfo->ae_exit_ls_sel;
     stAeCtl.ae_win_mode_sel = aeInfo->ae_win_mode_sel;
     stAeCtl.ae_back_light_mode_sel = aeInfo->ae_back_light_mode_sel;
-    stAeCtl.ae_day_change_en = aeInfo->ae_day_change_en;    
-    stAeCtl.ae_day_change_sel = aeInfo->ae_day_change_sel;     
+    stAeCtl.ae_day_change_en = aeInfo->ae_day_change_en;
+    stAeCtl.ae_day_change_sel = aeInfo->ae_day_change_sel;
     stAeCtl.ae_win_h_start = aeInfo->ae_win_size.h_start;
     stAeCtl.ae_win_v_start = aeInfo->ae_win_size.v_start;
-    stAeCtl.ae_win_h_end = aeInfo->ae_win_size.h_end;  
-    stAeCtl.ae_win_v_end = aeInfo->ae_win_size.v_end;  
-    stAeCtl.ae_tar_bright = aeInfo->ae_tar_bright;      
+    stAeCtl.ae_win_h_end = aeInfo->ae_win_size.h_end;
+    stAeCtl.ae_win_v_end = aeInfo->ae_win_size.v_end;
+    stAeCtl.ae_tar_bright = aeInfo->ae_tar_bright;
     stAeCtl.ae_tar_bright_range = aeInfo->ae_tar_bright_range;
     stAeCtl.ae_l_ex_time = aeInfo->ae_l_ex_time;
     stAeCtl.ae_m_ex_time = aeInfo->ae_m_ex_time;
     stAeCtl.ae_s_ex_time = aeInfo->ae_s_ex_time;
-    stAeCtl.ae_agc = aeInfo->ae_agc;     
+    stAeCtl.ae_agc = aeInfo->ae_agc;
     stAeCtl.ae_ad_shuttle_freq = aeInfo->ae_ad_shuttle_freq;
     stAeCtl.ae_ad_gain_freq = aeInfo->ae_ad_gain_freq;
     stAeCtl.ae_adjust_step_max = aeInfo->ae_adjust_step_max;
-    stAeCtl.ae_ex_value_max = aeInfo->ae_ex_value_max;  
-    stAeCtl.ae_ex_value_mid = aeInfo->ae_ex_value_mid;    
-    stAeCtl.ae_ex_value_min = aeInfo->ae_ex_value_min; 
-    stAeCtl.ae_gain_value_max = aeInfo->ae_gain_value_max;    
+    stAeCtl.ae_ex_value_max = aeInfo->ae_ex_value_max;
+    stAeCtl.ae_ex_value_mid = aeInfo->ae_ex_value_mid;
+    stAeCtl.ae_ex_value_min = aeInfo->ae_ex_value_min;
+    stAeCtl.ae_gain_value_max = aeInfo->ae_gain_value_max;
     stAeCtl.ae_gain_value_mid = aeInfo->ae_gain_value_mid;
     stAeCtl.ae_gain_value_min = aeInfo->ae_gain_value_min;
     stAeCtl.ae_dn_switch_ad_step_max = aeInfo->ae_dn_switch_ad_step_max;
     stAeCtl.ae_dn_switch_wait_time = aeInfo->ae_dn_switch_wait_time;
     stAeCtl.ape_max_diff = aeInfo->ape_max_diff;
-    stAeCtl.ape_drv_signal_max = aeInfo->ape_drv_signal_max;    
-    stAeCtl.ape_coeff_distance = aeInfo->ape_coeff_distance;    
+    stAeCtl.ape_drv_signal_max = aeInfo->ape_drv_signal_max;
+    stAeCtl.ape_coeff_distance = aeInfo->ape_coeff_distance;
     stAeCtl.ape_coeff_speed = aeInfo->ape_coeff_speed;
     stAeCtl.ape_coeff_acceleration = aeInfo->ape_coeff_acceleration;
-    stAeCtl.ape_drv_manual_value = aeInfo->ape_drv_manual_value;  
+    stAeCtl.ape_drv_manual_value = aeInfo->ape_drv_manual_value;
     stAeCtl.ape_damp_manual_value = aeInfo->ape_damp_manual_value;
     Isp_Drv_R2k_Core_SetAeCtl(isp,&stAeCtl);
 	return 0;
@@ -1000,18 +1000,18 @@ static int isp_r2k_core_GetAeSts(struct k510_isp_device *isp,struct k510isp_ae_s
 //AWB
 static int isp_r2k_core_SetAwbCtl(struct k510_isp_device *isp,AWB_INFO_S *awbInfo)
 {
-	
+
     ISP_CORE_AWB_CTL_S stAwbCtl;
-    stAwbCtl.awb_d65_en = awbInfo->awb_d65_en; 
-    stAwbCtl.awb_ccm_en = awbInfo->awb_ccm_en; 
-    stAwbCtl.awb_en = awbInfo->awb_en;     
+    stAwbCtl.awb_d65_en = awbInfo->awb_d65_en;
+    stAwbCtl.awb_ccm_en = awbInfo->awb_ccm_en;
+    stAwbCtl.awb_en = awbInfo->awb_en;
     stAwbCtl.awb_mode_sel = awbInfo->awb_mode_sel;
     stAwbCtl.awb_hist_mode_sel = awbInfo->awb_hist_mode_sel;
-    stAwbCtl.awb_veri_en = awbInfo->awb_veri_en;      
-    stAwbCtl.awb_mode_sel = awbInfo->awb_mode_sel;     
+    stAwbCtl.awb_veri_en = awbInfo->awb_veri_en;
+    stAwbCtl.awb_mode_sel = awbInfo->awb_mode_sel;
     stAwbCtl.awb_value_save_en = awbInfo->awb_value_save_en;
     stAwbCtl.awb_ccm_adp_adjust_en = awbInfo->awb_ccm_adp_adjust_en;
-    stAwbCtl.awb_stab_en = awbInfo->awb_stab_en;   
+    stAwbCtl.awb_stab_en = awbInfo->awb_stab_en;
     stAwbCtl.awb_d65_red_gain = awbInfo->awb_d65_red_gain;
     stAwbCtl.awb_d65_blue_gain = awbInfo->awb_d65_blue_gain;
     stAwbCtl.ccm_rr_coff = awbInfo->ccm_coff[0][0];
@@ -1026,16 +1026,16 @@ static int isp_r2k_core_SetAwbCtl(struct k510_isp_device *isp,AWB_INFO_S *awbInf
     stAwbCtl.ccm_correct_coff = awbInfo->ccm_correct_coff;
     stAwbCtl.awb_win_h_start = awbInfo->awb_win_size.h_start;
     stAwbCtl.awb_win_v_start = awbInfo->awb_win_size.v_start;
-    stAwbCtl.awb_win_h_end = awbInfo->awb_win_size.h_end;  
-    stAwbCtl.awb_win_v_end = awbInfo->awb_win_size.v_end;  
-    stAwbCtl.awb_correct_diff_th = awbInfo->awb_correct_diff_th;     
+    stAwbCtl.awb_win_h_end = awbInfo->awb_win_size.h_end;
+    stAwbCtl.awb_win_v_end = awbInfo->awb_win_size.v_end;
+    stAwbCtl.awb_correct_diff_th = awbInfo->awb_correct_diff_th;
     stAwbCtl.awb_color_changeres_time = awbInfo->awb_color_changeres_time;
     stAwbCtl.awb_historgram_th = awbInfo->awb_historgram_th;
-    stAwbCtl.awb_red_gain_adjust = awbInfo->awb_red_gain_adjust;     
-    stAwbCtl.awb_green_gain_adjust = awbInfo->awb_green_gain_adjust;   
+    stAwbCtl.awb_red_gain_adjust = awbInfo->awb_red_gain_adjust;
+    stAwbCtl.awb_green_gain_adjust = awbInfo->awb_green_gain_adjust;
     stAwbCtl.awb_blue_gain_adjust = awbInfo->awb_blue_gain_adjust;
     stAwbCtl.awb_red_max_value = awbInfo->awb_red_max_value;
-    stAwbCtl.awb_blue_max_value = awbInfo->awb_blue_max_value;      
+    stAwbCtl.awb_blue_max_value = awbInfo->awb_blue_max_value;
     stAwbCtl.awb_red_min_value = awbInfo->awb_red_min_value;
     stAwbCtl.awb_blue_min_value = awbInfo->awb_blue_min_value;
     stAwbCtl.awb_red_obj_value = awbInfo->awb_red_obj_value;
@@ -1043,10 +1043,31 @@ static int isp_r2k_core_SetAwbCtl(struct k510_isp_device *isp,AWB_INFO_S *awbInf
     Isp_Drv_R2k_Core_SetAwbCtl(isp,&stAwbCtl);
 	return 0;
 }
+
+// reg opt
+
+static int isp_r2k_core_RegSet(struct k510_isp_device *isp,struct k510isp_reg_val *reg_val)
+{
+	ISP_CORE_REG_VAL_S stRegVal;
+	stRegVal.reg_addr = reg_val->reg_addr;
+	stRegVal.reg_value = reg_val->reg_value;
+	Isp_Drv_R2k_Core_SetReg(isp,&stRegVal);
+	return 0;
+}
+
+static int isp_r2k_core_RegGet(struct k510_isp_device *isp,struct k510isp_reg_val *reg_val)
+{
+	ISP_CORE_REG_VAL_S gtRegVal;
+	gtRegVal.reg_addr = reg_val->reg_addr;
+	Isp_Drv_R2k_Core_GetReg(isp,&gtRegVal);
+	reg_val->reg_value = gtRegVal.reg_value;
+	return 0;
+}
+
 //CSC
 static int isp_r2k_core_SetCscCtl(struct k510_isp_device *isp,CSC_INFO_S *cscInfo)
 {
-	
+
     ISP_CORE_CSC_CTL_S stCscCtl;
     stCscCtl.csc_r2y_00 = cscInfo->csc_r2y[0][0];
     stCscCtl.csc_r2y_01 = cscInfo->csc_r2y[0][1];
@@ -1063,23 +1084,23 @@ static int isp_r2k_core_SetCscCtl(struct k510_isp_device *isp,CSC_INFO_S *cscInf
 //ADA
 static int isp_r2k_core_SetAdaCtl(struct k510_isp_device *isp,ADA_INFO_S *adaInfo)
 {
-	
+
     ISP_CORE_ADA_CTL_S stAdaCtl;
-    stAdaCtl.ada_rgb_gamma_en = adaInfo->ada_rgb_gamma_en; 
-    stAdaCtl.ada_yuv_gamma_en = adaInfo->ada_yuv_gamma_en; 
-    stAdaCtl.ada_adjust_en = adaInfo->ada_adjust_en;    
+    stAdaCtl.ada_rgb_gamma_en = adaInfo->ada_rgb_gamma_en;
+    stAdaCtl.ada_yuv_gamma_en = adaInfo->ada_yuv_gamma_en;
+    stAdaCtl.ada_adjust_en = adaInfo->ada_adjust_en;
     stAdaCtl.ada_img_stab_en = adaInfo->ada_img_stab_en;
     stAdaCtl.ada_ccr_en = adaInfo->ada_ccr_en;
     stAdaCtl.ada_adp_en = adaInfo->ada_adp_en;
-    stAdaCtl.ada_adp_ccr_en = adaInfo->ada_adp_ccr_en;   
+    stAdaCtl.ada_adp_ccr_en = adaInfo->ada_adp_ccr_en;
     stAdaCtl.ada_stat_mode_sel = adaInfo->ada_stat_mode_sel;
     stAdaCtl.ada_enh_mode_sel = adaInfo->ada_enh_mode_sel;
-    stAdaCtl.ada_stat_max_value = adaInfo->ada_stat_max_value; 
+    stAdaCtl.ada_stat_max_value = adaInfo->ada_stat_max_value;
     stAdaCtl.ada_ad_stren_max_value = adaInfo->ada_ad_stren_max_value;
     stAdaCtl.ada_win_h_start = adaInfo->ada_win_size.h_start;
     stAdaCtl.ada_win_v_start = adaInfo->ada_win_size.v_start;
-    stAdaCtl.ada_win_h_end = adaInfo->ada_win_size.h_end;  
-    stAdaCtl.ada_win_v_end = adaInfo->ada_win_size.v_end; 
+    stAdaCtl.ada_win_h_end = adaInfo->ada_win_size.h_end;
+    stAdaCtl.ada_win_v_end = adaInfo->ada_win_size.v_end;
     Isp_Drv_R2k_Core_SetAdaCtl(isp,&stAdaCtl);
 	return 0;
 }
@@ -1088,33 +1109,33 @@ static int isp_r2k_core_SetRgbirCtl(struct k510_isp_device *isp,RGBIR_INFO_S *rg
 {
 
     ISP_CORE_RGBIR_CTL_S stRgbirCtl;
-    stRgbirCtl.rgbir_en = rgbirInfo->rgbir_en; 
-    stRgbirCtl.rgbir_rtf_en = rgbirInfo->rgbir_rtf_en;    
-    stRgbirCtl.rgbir_rpc_en = rgbirInfo->rgbir_rpc_en;    
+    stRgbirCtl.rgbir_en = rgbirInfo->rgbir_en;
+    stRgbirCtl.rgbir_rtf_en = rgbirInfo->rgbir_rtf_en;
+    stRgbirCtl.rgbir_rpc_en = rgbirInfo->rgbir_rpc_en;
     stRgbirCtl.rgbir_fusion_en = rgbirInfo->rgbir_fusion_en;
     stRgbirCtl.rgbir_output_sel = rgbirInfo->rgbir_output_sel;
-    stRgbirCtl.rgbir_rpc_max_value = rgbirInfo->rgbir_rpc_max_value; 
+    stRgbirCtl.rgbir_rpc_max_value = rgbirInfo->rgbir_rpc_max_value;
     stRgbirCtl.rgbir_rpc_color_coff = rgbirInfo->rgbir_rpc_color_coff;
-    stRgbirCtl.rgbir_rpc_luma_coff = rgbirInfo->rgbir_rpc_luma_coff; 
+    stRgbirCtl.rgbir_rpc_luma_coff = rgbirInfo->rgbir_rpc_luma_coff;
     stRgbirCtl.rgbir_rpc_th = rgbirInfo->rgbir_rpc_th;
-    stRgbirCtl.rgbir_rpc_th1 = rgbirInfo->rgbir_rpc_th1; 
+    stRgbirCtl.rgbir_rpc_th1 = rgbirInfo->rgbir_rpc_th1;
     Isp_Drv_R2k_Core_SetRgbIrCtl(isp,&stRgbirCtl);
 	return 0;
 }
 //2DNR
 static int isp_r2k_core_Set2dnrCtl(struct k510_isp_device *isp,NR2D_INFO_S *nr2dInfo)
 {
-	
+
     ISP_CORE_2DNR_CTL_S st2dnrCtl;
     st2dnrCtl.core_2dnr_pcf_en = nr2dInfo->d2nr_pcf_en;
     st2dnrCtl.core_2dnr_raw_en = nr2dInfo->d2nr_raw_en;
-    st2dnrCtl.core_2dnr_edge_en = nr2dInfo->d2nr_edge_en;      
+    st2dnrCtl.core_2dnr_edge_en = nr2dInfo->d2nr_edge_en;
     st2dnrCtl.core_2dnr_bap_en = nr2dInfo->d2nr_bap_en;
-    st2dnrCtl.core_2dnr_luma_en = nr2dInfo->d2nr_luma_en;      
-    st2dnrCtl.core_2dnr_chroma_en = nr2dInfo->d2nr_chroma_en;    
-    st2dnrCtl.core_2dnr_pcf_adp_en = nr2dInfo->d2nr_pcf_adp_en;   
-    st2dnrCtl.core_2dnr_raw_adp_en = nr2dInfo->d2nr_raw_adp_en;   
-    st2dnrCtl.core_2dnr_luma_adp_en = nr2dInfo->d2nr_luma_adp_en;  
+    st2dnrCtl.core_2dnr_luma_en = nr2dInfo->d2nr_luma_en;
+    st2dnrCtl.core_2dnr_chroma_en = nr2dInfo->d2nr_chroma_en;
+    st2dnrCtl.core_2dnr_pcf_adp_en = nr2dInfo->d2nr_pcf_adp_en;
+    st2dnrCtl.core_2dnr_raw_adp_en = nr2dInfo->d2nr_raw_adp_en;
+    st2dnrCtl.core_2dnr_luma_adp_en = nr2dInfo->d2nr_luma_adp_en;
     st2dnrCtl.core_2dnr_chroma_adp_en = nr2dInfo->d2nr_chroma_adp_en;
     st2dnrCtl.core_2dnr_raw_intensity = nr2dInfo->d2nr_raw_intensity;
     st2dnrCtl.core_2dnr_bap_intensity = nr2dInfo->d2nr_bap_intensity;
@@ -1130,17 +1151,17 @@ static int isp_r2k_core_SetEnhCtl(struct k510_isp_device *isp,ENH_INFO_S *enhInf
 
     ISP_CORE_ENH_CTL_S stEnhCtl;
     stEnhCtl.enh_ltm_en = enhInfo->enh_ltm_en;
-    stEnhCtl.enh_sharp_en = enhInfo->enh_sharp_en;     
-    stEnhCtl.enh_cc_en = enhInfo->enh_cc_en; 
-    stEnhCtl.enh_adp_ltm_en = enhInfo->enh_adp_ltm_en;    
-    stEnhCtl.enh_adp_sharp_en = enhInfo->enh_adp_sharp_en; 
-    stEnhCtl.enh_adp_cc_en = enhInfo->enh_adp_cc_en;    
-    stEnhCtl.ltm_gain = enhInfo->ltm_gain;  
-    stEnhCtl.ltm_th = enhInfo->ltm_th; 
-    stEnhCtl.enh_nr_th = enhInfo->enh_nr_th; 
+    stEnhCtl.enh_sharp_en = enhInfo->enh_sharp_en;
+    stEnhCtl.enh_cc_en = enhInfo->enh_cc_en;
+    stEnhCtl.enh_adp_ltm_en = enhInfo->enh_adp_ltm_en;
+    stEnhCtl.enh_adp_sharp_en = enhInfo->enh_adp_sharp_en;
+    stEnhCtl.enh_adp_cc_en = enhInfo->enh_adp_cc_en;
+    stEnhCtl.ltm_gain = enhInfo->ltm_gain;
+    stEnhCtl.ltm_th = enhInfo->ltm_th;
+    stEnhCtl.enh_nr_th = enhInfo->enh_nr_th;
     stEnhCtl.enh_th1 = enhInfo->enh_th1;
     stEnhCtl.enh_th2 = enhInfo->enh_th2;
-    stEnhCtl.sharp_gain = enhInfo->sharp_gain; 
+    stEnhCtl.sharp_gain = enhInfo->sharp_gain;
     Isp_Drv_R2k_Core_SetEnhLtmCtl(isp,&stEnhCtl);
     Isp_Drv_R2k_Core_SetEnhCCCtl(isp,&stEnhCtl);
     Isp_Drv_R2k_Core_SetEnhSharpenCtl(isp,&stEnhCtl);
@@ -1151,10 +1172,10 @@ static int isp_r2k_core_SetPostCtl(struct k510_isp_device *isp,POST_INFO_S *post
 {
 
     ISP_CORE_POST_CTL_S stPostCtl;
-    stPostCtl.post_cont_ad_en = postInfo->post_cont_ad_en;   
-    stPostCtl.post_luma_ad_en = postInfo->post_luma_ad_en;   
+    stPostCtl.post_cont_ad_en = postInfo->post_cont_ad_en;
+    stPostCtl.post_luma_ad_en = postInfo->post_luma_ad_en;
     stPostCtl.post_satu_ad_en = postInfo->post_satu_ad_en;
-    stPostCtl.cont_ad_intensity = postInfo->cont_ad_intensity;    
+    stPostCtl.cont_ad_intensity = postInfo->cont_ad_intensity;
     stPostCtl.luma_ad_intensity = postInfo->luma_ad_intensity;
     stPostCtl.satu_ad_intensity = postInfo->satu_ad_intensity;
     Isp_Drv_R2k_Core_SetPostContCtl(isp,&stPostCtl);
@@ -1165,46 +1186,46 @@ static int isp_r2k_core_SetPostCtl(struct k510_isp_device *isp,POST_INFO_S *post
 //OTC
 static int isp_r2k_core_SetOtcCtl(struct k510_isp_device *isp,OTC_INFO_S *otcInfo)
 {
-	
+
     ISP_CORE_OTC_CTL_S stOtcCtl;
     stOtcCtl.post_otc_en = otcInfo->post_otc_en;
-   	stOtcCtl.otc_yc_sel = otcInfo->otc_yc_sel; 
-   	stOtcCtl.otc_uv_format_sel = otcInfo->otc_uv_format_sel; 
-   	stOtcCtl.otc_hsync_pol_sel = otcInfo->otc_hsync_pol_sel; 
-   	stOtcCtl.otc_vsync_pol_sel = otcInfo->otc_vsync_pol_sel;    
-   	stOtcCtl.otc_stt_vr = otcInfo->otc_out_size.Width_st;   
-   	stOtcCtl.otc_stt_hr = otcInfo->otc_out_size.Height_st;   
-   	stOtcCtl.otc_height = otcInfo->otc_out_size.Height;   
-   	stOtcCtl.otc_width = otcInfo->otc_out_size.Width; 
+   	stOtcCtl.otc_yc_sel = otcInfo->otc_yc_sel;
+   	stOtcCtl.otc_uv_format_sel = otcInfo->otc_uv_format_sel;
+   	stOtcCtl.otc_hsync_pol_sel = otcInfo->otc_hsync_pol_sel;
+   	stOtcCtl.otc_vsync_pol_sel = otcInfo->otc_vsync_pol_sel;
+   	stOtcCtl.otc_stt_vr = otcInfo->otc_out_size.Width_st;
+   	stOtcCtl.otc_stt_hr = otcInfo->otc_out_size.Height_st;
+   	stOtcCtl.otc_height = otcInfo->otc_out_size.Height;
+   	stOtcCtl.otc_width = otcInfo->otc_out_size.Width;
     Isp_Drv_R2k_Core_SetOtcCtl(isp,&stOtcCtl);
 	return 0;
 }
 //LDC
 static int isp_r2k_core_SetLdcCtl(struct k510_isp_device *isp,LDC_INFO_S *ldcInfo)
 {
-	
+
     ISP_CORE_LDC_CTL_S stLdcCtl;
-    stLdcCtl.ldc_en = ldcInfo->ldc_en; 
-    stLdcCtl.ldc_arith_en = ldcInfo->ldc_arith_en;   
+    stLdcCtl.ldc_en = ldcInfo->ldc_en;
+    stLdcCtl.ldc_arith_en = ldcInfo->ldc_arith_en;
     stLdcCtl.ldc_req_freq = ldcInfo->ldc_req_freq;
     stLdcCtl.ldc_stt_ln = ldcInfo->ldc_stt_ln;
     stLdcCtl.ldc_h_center_pos = ldcInfo->ldc_h_center_pos;
     stLdcCtl.ldc_v_center_pos = ldcInfo->ldc_v_center_pos;
     stLdcCtl.ldc_rectify_cr = ldcInfo->ldc_rectify_cr;
-    stLdcCtl.ldc_rectify_cz = ldcInfo->ldc_rectify_cz; 
+    stLdcCtl.ldc_rectify_cz = ldcInfo->ldc_rectify_cz;
     Isp_Drv_R2k_Core_SetLdcCtl(isp,&stLdcCtl);
 	return 0;
 }
 //AF
 static int isp_r2k_core_SetAfCtl(struct k510_isp_device *isp,AF_INFO_S *afInfo)
 {
-	
+
     ISP_CORE_AF_CTL_S stAfCtl;
-	stAfCtl.af_stat_en = afInfo->af_stat_en; 
-   	stAfCtl.af_stat_mode_sel= afInfo->af_stat_mode_sel; 
-    stAfCtl.af_stat_win_h_start= afInfo->af_win_size.h_start;    
-    stAfCtl.af_stat_win_v_start= afInfo->af_win_size.v_start; 
-    stAfCtl.af_stat_win_h_end= afInfo->af_win_size.h_end;  
+	stAfCtl.af_stat_en = afInfo->af_stat_en;
+   	stAfCtl.af_stat_mode_sel= afInfo->af_stat_mode_sel;
+    stAfCtl.af_stat_win_h_start= afInfo->af_win_size.h_start;
+    stAfCtl.af_stat_win_v_start= afInfo->af_win_size.v_start;
+    stAfCtl.af_stat_win_h_end= afInfo->af_win_size.h_end;
     stAfCtl.af_stat_win_v_end= afInfo->af_win_size.v_end;
     Isp_Drv_R2k_Core_SetAfCtl(isp,&stAfCtl);
 	return 0;
@@ -1289,7 +1310,7 @@ void isp_r2k_ds_SetInputSize(struct k510_isp_device *isp,IMAGE_SIZE *dsInSizeInf
 //
 void isp_r2k_ds_SetRgb2YuvCoff(struct k510_isp_device *isp)
 {
-    
+
     unsigned int osd_rgb2yuv_coeff[3][4];
     osd_rgb2yuv_coeff[0][0]= 0x00000132;
     osd_rgb2yuv_coeff[0][1]= 0x00000259;
@@ -1308,7 +1329,7 @@ void isp_r2k_ds_SetRgb2YuvCoff(struct k510_isp_device *isp)
 //
 void isp_r2k_ds_SetYuv2RgbCoff(struct k510_isp_device *isp)
 {
-    
+
     unsigned int osd_yuv2rgb_coeff[3][4];
   	osd_yuv2rgb_coeff[0][0] = 0x00000400;
 	osd_yuv2rgb_coeff[0][1] = 0x00000000;
@@ -1375,15 +1396,15 @@ void isp_r2k_ds_SetSingleDS(struct k510_isp_device *isp,unsigned int u8Index,str
     stDsFormat->out_rgb_mode =  dsInfo->out_rgb_mode;
     stDsFormat->out_yuv_mode =  dsInfo->out_yuv_mode;
     stDsFormat->out_uv_swap =  dsInfo->out_uv_swap;
-    unsigned int osdIndex = 0;     
+    unsigned int osdIndex = 0;
     ISP_DS_OSD_ATTR_S *stDsOsdAttr = &stDsAttr.DsOsdAttr[osdIndex];
     ISP_OSD_INFO_S *osdInfo = &dsInfo->osdInfo[osdIndex];
     isp_r2k_ds_SetOSD(stDsOsdAttr,osdInfo);
-    osdIndex = 1;     
+    osdIndex = 1;
     stDsOsdAttr = &stDsAttr.DsOsdAttr[osdIndex];
     osdInfo = &dsInfo->osdInfo[osdIndex];
     isp_r2k_ds_SetOSD(stDsOsdAttr,osdInfo);
-    osdIndex = 2;     
+    osdIndex = 2;
     stDsOsdAttr = &stDsAttr.DsOsdAttr[osdIndex];
     osdInfo = &dsInfo->osdInfo[osdIndex];
     isp_r2k_ds_SetOSD(stDsOsdAttr,osdInfo);
@@ -1421,13 +1442,13 @@ static int isp_r2k_ds_config(struct isp_r2k_device *r2k,struct isp_ds_cfg_info *
 *
 *****************************************************************************/
 static int isp_r2k_config(struct k510_isp_device *isp,struct isp_cfg_info *isp_cfg)
-{ 
+{
 	struct isp_r2k_device *r2k  = &isp->isp_r2k;
 	struct isp_core_cfg_info *isp_core_cfg =&isp_cfg->isp_core_cfg;
     isp_r2k_core_config(r2k,isp_core_cfg);
 	struct isp_ds_cfg_info *isp_ds_cfg =&isp_cfg->isp_ds_cfg;
 	isp_r2k_ds_config(r2k,isp_ds_cfg);
-	struct isp_wrap_cfg_info *isp_wrap_cfg =&isp_cfg->isp_wrap_cfg;	
+	struct isp_wrap_cfg_info *isp_wrap_cfg =&isp_cfg->isp_wrap_cfg;
 	dev_dbg(isp->dev,"%s:main_y_buf0_base(0x%x)\n",__func__,isp_wrap_cfg->mainInfo.main_y_buf0_base);
     isp_r2k_wrap_config(r2k,isp_wrap_cfg);
 //    printk("isp_r2k_config end \n");
@@ -1451,7 +1472,7 @@ static void isp_r2k_set_fbc_outaddr(struct isp_r2k_device *r2k, u32 addr)
 	addr = addr+1920*1080;
 	isp_reg_writel(isp,addr,ISP_IOMEM_R2K_WRAP,ISP_WRAP_MAIN_UV_BUF0_BASE);
 	isp_reg_writel(isp,addr,ISP_IOMEM_R2K_WRAP,ISP_WRAP_MAIN_UV_BUF1_BASE);
-	isp_reg_writel(isp,0x30001,ISP_IOMEM_R2K_WRAP,ISP_WRAP_CONFIG_DONE);	
+	isp_reg_writel(isp,0x30001,ISP_IOMEM_R2K_WRAP,ISP_WRAP_CONFIG_DONE);
 }
 
 /*
@@ -1472,8 +1493,8 @@ static void isp_r2k_set_main_outaddr(struct isp_r2k_device *r2k, u32 addr)
 	__func__,main_info->main_line_stride,main_info->main_size.Width,main_info->main_size.Height);
 	addr = addr + main_info->main_line_stride*main_info->main_size.Height;//1920*1080;
 	isp_reg_writel(isp,addr,ISP_IOMEM_R2K_WRAP,ISP_WRAP_MAIN_UV_BUF0_BASE);
-	isp_reg_writel(isp,addr,ISP_IOMEM_R2K_WRAP,ISP_WRAP_MAIN_UV_BUF1_BASE);	
-	isp_reg_writel(isp,0x30001,ISP_IOMEM_R2K_WRAP,ISP_WRAP_CONFIG_DONE);	
+	isp_reg_writel(isp,addr,ISP_IOMEM_R2K_WRAP,ISP_WRAP_MAIN_UV_BUF1_BASE);
+	isp_reg_writel(isp,0x30001,ISP_IOMEM_R2K_WRAP,ISP_WRAP_CONFIG_DONE);
 }
 
 /*
@@ -1532,7 +1553,7 @@ static void isp_r2k_set_out1_outaddr(struct isp_r2k_device *r2k, u32 addr)
 	addr = addr + ds1_info->ds1_line_stride*ds1_info->ds1_size.Height;//1920*1080;
 	isp_reg_writel(isp,addr,ISP_IOMEM_R2K_WRAP,ISP_WRAP_DS1_UV_BUF0_BASE);
 	isp_reg_writel(isp,addr,ISP_IOMEM_R2K_WRAP,ISP_WRAP_DS1_UV_BUF1_BASE);
-	isp_reg_writel(isp,0x30001,ISP_IOMEM_R2K_WRAP,ISP_WRAP_CONFIG_DONE);	
+	isp_reg_writel(isp,0x30001,ISP_IOMEM_R2K_WRAP,ISP_WRAP_CONFIG_DONE);
 }
 
 /*
@@ -1549,23 +1570,23 @@ static void isp_r2k_set_out2_outaddr(struct isp_r2k_device *r2k, u32 addr)
 	struct isp_wrap_ds2_info *ds2_info = &isp_wrap_cfg->ds2Info;
 	u32 r_addr,g_addr,b_addr;
 	unsigned int height = ds2_info->ds2_video_height;//ds2_info->ds2_size.Height
-	// = 
+	// =
 	//dev_dbg(r2k->isp->dev,"%s:line_stride (%d),Width(%d),Height(%d)\n",\
 	__func__,ds2_info->ds2_line_stride,ds2_info->ds2_size.Width,height);
-	r_addr = addr;		
+	r_addr = addr;
 	isp_reg_writel(isp,r_addr,ISP_IOMEM_R2K_WRAP,ISP_WRAP_DS2_R_BUF0_BASE);
 	isp_reg_writel(isp,r_addr,ISP_IOMEM_R2K_WRAP,ISP_WRAP_DS2_R_BUF1_BASE);
 
 	if( DS2_S_RGB == ds2_info->ds2_out_img_out_format)
 		g_addr = r_addr + ds2_info->ds2_line_stride * height;
-	else	
+	else
 		g_addr = r_addr + ds2_info->ds2_line_stride;
 	isp_reg_writel(isp,g_addr,ISP_IOMEM_R2K_WRAP,ISP_WRAP_DS2_G_BUF0_BASE);
 	isp_reg_writel(isp,g_addr,ISP_IOMEM_R2K_WRAP,ISP_WRAP_DS2_G_BUF1_BASE);
 	//
 	if( DS2_S_RGB == ds2_info->ds2_out_img_out_format)
 		b_addr = g_addr + ds2_info->ds2_line_stride * height;
-	else	
+	else
 		b_addr = g_addr + ds2_info->ds2_line_stride;
 	isp_reg_writel(isp,b_addr,ISP_IOMEM_R2K_WRAP,ISP_WRAP_DS2_B_BUF0_BASE);
 	isp_reg_writel(isp,b_addr,ISP_IOMEM_R2K_WRAP,ISP_WRAP_DS2_B_BUF1_BASE);
@@ -1594,7 +1615,7 @@ static void isp_r2k_enable(struct isp_r2k_device *r2k)
 void isp_r2k_wrap_print_status(struct isp_r2k_device *r2k)
 {
 
-	
+
 	struct k510_isp_device *isp = to_isp_device(r2k);
 
 	dev_dbg(isp->dev, "-------------ISP R2K WRAP Register dump start----------\n");
@@ -1749,13 +1770,13 @@ static void isp_r2k_core_print_status(struct isp_r2k_device *r2k)
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_IMAGE_H_START         		);
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_IMAGE_ACTIVE_WIDTH    		);
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_IMAGE_ACTIVE_HEIGHT   		);
-	//tpg	                                                       
+	//tpg
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_TEST_CTL              		);
-	//blc		                                                   
+	//blc
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_BLC_CTL               		);
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_BLC_OFFSET            		);
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_BLC_RATIO             		);
-	//lsc		                                                    
+	//lsc
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_LSC_CTL               		);
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_LSC_H_CENTER          		);
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_LSC_V_CENTER          		);
@@ -1763,7 +1784,7 @@ static void isp_r2k_core_print_status(struct isp_r2k_device *r2k)
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_LSC_G_RATIO           		);
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_LSC_B_RATIO           		);
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_LSC_IR_RATIO          		);
-	//ae		                                                   
+	//ae
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_AE_CTL                		);
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_AE_WIN_H_START        		);
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_AE_WIN_V_START        		);
@@ -1785,7 +1806,7 @@ static void isp_r2k_core_print_status(struct isp_r2k_device *r2k)
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_AE_GAIN_MIN           		);
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_AE_DN_SWITCH_ADJUST_STEP_MAX);
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_AE_DN_SWITCH_WAIT_TIME     );
-																
+
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_APE_DIFF_MAX               );
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_APE_DRV_SIGNAL_MAX         );
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_APE_COEFF_DIS              );
@@ -1793,7 +1814,7 @@ static void isp_r2k_core_print_status(struct isp_r2k_device *r2k)
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_APE_COEFF_ACCE             );
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_APE_DRV_MANUAL_VALUE       );
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_APE_DAMP_MANUAL_VALUE      );
-																
+
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_AE_VALUE_READY             );
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_AE_LONG_CUR_EX             );
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_AE_MID_CUR_EX              );
@@ -1804,7 +1825,7 @@ static void isp_r2k_core_print_status(struct isp_r2k_device *r2k)
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_AE_EX_STATUS               );
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_AE_SUM                     );
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_AE_PIXEL_SUM               );
-	//awb                                                           
+	//awb
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_AWB_CTL                    );
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_AWB_D65_RED_GAIN           );
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_AWB_D65_BLUE_GAIN          );
@@ -1848,7 +1869,7 @@ static void isp_r2k_core_print_status(struct isp_r2k_device *r2k)
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_AWB_ORG_RED_VALUE          );
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_AWB_ORG_GREEN_VALUE        );
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_AWB_ORG_BLUE_VALUE         );
-	//csc                                                          
+	//csc
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_CSC_R2Y_00                 );
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_CSC_R2Y_01                 );
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_CSC_R2Y_02                 );
@@ -1858,7 +1879,7 @@ static void isp_r2k_core_print_status(struct isp_r2k_device *r2k)
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_CSC_R2Y_20                 );
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_CSC_R2Y_21                 );
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_CSC_R2Y_22                 );
-	//ada                                                          
+	//ada
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_ADA_CTL                    );
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_ADA_STAT_MAX_VALUE         );
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_ADA_AD_STREN_MAX_VALUE     );
@@ -1866,21 +1887,21 @@ static void isp_r2k_core_print_status(struct isp_r2k_device *r2k)
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_ADA_WIN_V_START            );
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_ADA_WIN_H_END              );
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_ADA_WIN_V_END              );
-	//rgbir                                                        
+	//rgbir
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_RGBIR_CTL                  );
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_RGBIR_RPC_MAX_VALUE        );
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_RGBIR_RPC_COLOR_COFF       );
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_RGBIR_RPC_LUMA_COFF        );
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_RGBIR_RPC_TH               );
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_RGBIR_RPC_TH1              );
-	//2dnr                                                          
+	//2dnr
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_2DNR_CTL                   );
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_2DNR_RAW_INTENSITY         );
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_2DNR_BAP_INTENSITY         );
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_2DNR_EDGE_INTENSITY        );
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_2DNR_LUMA_INTENSITY        );
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_2DNR_CHROMA_INTENSITY      );
-	//enh                                                           
+	//enh
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_ENH_CTL                    );
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_LTM_GAIN                   );
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_LTM_TH                     );
@@ -1888,28 +1909,28 @@ static void isp_r2k_core_print_status(struct isp_r2k_device *r2k)
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_ENH_TH1                    );
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_ENH_TH2                    );
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_SHARP_GAIN                 );
-	//post                                                          
+	//post
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_POST_CTL                   );
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_CONT_GAIN                  );
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_LUMA_GAIN                  );
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_SATU_GAIN                  );
-	//otc                                                          
+	//otc
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_OTC_STT_VR                 );
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_OTC_STT_HR                 );
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_OTC_HEIGHT                 );
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_OTC_WIDTH                  );
-	//ldc                                                           
+	//ldc
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_LDC_CTL                    );
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_LDC_REQ_FREQ               );
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_LDC_H_CENTER_POS           );
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_LDC_V_CENTER_POS           );
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_LDC_RECTIFY_CR             );
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_LDC_RECTIFY_CZ             );
-	//ram table                                                     
+	//ram table
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_RAM_WR_STATUS              );
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_RAM_RD_STATUS              );
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_RAM_READ_LOCK              );
-	//af                                                           
+	//af
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_AF_CTL                     );
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_AF_STAT_WIN_H_START        );
 	ISP_R2K_CORE_PRINT_REGISTER(isp,ISP_CORE_AF_STAT_WIN_V_START        );
@@ -2100,7 +2121,7 @@ static int isp_r2k_remap_out0_config(struct isp_r2k_device *r2k,struct isp_remap
 {
 
 	struct k510_isp_device *isp = to_isp_device(r2k);
-	
+
 	ISP_DRV_LINE_DRAW_U DrawAreaNum;
 	ISP_REMAP_ATTR_S  stRemapCtl;
 
@@ -2113,7 +2134,7 @@ static int isp_r2k_remap_out1_config(struct isp_r2k_device *r2k,struct isp_remap
 {
 
 	struct k510_isp_device *isp = to_isp_device(r2k);
-	
+
 	ISP_DRV_LINE_DRAW_U DrawAreaNum;
 	ISP_REMAP_ATTR_S  stRemapCtl;
 	Isp_Drv_R2k_Remap_SetOut1Line(isp,DrawAreaNum,&stRemapCtl);
@@ -2137,7 +2158,7 @@ static int isp_r2k_remap_out1_config(struct isp_r2k_device *r2k,struct isp_remap
 static void isp_r2k_remap_print_status(struct isp_r2k_device *r2k)
 {
 
-	
+
 	struct k510_isp_device *isp = to_isp_device(r2k);
     //
 	dev_dbg(isp->dev, "-------------ISP R2K MAIN REMAP Register dump start----------\n");
@@ -2205,39 +2226,39 @@ static void isp_r2k_remap_print_status(struct isp_r2k_device *r2k)
 	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_INFO_AREA_30_1_CTRL);
 	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_INFO_AREA_31_0_CTRL);
 	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_INFO_AREA_31_1_CTRL);
-						
-	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_00_0_CTRL); 
-	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_01_0_CTRL); 
-	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_02_0_CTRL); 
-	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_03_0_CTRL); 
-	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_04_0_CTRL); 
-	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_05_0_CTRL); 
-	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_06_0_CTRL); 
-	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_07_0_CTRL); 
-	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_08_0_CTRL); 
-	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_09_0_CTRL); 
-	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_10_0_CTRL); 
-	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_11_0_CTRL); 
-	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_12_0_CTRL); 
-	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_13_0_CTRL); 
-	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_14_0_CTRL); 
-	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_15_0_CTRL); 
-	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_16_0_CTRL); 
-	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_17_0_CTRL); 
-	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_18_0_CTRL); 
+
+	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_00_0_CTRL);
+	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_01_0_CTRL);
+	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_02_0_CTRL);
+	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_03_0_CTRL);
+	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_04_0_CTRL);
+	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_05_0_CTRL);
+	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_06_0_CTRL);
+	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_07_0_CTRL);
+	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_08_0_CTRL);
+	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_09_0_CTRL);
+	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_10_0_CTRL);
+	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_11_0_CTRL);
+	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_12_0_CTRL);
+	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_13_0_CTRL);
+	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_14_0_CTRL);
+	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_15_0_CTRL);
+	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_16_0_CTRL);
+	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_17_0_CTRL);
+	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_18_0_CTRL);
 	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_19_0_CTRL);
-	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_20_0_CTRL); 
-	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_21_0_CTRL); 
-	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_22_0_CTRL); 
-	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_23_0_CTRL); 
-	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_24_0_CTRL); 
-	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_25_0_CTRL); 
-	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_26_0_CTRL); 
-	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_27_0_CTRL); 
-	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_28_0_CTRL); 
-	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_29_0_CTRL);    
-	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_30_0_CTRL); 
-	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_31_0_CTRL); 
+	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_20_0_CTRL);
+	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_21_0_CTRL);
+	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_22_0_CTRL);
+	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_23_0_CTRL);
+	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_24_0_CTRL);
+	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_25_0_CTRL);
+	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_26_0_CTRL);
+	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_27_0_CTRL);
+	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_28_0_CTRL);
+	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_29_0_CTRL);
+	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_30_0_CTRL);
+	ISP_R2K_MAIN_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_31_0_CTRL);
     dev_dbg(isp->dev, "-------------ISP R2K MAIN REMAP Register dump end----------\n");
     //
 	dev_dbg(isp->dev, "-------------ISP R2K OUT0 REMAP Register dump start----------\n");
@@ -2305,39 +2326,39 @@ static void isp_r2k_remap_print_status(struct isp_r2k_device *r2k)
 	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_INFO_AREA_30_1_CTRL);
 	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_INFO_AREA_31_0_CTRL);
 	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_INFO_AREA_31_1_CTRL);
-						
-	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_00_0_CTRL); 
-	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_01_0_CTRL); 
-	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_02_0_CTRL); 
-	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_03_0_CTRL); 
-	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_04_0_CTRL); 
-	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_05_0_CTRL); 
-	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_06_0_CTRL); 
-	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_07_0_CTRL); 
-	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_08_0_CTRL); 
-	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_09_0_CTRL); 
-	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_10_0_CTRL); 
-	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_11_0_CTRL); 
-	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_12_0_CTRL); 
-	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_13_0_CTRL); 
-	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_14_0_CTRL); 
-	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_15_0_CTRL); 
-	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_16_0_CTRL); 
-	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_17_0_CTRL); 
-	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_18_0_CTRL); 
+
+	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_00_0_CTRL);
+	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_01_0_CTRL);
+	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_02_0_CTRL);
+	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_03_0_CTRL);
+	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_04_0_CTRL);
+	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_05_0_CTRL);
+	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_06_0_CTRL);
+	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_07_0_CTRL);
+	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_08_0_CTRL);
+	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_09_0_CTRL);
+	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_10_0_CTRL);
+	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_11_0_CTRL);
+	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_12_0_CTRL);
+	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_13_0_CTRL);
+	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_14_0_CTRL);
+	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_15_0_CTRL);
+	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_16_0_CTRL);
+	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_17_0_CTRL);
+	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_18_0_CTRL);
 	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_19_0_CTRL);
-	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_20_0_CTRL); 
-	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_21_0_CTRL); 
-	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_22_0_CTRL); 
-	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_23_0_CTRL); 
-	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_24_0_CTRL); 
-	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_25_0_CTRL); 
-	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_26_0_CTRL); 
-	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_27_0_CTRL); 
-	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_28_0_CTRL); 
-	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_29_0_CTRL);    
-	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_30_0_CTRL); 
-	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_31_0_CTRL); 
+	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_20_0_CTRL);
+	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_21_0_CTRL);
+	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_22_0_CTRL);
+	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_23_0_CTRL);
+	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_24_0_CTRL);
+	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_25_0_CTRL);
+	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_26_0_CTRL);
+	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_27_0_CTRL);
+	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_28_0_CTRL);
+	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_29_0_CTRL);
+	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_30_0_CTRL);
+	ISP_R2K_OUT0_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_31_0_CTRL);
     dev_dbg(isp->dev, "-------------ISP R2K OUT0 REMAP Register dump end----------\n");
     //
 	dev_dbg(isp->dev, "-------------ISP R2K OUT1 REMAP Register dump start----------\n");
@@ -2405,39 +2426,39 @@ static void isp_r2k_remap_print_status(struct isp_r2k_device *r2k)
 	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_INFO_AREA_30_1_CTRL);
 	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_INFO_AREA_31_0_CTRL);
 	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_INFO_AREA_31_1_CTRL);
-						
-	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_00_0_CTRL); 
-	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_01_0_CTRL); 
-	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_02_0_CTRL); 
-	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_03_0_CTRL); 
-	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_04_0_CTRL); 
-	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_05_0_CTRL); 
-	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_06_0_CTRL); 
-	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_07_0_CTRL); 
-	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_08_0_CTRL); 
-	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_09_0_CTRL); 
-	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_10_0_CTRL); 
-	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_11_0_CTRL); 
-	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_12_0_CTRL); 
-	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_13_0_CTRL); 
-	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_14_0_CTRL); 
-	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_15_0_CTRL); 
-	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_16_0_CTRL); 
-	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_17_0_CTRL); 
-	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_18_0_CTRL); 
+
+	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_00_0_CTRL);
+	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_01_0_CTRL);
+	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_02_0_CTRL);
+	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_03_0_CTRL);
+	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_04_0_CTRL);
+	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_05_0_CTRL);
+	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_06_0_CTRL);
+	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_07_0_CTRL);
+	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_08_0_CTRL);
+	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_09_0_CTRL);
+	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_10_0_CTRL);
+	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_11_0_CTRL);
+	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_12_0_CTRL);
+	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_13_0_CTRL);
+	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_14_0_CTRL);
+	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_15_0_CTRL);
+	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_16_0_CTRL);
+	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_17_0_CTRL);
+	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_18_0_CTRL);
 	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_19_0_CTRL);
-	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_20_0_CTRL); 
-	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_21_0_CTRL); 
-	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_22_0_CTRL); 
-	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_23_0_CTRL); 
-	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_24_0_CTRL); 
-	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_25_0_CTRL); 
-	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_26_0_CTRL); 
-	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_27_0_CTRL); 
-	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_28_0_CTRL); 
-	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_29_0_CTRL);    
-	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_30_0_CTRL); 
-	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_31_0_CTRL); 
+	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_20_0_CTRL);
+	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_21_0_CTRL);
+	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_22_0_CTRL);
+	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_23_0_CTRL);
+	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_24_0_CTRL);
+	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_25_0_CTRL);
+	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_26_0_CTRL);
+	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_27_0_CTRL);
+	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_28_0_CTRL);
+	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_29_0_CTRL);
+	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_30_0_CTRL);
+	ISP_R2K_OUT1_REMAP_PRINT_REGISTER(isp,ISP_FILL_DATA_AREA_31_0_CTRL);
     dev_dbg(isp->dev, "-------------ISP R2K OUT1 REMAP Register dump end----------\n");
 }
 
@@ -2453,7 +2474,7 @@ static void video_buffer_next(struct isp_r2k_device *r2k, enum video_type dsNum)
 	unsigned long flags;
 	int drop = 0;
 	struct isp_cfg_info *isp_cfg = &r2k->isp_cfg;
-	
+
 	dev_dbg(video->isp->dev,"%s:start\n",__func__);
 	spin_lock_irqsave(&video->irqlock, flags);
 	if (WARN_ON(list_empty(&video->dmaqueue))) {
@@ -2462,7 +2483,7 @@ static void video_buffer_next(struct isp_r2k_device *r2k, enum video_type dsNum)
 		if(isp_cfg->isp_wrap_cfg.ds0Info.ds0_out_en == 0 && dsNum == DS0_VIDEO)
 		{
 		  return;
-		}		
+		}
 		r2k->profile.no_buf_drop_cnt++;
 		return;
 	}
@@ -2472,15 +2493,15 @@ static void video_buffer_next(struct isp_r2k_device *r2k, enum video_type dsNum)
 		if(isp_cfg->isp_wrap_cfg.ds0Info.ds0_out_en == 0 && dsNum == DS0_VIDEO)
 		{
 		  return;
-		}		
+		}
 		r2k->profile.no_buf_drop_cnt++;
 		return;
 	}
 
 	buf = list_first_entry(&video->dmaqueue, struct k510isp_buffer, irqlist);
-	
+
 	if(r2k->profile.drop_threshold > 0LL && r2k->profile.buf_set_time[dsNum] != 0)
-	{	  
+	{
 	  unsigned long long delta;
 	  delta = get_usec() - r2k->profile.buf_set_time[dsNum];
 	  if(delta > r2k->profile.drop_threshold)
@@ -2499,7 +2520,7 @@ static void video_buffer_next(struct isp_r2k_device *r2k, enum video_type dsNum)
     list_del(&buf->irqlist);
     next_buf = list_first_entry(&video->dmaqueue, struct k510isp_buffer, irqlist);
   }
-  
+
   if(next_buf != NULL)
   {
     if(dsNum == MAIN_VIDEO)
@@ -2511,7 +2532,7 @@ static void video_buffer_next(struct isp_r2k_device *r2k, enum video_type dsNum)
 	  else if(dsNum == DS2_VIDEO)
 	    isp_r2k_set_out2_outaddr(r2k, next_buf->dma);
 	}
-	
+
 	spin_unlock_irqrestore(&video->irqlock, flags);
 
   if(!drop)
@@ -2574,7 +2595,7 @@ static void video_buffer_next(struct isp_r2k_device *r2k, enum video_type dsNum)
 		pipe->state &= ~ISP_PIPELINE_STREAM;
 		spin_unlock(&pipe->lock);
 	}
-	
+
 	spin_unlock_irqrestore(&video->irqlock, flags);
 
 	return;
@@ -2594,7 +2615,7 @@ static void r2k_isr_main_buffer(struct isp_r2k_device *r2k)
 		return 1;
 	}
 
-	video_buffer_next(r2k, MAIN_VIDEO);	
+	video_buffer_next(r2k, MAIN_VIDEO);
 
 	r2k->profile.buf_set_time[MAIN_VIDEO] = get_usec();
 	pipe->state |= ISP_PIPELINE_IDLE_OUTPUT;
@@ -2638,7 +2659,7 @@ static void r2k_isr_out1_buffer(struct isp_r2k_device *r2k)
 		return 1;
 	}
 
-	video_buffer_next(r2k, DS1_VIDEO);	
+	video_buffer_next(r2k, DS1_VIDEO);
 	r2k->profile.buf_set_time[DS1_VIDEO] = get_usec();
 
 	pipe->state |= ISP_PIPELINE_IDLE_OUTPUT;
@@ -2660,7 +2681,7 @@ static void r2k_isr_out2_buffer(struct isp_r2k_device *r2k)
 		return 1;
 	}
 
-	video_buffer_next(r2k, DS2_VIDEO);	
+	video_buffer_next(r2k, DS2_VIDEO);
 
 	pipe->state |= ISP_PIPELINE_IDLE_OUTPUT;
 
@@ -2693,7 +2714,7 @@ int k510isp_r2k_ds0_isr(struct isp_r2k_device *r2k,u32 events)
 	/* Handle queued buffers on frame end interrupts */
 	//if(events & (IRQW1_STS_OUT0_Y_FRAME_IRQ|IRQW1_STS_OUT0_UV_FRAME_IRQ))
 	r2k_isr_out0_buffer(r2k);
-		
+
 	return 0;
 }
 
@@ -2704,7 +2725,7 @@ int k510isp_r2k_ds1_isr(struct isp_r2k_device *r2k,u32 events)
 		return 0;
 	//if(events & (IRQW1_STS_OUT1_Y_FRAME_IRQ|IRQW1_STS_OUT1_UV_FRAME_IRQ))
 	r2k_isr_out1_buffer(r2k);
-		
+
 	return 0;
 }
 //
@@ -2736,7 +2757,7 @@ static int r2k_video_queue(struct k510isp_video *video, struct k510isp_buffer *b
 	{
 		dev_err(video->isp->dev,"%s:no mem dev\n",__func__);
 		return -ENODEV;
-	}	
+	}
 	if (r2k->output & ISP_R2K_OUTPUT_FBC)
 	{
 		isp_r2k_set_fbc_outaddr(r2k, buffer->dma);
@@ -2771,25 +2792,25 @@ static int r2k_video_queue(struct k510isp_video *video, struct k510isp_buffer *b
 	}
 	if (r2k->output & ISP_R2K_OUTPUT_MAIN_MEM)
 	{
-		dev_dbg(video->isp->dev,"%s:buffer->dma(0x%x)\n",__func__,buffer->dma);		
+		dev_dbg(video->isp->dev,"%s:buffer->dma(0x%x)\n",__func__,buffer->dma);
 		r2k->pingpong[MAIN_VIDEO] = 0;
-		isp_r2k_set_main_outaddr(r2k, buffer->dma);		
+		isp_r2k_set_main_outaddr(r2k, buffer->dma);
 	}
 
 	if (r2k->output & ISP_R2K_OUTPUT_DS0_MEM)
 	{
 		r2k->pingpong[DS0_VIDEO] = 0;
-		isp_r2k_set_out0_outaddr(r2k, buffer->dma);		
+		isp_r2k_set_out0_outaddr(r2k, buffer->dma);
 	}
 	if (r2k->output & ISP_R2K_OUTPUT_DS1_MEM)
 	{
 		r2k->pingpong[DS1_VIDEO] = 0;
-		isp_r2k_set_out1_outaddr(r2k, buffer->dma);		
+		isp_r2k_set_out1_outaddr(r2k, buffer->dma);
 	}
 	if (r2k->output & ISP_R2K_OUTPUT_DS2_MEM)
 	{
 		r2k->pingpong[DS2_VIDEO] = 0;
-		isp_r2k_set_out2_outaddr(r2k, buffer->dma);		
+		isp_r2k_set_out2_outaddr(r2k, buffer->dma);
 	}
 #endif
 	/* We now have a buffer queued on the output, restart the pipeline
@@ -2874,7 +2895,7 @@ static long r2k_ioctl(struct v4l2_subdev *sd, unsigned int cmd, void *arg)
 		mutex_lock(&r2k->ioctl_lock);
 		ret = isp_r2k_remap_out1_config(r2k, arg);
 		mutex_unlock(&r2k->ioctl_lock);
-		break; 
+		break;
 	case VIDIOC_K510ISP_R2K_AE_STAT_REQ:
 		mutex_lock(&r2k->ioctl_lock);
 		isp_r2k_core_GetAeSts(r2k->isp,arg);
@@ -2894,6 +2915,16 @@ static long r2k_ioctl(struct v4l2_subdev *sd, unsigned int cmd, void *arg)
 		reset_control_reset(r2k->isp->reset[ISP_R2K_RST]);
 		mutex_unlock(&r2k->ioctl_lock);
 		break;
+	case VIDIOC_K510ISP_R2K_CORE_REG_SET:
+		mutex_lock(&r2k->ioctl_lock);
+		isp_r2k_core_RegSet(r2k->isp,arg);
+		mutex_unlock(&r2k->ioctl_lock);
+		break;
+	case VIDIOC_K510ISP_R2K_CORE_REG_GET:
+		mutex_lock(&r2k->ioctl_lock);
+		isp_r2k_core_RegGet(r2k->isp,arg);
+		mutex_unlock(&r2k->ioctl_lock);
+		break;
 	default:
 		dev_err(r2k->isp->dev,"%s:cmd(0x%x) err!\n",__func__,cmd);
 		return -ENOIOCTLCMD;
@@ -2940,8 +2971,8 @@ static int r2k_set_stream(struct v4l2_subdev *sd, int enable)
 	dev_dbg(r2k->isp->dev,"%s:enable(0x%d)\n",__func__,enable);
 
 	struct isp_cfg_info *isp_cfg = &r2k->isp_cfg;
-	struct isp_irq_info irq_info; 
-	
+	struct isp_irq_info irq_info;
+
 	if (r2k->state == ISP_PIPELINE_STREAM_STOPPED) {
 		if (enable == ISP_PIPELINE_STREAM_STOPPED)
 		{
@@ -2951,9 +2982,9 @@ static int r2k_set_stream(struct v4l2_subdev *sd, int enable)
 			k510isp_r2k_reset(isp);
 			mutex_unlock(&r2k->ioctl_lock);
 			return 0;
-		}	
+		}
 		atomic_set(&r2k->stopping, 0);
-	}	
+	}
 
 	switch (enable) {
 	case ISP_PIPELINE_STREAM_CONTINUOUS:
@@ -3016,7 +3047,7 @@ static int r2k_set_stream(struct v4l2_subdev *sd, int enable)
 		    if(r2k->profile.drop_cnt[i] > 0)
 		      dev_info(r2k->isp->dev,"r2k ds%d jump drop_cnt %d\n", i, r2k->profile.drop_cnt[i]);
 		  }
-		}		
+		}
 		dev_info(r2k->isp->dev,"r2k dmaErrCnt %d, no_buf_drop_cnt %d, total %d\n", r2k->profile.dmaErrCnt, r2k->profile.no_buf_drop_cnt, r2k->profile.pic_cnt);
 		break;
 	}
@@ -3231,7 +3262,7 @@ static int r2k_enum_mbus_code(struct v4l2_subdev *sd,
 	case ISP_R2K_PAD_SINK:
 		if (code->index >= ARRAY_SIZE(r2k_fmts))
 		{
-			dev_err(r2k->isp->dev,"%s:code->index %d\n",__func__,code->index);	
+			dev_err(r2k->isp->dev,"%s:code->index %d\n",__func__,code->index);
 			return -EINVAL;
 		}
 		code->code = r2k_fmts[code->index];
@@ -3253,7 +3284,7 @@ static int r2k_enum_mbus_code(struct v4l2_subdev *sd,
 				code->code = MEDIA_BUS_FMT_UYVY8_1X16;
 			else
 			{
-				dev_err(r2k->isp->dev,"%s:code->index1 %d\n",__func__,code->index);	
+				dev_err(r2k->isp->dev,"%s:code->index1 %d\n",__func__,code->index);
 				return -EINVAL;
 			}
 		} else {
@@ -3264,7 +3295,7 @@ static int r2k_enum_mbus_code(struct v4l2_subdev *sd,
 				code->code = format->code;
 			else
 			{
-				dev_err(r2k->isp->dev,"%s:code->index2 %d\n",__func__,code->index);	
+				dev_err(r2k->isp->dev,"%s:code->index2 %d\n",__func__,code->index);
 				return -EINVAL;
 			}
 		}
@@ -3289,7 +3320,7 @@ static int r2k_enum_frame_size(struct v4l2_subdev *sd,
 	{
 		dev_err(r2k->isp->dev,"%s:fse->index%d\n",__func__,fse->index);
 		return -EINVAL;
-	}	
+	}
 
 	format.code = fse->code;
 	format.width = 1;
@@ -3302,7 +3333,7 @@ static int r2k_enum_frame_size(struct v4l2_subdev *sd,
 	{
 		dev_err(r2k->isp->dev,"%s:format.code,fse->code %d\n",__func__,fse->code);
 		return -EINVAL;
-	}	
+	}
 
 	format.code = fse->code;
 	format.width = -1;
@@ -3337,7 +3368,7 @@ static int r2k_get_selection(struct v4l2_subdev *sd, struct v4l2_subdev_pad_conf
 	{
 		dev_err(r2k->isp->dev,"%s:no pad\n",__func__);
 		return -EINVAL;
-	}	
+	}
 
 	switch (sel->target) {
 	case V4L2_SEL_TGT_CROP_BOUNDS:
@@ -3387,14 +3418,14 @@ static int r2k_set_selection(struct v4l2_subdev *sd, struct v4l2_subdev_pad_conf
 	{
 		dev_err(r2k->isp->dev,"%s:pad == NULL\n",__func__);
 		return -EINVAL;
-	}		
+	}
 
 	/* The crop rectangle can't be changed while streaming. */
 	if (r2k->state != ISP_PIPELINE_STREAM_STOPPED)
 	{
 		dev_err(r2k->isp->dev,"%s:ISP_PIPELINE_STREAM_RUNNING\n",__func__);
 		return -EBUSY;
-	}	
+	}
 
 	/* Modifying the crop rectangle always changes the format on the source
 	 * pad. If the KEEP_CONFIG flag is set, just return the current crop
@@ -3499,7 +3530,7 @@ static int r2k_set_format(struct v4l2_subdev *sd, struct v4l2_subdev_pad_config
 		crop->top = 0;
 		crop->width = fmt->format.width;
 		crop->height = fmt->format.height;
-		//	
+		//
 		format = &fmt->format;
 		r2k->formats[ISP_R2K_PAD_SINK].width = format->width;
 		r2k->formats[ISP_R2K_PAD_SINK].height = format->height;
@@ -3521,7 +3552,7 @@ static int r2k_set_format(struct v4l2_subdev *sd, struct v4l2_subdev_pad_config
 		r2k->formats[ISP_R2K_PAD_MAIN_SOURCE].height = format->height;
 		r2k->formats[ISP_R2K_PAD_MAIN_SOURCE].field = V4L2_FIELD_NONE;
 		r2k->formats[ISP_R2K_PAD_MAIN_SOURCE].colorspace =V4L2_COLORSPACE_SRGB;
-		r2k->formats[ISP_R2K_PAD_MAIN_SOURCE].code = format->code;	
+		r2k->formats[ISP_R2K_PAD_MAIN_SOURCE].code = format->code;
 	}
 
 	if (fmt->pad == ISP_R2K_PAD_DS0_SOURCE) {
@@ -3570,7 +3601,7 @@ static int r2k_link_validate(struct v4l2_subdev *sd,
 	{
 		dev_err(r2k->isp->dev,"%s:format error\n",__func__);
 		return -EPIPE;
-	}	
+	}
 
 	return 0;
 }
@@ -3597,7 +3628,7 @@ static int r2k_init_formats(struct v4l2_subdev *sd, struct v4l2_subdev_fh *fh)
 		format.format.code = r2k->formats[pad].code;//MEDIA_BUS_FMT_SRGGB10_1X10;//MEDIA_BUS_FMT_SGRBG10_1X10;
 		format.format.width = r2k->formats[pad].width;//1920;//4096;
 		format.format.height = r2k->formats[pad].height;//1080;//4096;
-		r2k_set_format(sd, fh ? fh->pad : NULL, &format);		
+		r2k_set_format(sd, fh ? fh->pad : NULL, &format);
 	}
 
 	return 0;
@@ -3673,12 +3704,12 @@ static int r2k_link_setup(struct media_entity *entity,
 		{
 			dev_err(r2k->isp->dev,"%s:!ISP_R2K_INPUT_NONE\n",__func__);
 			return -EBUSY;
-		}	
+		}
 
 		if (remote->entity == &r2k->subdev.entity)
 			r2k->input = ISP_R2K_INPUT_VI;
 		else
-			r2k->input = ISP_R2K_INPUT_NONE;			
+			r2k->input = ISP_R2K_INPUT_NONE;
 		break;
 	case ISP_R2K_PAD_MAIN_SOURCE:
 	case ISP_R2K_PAD_MAIN_SOURCE | 2 << 16:
@@ -3688,21 +3719,21 @@ static int r2k_link_setup(struct media_entity *entity,
 			{
 				dev_err(r2k->isp->dev,"%s:!ISP_R2K_PAD_MAIN_SOURCE\n",__func__);
 				return -EBUSY;
-			}	
+			}
 			r2k->output |= ISP_R2K_OUTPUT_MAIN_MEM;
 		} else {
 			r2k->output &= ~ISP_R2K_OUTPUT_MAIN_MEM;
 		}
 		break;
 	case ISP_R2K_PAD_DS0_SOURCE:
-	case ISP_R2K_PAD_DS0_SOURCE | 2 << 16:	
+	case ISP_R2K_PAD_DS0_SOURCE | 2 << 16:
 		/* Write to memory */
 		if (flags & MEDIA_LNK_FL_ENABLED) {
 			if (r2k->output & ISP_R2K_OUTPUT_DS0_MEM)
 			{
 				dev_err(r2k->isp->dev,"%s:!ISP_R2K_PAD_DS0_SOURCE\n",__func__);
 				return -EBUSY;
-			}	
+			}
 			r2k->output |= ISP_R2K_OUTPUT_DS0_MEM;
 		} else {
 			r2k->output &= ~ISP_R2K_OUTPUT_DS0_MEM;
@@ -3716,7 +3747,7 @@ static int r2k_link_setup(struct media_entity *entity,
 			{
 				dev_err(r2k->isp->dev,"%s:!ISP_R2K_PAD_DS1_SOURCE\n",__func__);
 				return -EBUSY;
-			}	
+			}
 			r2k->output |= ISP_R2K_OUTPUT_DS1_MEM;
 		} else {
 			r2k->output &= ~ISP_R2K_OUTPUT_DS1_MEM;
@@ -3730,7 +3761,7 @@ static int r2k_link_setup(struct media_entity *entity,
 			{
 				dev_err(r2k->isp->dev,"%s:!ISP_R2K_PAD_DS2_SOURCE\n",__func__);
 				return -EBUSY;
-			}	
+			}
 			r2k->output |= ISP_R2K_OUTPUT_DS2_MEM;
 		} else {
 			r2k->output &= ~ISP_R2K_OUTPUT_DS2_MEM;
@@ -3738,7 +3769,7 @@ static int r2k_link_setup(struct media_entity *entity,
 		break;
 	default:
 		dev_dbg(r2k->isp->dev,"%s:!no index\n",__func__);
-		return -EINVAL;			
+		return -EINVAL;
 	}
 
 	dev_dbg(r2k->isp->dev,"%s:end\n",__func__);
@@ -3822,7 +3853,7 @@ int k510isp_r2k_register_entities(struct isp_r2k_device *r2k,
 	k510isp_video_unregister(&r2k->video_out[DS1_VIDEO]);
 error_ds0:
 	k510isp_video_unregister(&r2k->video_out[DS0_VIDEO]);
-error_main:	
+error_main:
 	k510isp_video_unregister(&r2k->video_out[MAIN_VIDEO]);
 error:
 	k510isp_r2k_unregister_entities(r2k);
@@ -3870,7 +3901,7 @@ static int k510isp_r2k_init_entities(struct isp_r2k_device *r2k)
 	{
 		dev_err(isp->dev,"%s:media_entity_pads_init ret:%d\n",__func__,ret);
 		return ret;
-	}	
+	}
 	dev_dbg(isp->dev,"%s:media_entity_pads_init end\n",__func__);
 	r2k_init_formats(sd, NULL);
 	//MAIN
@@ -3887,7 +3918,7 @@ static int k510isp_r2k_init_entities(struct isp_r2k_device *r2k)
 	{
 		dev_err(isp->dev,"%s:k510isp_video_init ret:%d\n",__func__,ret);
 		goto error_video;
-	}	
+	}
 	//DS0
 	r2k->video_out[DS0_VIDEO].type = V4L2_BUF_TYPE_VIDEO_CAPTURE;//V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE;//V4L2_BUF_TYPE_VIDEO_OUTPUT;
 	r2k->video_out[DS0_VIDEO].bpl_alignment = 32;//16;//32;
@@ -3902,7 +3933,7 @@ static int k510isp_r2k_init_entities(struct isp_r2k_device *r2k)
 	{
 		dev_err(isp->dev,"%s:k510isp_video_init ret:%d\n",__func__,ret);
 		goto error_main_video;
-	}	
+	}
 	//DS1
 	r2k->video_out[DS1_VIDEO].type = V4L2_BUF_TYPE_VIDEO_CAPTURE;//V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE;//V4L2_BUF_TYPE_VIDEO_OUTPUT;
 	r2k->video_out[DS1_VIDEO].bpl_alignment = 32;//16;//32;
@@ -3917,7 +3948,7 @@ static int k510isp_r2k_init_entities(struct isp_r2k_device *r2k)
 	{
 		dev_err(isp->dev,"%s:k510isp_video_init ret:%d\n",__func__,ret);
 		goto error_ds0_video;
-	}	
+	}
 	//DS0
 	r2k->video_out[DS2_VIDEO].type = V4L2_BUF_TYPE_VIDEO_CAPTURE;//V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE;//V4L2_BUF_TYPE_VIDEO_OUTPUT;
 	r2k->video_out[DS2_VIDEO].bpl_alignment = 32;//16;//32;
@@ -3932,7 +3963,7 @@ static int k510isp_r2k_init_entities(struct isp_r2k_device *r2k)
 	{
 		dev_err(isp->dev,"%s:k510isp_video_init ret:%d\n",__func__,ret);
 		goto error_ds1_video;
-	}		
+	}
 	dev_dbg(isp->dev,"%s: end\n",__func__);
 	return 0;
 
@@ -3978,8 +4009,8 @@ int k510isp_r2k_init(struct k510_isp_device *isp)
 		dev_err(isp->dev,"%s:k510isp_r2k_init_entities\n",__func__);
 		mutex_destroy(&r2k->ioctl_lock);
 		return ret;
-	}	
-	dev_dbg(isp->dev,"%s: end\n",__func__);	
+	}
+	dev_dbg(isp->dev,"%s: end\n",__func__);
 	return 0;
 }
 /*
@@ -3996,5 +4027,5 @@ void k510isp_r2k_cleanup(struct k510_isp_device *isp)
 	k510isp_video_cleanup(&r2k->video_out[DS2_VIDEO]);
 	media_entity_cleanup(&r2k->subdev.entity);
 
-	mutex_destroy(&r2k->ioctl_lock);			  	
+	mutex_destroy(&r2k->ioctl_lock);
 }
diff --git a/include/uapi/linux/k510isp.h b/include/uapi/linux/k510isp.h
index 48d5ba06..2dbcb4fb 100755
--- a/include/uapi/linux/k510isp.h
+++ b/include/uapi/linux/k510isp.h
@@ -29,7 +29,7 @@
 #define VIDIOC_K510ISP_F2K_REMAP_OUT1_CFG \
 	_IOWR('V', BASE_VIDIOC_PRIVATE + 7,struct isp_remap_cfg_info)
 #define VIDIOC_K510ISP_F2K_FBCD_CFG \
-	_IOWR('V', BASE_VIDIOC_PRIVATE + 8,struct isp_remap_cfg_info)	
+	_IOWR('V', BASE_VIDIOC_PRIVATE + 8,struct isp_remap_cfg_info)
 #define VIDIOC_K510ISP_R2K_WRAP_CFG \
 	_IOWR('V', BASE_VIDIOC_PRIVATE + 9,struct isp_wrap_cfg_info)
 #define VIDIOC_K510ISP_R2K_CORE_CFG \
@@ -96,18 +96,14 @@
 	_IOWR('V', BASE_VIDIOC_PRIVATE + 40,unsigned long)
 #define VIDIOC_K510ISP_SYSCTL_RST_R2K \
 	_IOWR('V', BASE_VIDIOC_PRIVATE + 41,unsigned long)
-#define VIDIOC_K510ISP_F2K_AWB_VAL_GET \
-	_IOWR('V', BASE_VIDIOC_PRIVATE + 42, struct k510isp_awb_sync_info)
-#define VIDIOC_K510ISP_R2K_AWB_VAL_SET \
-	_IOWR('V', BASE_VIDIOC_PRIVATE + 43, struct k510isp_awb_sync_info)
 #define VIDIOC_K510ISP_F2K_CORE_REG_SET \
-	_IOWR('V', BASE_VIDIOC_PRIVATE + 44, struct k510isp_reg_val)
+	_IOWR('V', BASE_VIDIOC_PRIVATE + 42, struct k510isp_reg_val)
 #define VIDIOC_K510ISP_F2K_CORE_REG_GET \
-	_IOWR('V', BASE_VIDIOC_PRIVATE + 45, struct k510isp_reg_val)
+	_IOWR('V', BASE_VIDIOC_PRIVATE + 43, struct k510isp_reg_val)
 #define VIDIOC_K510ISP_R2K_CORE_REG_SET \
-	_IOWR('V', BASE_VIDIOC_PRIVATE + 46, struct k510isp_reg_val)
+	_IOWR('V', BASE_VIDIOC_PRIVATE + 44, struct k510isp_reg_val)
 #define VIDIOC_K510ISP_R2K_CORE_REG_GET \
-	_IOWR('V', BASE_VIDIOC_PRIVATE + 47, struct k510isp_reg_val)
+	_IOWR('V', BASE_VIDIOC_PRIVATE + 45, struct k510isp_reg_val)
 //
 /*
  * Events
@@ -170,7 +166,7 @@ struct k510isp_awb_sync_info {
 struct k510isp_awb_stats{
     //
     __u32 bfb_pos;//Blue hist value of AWB in feedback mode
-    __u32 bfb_pot;//Blue hist pixels of AWB in feedback mode 
+    __u32 bfb_pot;//Blue hist pixels of AWB in feedback mode
     __u32 rfb_pos;//Red hist value of AWB in feedback mode
     __u32 rfb_pot;//Red hist pixels of AWB in feedback mode
     //
-- 
2.36.1

