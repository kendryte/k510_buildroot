From e2534c562d32aad179133557b8751190026b383a Mon Sep 17 00:00:00 2001
From: longyiluo <longyiluo@canaan-creative.com>
Date: Wed, 8 Jun 2022 16:08:04 +0800
Subject: [PATCH] isp_buffer_err_handling

---
 .../platform/canaan-isp/isp_2k/isp_f2k.c      | 236 ++++++++++++++--
 .../platform/canaan-isp/isp_2k/isp_f2k.h      |   3 +
 .../platform/canaan-isp/isp_2k/isp_r2k.c      | 253 ++++++++++++++++--
 .../platform/canaan-isp/isp_2k/isp_r2k.h      |   3 +
 drivers/media/platform/canaan-isp/k510_isp.c  | 154 ++++++++++-
 drivers/media/platform/canaan-isp/k510_isp.h  |   1 +
 .../media/platform/canaan-isp/k510isp_com.h   |  22 ++
 7 files changed, 613 insertions(+), 59 deletions(-)

diff --git a/drivers/media/platform/canaan-isp/isp_2k/isp_f2k.c b/drivers/media/platform/canaan-isp/isp_2k/isp_f2k.c
index 906443b2..95a0a076 100755
--- a/drivers/media/platform/canaan-isp/isp_2k/isp_f2k.c
+++ b/drivers/media/platform/canaan-isp/isp_2k/isp_f2k.c
@@ -27,6 +27,19 @@
 #include "fbd/isp_3dnr_fbd_drv.h"
 #include "remap/isp_remap_drv.h"
 #include "table/isp_table_drv.h"
+
+static unsigned long long get_usec(void)
+{
+	struct timeval ts;
+
+	do_gettimeofday(&ts);
+
+	ts.tv_sec &= 0x1ffffLL;
+
+	return ts.tv_sec*1000000 + ts.tv_usec;
+}
+
+
 /****************************************************************************
 *wrap
 *****************************************************************************/
@@ -1700,6 +1713,7 @@ static void isp_f2k_set_main_outaddr(struct isp_f2k_device *f2k, u32 addr)
 	struct k510_isp_device *isp = to_isp_device(f2k);
 	struct isp_wrap_cfg_info *isp_wrap_cfg = &f2k->isp_cfg.isp_wrap_cfg;
 	struct isp_wrap_main_info *main_info = &isp_wrap_cfg->mainInfo;
+
 	isp_reg_writel(isp,addr,ISP_IOMEM_F2K_WRAP,ISP_WRAP_MAIN_Y_BUF0_BASE);
 	isp_reg_writel(isp,addr,ISP_IOMEM_F2K_WRAP,ISP_WRAP_MAIN_Y_BUF1_BASE);
 	//dev_dbg(f2k->isp->dev,"%s:line_stride (%d),Width(%d),Height(%d)\n",\
@@ -1722,15 +1736,32 @@ static void isp_f2k_set_out0_outaddr(struct isp_f2k_device *f2k, u32 addr)
 	struct k510_isp_device *isp = to_isp_device(f2k);
 	struct isp_wrap_cfg_info *isp_wrap_cfg = &f2k->isp_cfg.isp_wrap_cfg;
 	struct isp_wrap_ds0_info *ds0_info = &isp_wrap_cfg->ds0Info;
+	
+#ifdef SET_DIFF_BUFF
+	if((f2k->pingpong[DS0_VIDEO]%2) == 0)
+	{
+		isp_reg_writel(isp,addr,ISP_IOMEM_F2K_WRAP,ISP_WRAP_DS0_Y_BUF0_BASE);
+	  addr = addr + ds0_info->ds0_line_stride*ds0_info->ds0_size.Height;//1920*1080;
+	  isp_reg_writel(isp,addr,ISP_IOMEM_F2K_WRAP,ISP_WRAP_DS0_UV_BUF0_BASE);
+	}
+	else if((f2k->pingpong[DS0_VIDEO]%2) == 1)
+	{
+		isp_reg_writel(isp,addr,ISP_IOMEM_F2K_WRAP,ISP_WRAP_DS0_Y_BUF1_BASE);
+		addr = addr + ds0_info->ds0_line_stride*ds0_info->ds0_size.Height;//1920*1080;
+	  isp_reg_writel(isp,addr,ISP_IOMEM_F2K_WRAP,ISP_WRAP_DS0_UV_BUF1_BASE);	
+	}
+	f2k->pingpong[DS0_VIDEO]++;
+	isp_reg_writel(isp,0x30001,ISP_IOMEM_F2K_WRAP,ISP_WRAP_CONFIG_DONE); //fix split screen
+#else
 	isp_reg_writel(isp,addr,ISP_IOMEM_F2K_WRAP,ISP_WRAP_DS0_Y_BUF0_BASE);
 	isp_reg_writel(isp,addr,ISP_IOMEM_F2K_WRAP,ISP_WRAP_DS0_Y_BUF1_BASE);
-	//dev_dbg(f2k->isp->dev,"%s:line_stride (%d),Width(%d),Height(%d)\n",\
-	__func__,ds0_info->ds0_line_stride,ds0_info->ds0_size.Width,ds0_info->ds0_size.Height);
 	addr = addr + ds0_info->ds0_line_stride*ds0_info->ds0_size.Height;//1920*1080;
 	isp_reg_writel(isp,addr,ISP_IOMEM_F2K_WRAP,ISP_WRAP_DS0_UV_BUF0_BASE);
-	isp_reg_writel(isp,addr,ISP_IOMEM_F2K_WRAP,ISP_WRAP_DS0_UV_BUF1_BASE);	
-	isp_reg_writel(isp,0x30001,ISP_IOMEM_F2K_WRAP,ISP_WRAP_CONFIG_DONE); //fix split screen
+	isp_reg_writel(isp,addr,ISP_IOMEM_F2K_WRAP,ISP_WRAP_DS0_UV_BUF1_BASE);
+	isp_reg_writel(isp,0x30001,ISP_IOMEM_F2K_WRAP,ISP_WRAP_CONFIG_DONE);
+#endif
 }
+
 /*
  * isp_f2k_set_out1_outaddr - Set memory address to save output image
  * @f2k: Pointer to ISP f2k device.
@@ -2766,6 +2797,131 @@ static void isp_f2k_remap_print_status(struct isp_f2k_device *f2k)
 /* -----------------------------------------------------------------------------
  * Interrupt handling
  -----------------------------------------------------------------------------*/
+static void video_buffer_next(struct isp_f2k_device *f2k, enum video_type dsNum)
+{
+  struct k510isp_video *video = &f2k->video_out[dsNum];
+	struct k510isp_pipeline *pipe = to_isp_pipeline(&video->video.entity);
+	enum vb2_buffer_state vb_state;
+	struct k510isp_buffer *buf, *next_buf;
+	unsigned long flags;
+	int drop=0;
+	
+	dev_dbg(video->isp->dev,"%s:start\n",__func__);
+	spin_lock_irqsave(&video->irqlock, flags);
+	if (WARN_ON(list_empty(&video->dmaqueue))) {
+		dev_err(video->isp->dev,"%s:WARN_ONlist_empty\n",__func__);
+		spin_unlock_irqrestore(&video->irqlock, flags);
+		return;
+	}
+
+	if (list_is_singular(&video->dmaqueue)) {//only one buffer, for isp, return NULL
+		spin_unlock_irqrestore(&video->irqlock, flags);
+		return;
+	}
+
+	buf = list_first_entry(&video->dmaqueue, struct k510isp_buffer, irqlist);	
+
+	if(dsNum == DS0_VIDEO && f2k->profile.drop_threshold > 0LL && f2k->profile.buf_set_time != 0)
+	{	  
+	  unsigned long long delta;
+	  delta = get_usec() - f2k->profile.buf_set_time;
+	  if(delta > f2k->profile.drop_threshold)
+	  {
+      drop = 1;
+      f2k->profile.drop_cnt++;
+	  }
+	}
+
+	if(drop)
+	{
+	  next_buf = buf;
+	}
+  else
+  {
+    list_del(&buf->irqlist);
+    next_buf = list_first_entry(&video->dmaqueue, struct k510isp_buffer, irqlist);
+  }
+  
+  if(next_buf != NULL)
+  {
+    if(dsNum == MAIN_VIDEO)
+      isp_f2k_set_main_outaddr(f2k, next_buf->dma);
+    else if(dsNum == DS0_VIDEO)
+	    isp_f2k_set_out0_outaddr(f2k, next_buf->dma);
+	  else if(dsNum == DS1_VIDEO)
+	    isp_f2k_set_out1_outaddr(f2k, next_buf->dma);
+	  else if(dsNum == DS2_VIDEO)
+	    isp_f2k_set_out2_outaddr(f2k, next_buf->dma);
+	}
+	
+	spin_unlock_irqrestore(&video->irqlock, flags);
+
+	if(!drop)
+  {
+  	buf->vb.vb2_buf.timestamp = ktime_get_ns();
+
+  	/* Do frame number propagation only if this is the output video node.
+  	 * Frame number either comes from the CSI receivers or it gets
+  	 * incremented here if H3A is not active.
+  	 * Note: There is no guarantee that the output buffer will finish
+  	 * first, so the input number might lag behind by 1 in some cases.
+  	 */
+  	if (video == pipe->output && !pipe->do_propagation)
+  		buf->vb.sequence =
+  			atomic_inc_return(&pipe->frame_number);
+  	else
+  		buf->vb.sequence = atomic_read(&pipe->frame_number);
+
+  	if (pipe->field != V4L2_FIELD_NONE)
+  		buf->vb.sequence /= 2;
+
+  	buf->vb.field = pipe->field;
+
+  	/* Report pipeline errors to userspace on the capture device side. */
+  	if (video->type == V4L2_BUF_TYPE_VIDEO_CAPTURE && pipe->error) {
+  		vb_state = VB2_BUF_STATE_ERROR;
+  		pipe->error = false;
+  	} else {
+  		vb_state = VB2_BUF_STATE_DONE;
+  	}
+
+  	vb2_buffer_done(&buf->vb.vb2_buf, vb_state);
+	}
+
+	spin_lock_irqsave(&video->irqlock, flags);
+
+	if (list_empty(&video->dmaqueue)) {
+		enum k510isp_pipeline_state state;
+
+		spin_unlock_irqrestore(&video->irqlock, flags);
+
+		if (video->type == V4L2_BUF_TYPE_VIDEO_CAPTURE)
+			state = ISP_PIPELINE_QUEUE_OUTPUT
+			      | ISP_PIPELINE_STREAM;
+		else
+			state = ISP_PIPELINE_QUEUE_INPUT
+			      | ISP_PIPELINE_STREAM;
+
+		spin_lock_irqsave(&pipe->lock, flags);
+		pipe->state &= ~state;
+		if (video->pipe.stream_state == ISP_PIPELINE_STREAM_CONTINUOUS)
+			video->dmaqueue_flags |= ISP_VIDEO_DMAQUEUE_UNDERRUN;
+		spin_unlock_irqrestore(&pipe->lock, flags);
+		dev_err(video->isp->dev,"%s:list_empty\n",__func__);
+		return;
+	}
+
+	if (video->type == V4L2_BUF_TYPE_VIDEO_CAPTURE && pipe->input != NULL) {
+		spin_lock(&pipe->lock);
+		pipe->state &= ~ISP_PIPELINE_STREAM;
+		spin_unlock(&pipe->lock);
+	}
+	
+	spin_unlock_irqrestore(&video->irqlock, flags);
+
+	return;
+}
+
 static void f2k_isr_main_buffer(struct isp_f2k_device *f2k)
 {
 	struct k510isp_pipeline *pipe = to_isp_pipeline(&f2k->subdev.entity);
@@ -2784,12 +2940,7 @@ static void f2k_isr_main_buffer(struct isp_f2k_device *f2k)
 		return 1;
 	}
 
-	buffer = k510isp_video_buffer_next(&f2k->video_out[MAIN_VIDEO]);
-	if (buffer != NULL)
-	{
-		//dev_dbg(f2k->isp->dev,"%s:buffer->dma(0x%x)\n",__func__,buffer->dma);
-		isp_f2k_set_main_outaddr(f2k, buffer->dma);
-	}
+	video_buffer_next(f2k, MAIN_VIDEO);	
 
 	pipe->state |= ISP_PIPELINE_IDLE_OUTPUT;
 
@@ -2813,11 +2964,11 @@ static void f2k_isr_out0_buffer(struct isp_f2k_device *f2k)
 		return 1;
 	}
 
-	buffer = k510isp_video_buffer_next(&f2k->video_out[DS0_VIDEO]);
-	if (buffer != NULL)
-		isp_f2k_set_out0_outaddr(f2k, buffer->dma);
+	video_buffer_next(f2k, DS0_VIDEO);
+
+	f2k->profile.buf_set_time = get_usec();
 
-	pipe->state |= ISP_PIPELINE_IDLE_OUTPUT;
+	pipe->state |= ISP_PIPELINE_IDLE_OUTPUT;	
 
 	return buffer != NULL;
 }
@@ -2839,9 +2990,7 @@ static void f2k_isr_out1_buffer(struct isp_f2k_device *f2k)
 		return 1;
 	}
 
-	buffer = k510isp_video_buffer_next(&f2k->video_out[DS1_VIDEO]);
-	if (buffer != NULL)
-		isp_f2k_set_out1_outaddr(f2k, buffer->dma);
+	video_buffer_next(f2k, DS1_VIDEO);	
 
 	pipe->state |= ISP_PIPELINE_IDLE_OUTPUT;
 
@@ -2865,9 +3014,7 @@ static void f2k_isr_out2_buffer(struct isp_f2k_device *f2k)
 		return 1;
 	}
 
-	buffer = k510isp_video_buffer_next(&f2k->video_out[DS2_VIDEO]);
-	if (buffer != NULL)
-		isp_f2k_set_out2_outaddr(f2k, buffer->dma);
+	video_buffer_next(f2k, DS2_VIDEO);	
 
 	pipe->state |= ISP_PIPELINE_IDLE_OUTPUT;
 
@@ -2893,7 +3040,7 @@ int k510isp_f2k_main_isr(struct isp_f2k_device *f2k,u32 events)
 }
 
 int k510isp_f2k_ds0_isr(struct isp_f2k_device *f2k,u32 events)
-{
+{  
 	dev_dbg(f2k->isp->dev,"%s:events(0x%x)start\n",__func__,events);
 	if (f2k->state == ISP_PIPELINE_STREAM_STOPPED)
 		return 0;
@@ -2957,6 +3104,33 @@ static int f2k_video_queue(struct k510isp_video *video, struct k510isp_buffer *b
 	if (f2k->output & ISP_F2K_OUTPUT_MAIN_MEM)
 	{
 		//dev_dbg(video->isp->dev,"%s:buffer->dma(0x%x)\n",__func__,buffer->dma);
+		f2k->pingpong[MAIN_VIDEO] = 0;
+		isp_f2k_set_main_outaddr(f2k, buffer->dma);
+	}
+	if (f2k->output & ISP_F2K_OUTPUT_DS0_MEM)
+	{
+		f2k->pingpong[DS0_VIDEO] = 0;
+		isp_f2k_set_out0_outaddr(f2k, buffer->dma);
+	}
+	if (f2k->output & ISP_F2K_OUTPUT_DS1_MEM)
+	{
+		f2k->pingpong[DS1_VIDEO] = 0;
+		isp_f2k_set_out1_outaddr(f2k, buffer->dma);		
+	}
+	if (f2k->output & ISP_F2K_OUTPUT_DS2_MEM)
+	{
+		f2k->pingpong[DS2_VIDEO] = 0;
+		isp_f2k_set_out2_outaddr(f2k, buffer->dma);
+	}
+	
+#ifdef SET_DIFF_BUFF
+	buffer++;
+	if (f2k->output & ISP_F2K_OUTPUT_FBC)
+	{
+		isp_f2k_set_fbc_outaddr(f2k, buffer->dma);
+	}
+	if (f2k->output & ISP_F2K_OUTPUT_MAIN_MEM)
+	{
 		isp_f2k_set_main_outaddr(f2k, buffer->dma);
 	}
 	if (f2k->output & ISP_F2K_OUTPUT_DS0_MEM)
@@ -2971,7 +3145,7 @@ static int f2k_video_queue(struct k510isp_video *video, struct k510isp_buffer *b
 	{
 		isp_f2k_set_out2_outaddr(f2k, buffer->dma);
 	}
-
+#endif
 
 	/* We now have a buffer queued on the output, restart the pipeline
 	 * on the next f2k interrupt if running in continuous mode (or when
@@ -3155,6 +3329,16 @@ static int f2k_set_stream(struct v4l2_subdev *sd, int enable)
 		//irq_info.ae_en = 1;
 		//irq_info.awb_en = 1;
 		//irq_info.af_en = 1;
+		memset(&f2k->profile,0,sizeof(struct k510_isp_profile));
+		if(isp_cfg->isp_ds_cfg.dsInSizeInfo.Width == 1920 &&
+		  isp_cfg->isp_ds_cfg.dsInSizeInfo.Height == 1080)
+		{
+		  f2k->profile.drop_threshold = 1000000LL/30 + DROP_THRESHOLD_GAP;
+		}
+		else
+		{
+		  f2k->profile.drop_threshold = 0LL;
+		}
 		k510isp_f2k_irq_enable(isp,&irq_info);
 		unsigned int intmask0 = isp_reg_readl(isp,ISP_IOMEM_F2K_WRAP,ISP_WRAP_DMA_WR_INT_MASK0);
 		unsigned int intmask1 = isp_reg_readl(isp,ISP_IOMEM_F2K_WRAP,ISP_WRAP_DMA_WR_INT_MASK1);
@@ -3168,11 +3352,18 @@ static int f2k_set_stream(struct v4l2_subdev *sd, int enable)
 		//if (f2k->input == ISP_F2K_INPUT_VI) {
 		//	f2k_if_enable(f2k, 0);
 		//}
+		f2k->state == ISP_PIPELINE_STREAM_STOPPED;
 		memset(&irq_info,0,sizeof(struct isp_irq_info));
 		mutex_lock(&f2k->ioctl_lock);
 		k510isp_f2k_irq_enable(isp,&irq_info);
 		k510isp_f2k_reset(isp);
 		mutex_unlock(&f2k->ioctl_lock);
+		if(f2k->profile.drop_threshold > 0)
+		{
+		  printk("f2k interrupt: max duration %lld us, big_cnt %d\n", f2k->profile.max_int_duration, f2k->profile.big_dur_cnt);
+		  printk("f2k interrupt: max interval %lld us, big_cnt %d\n", f2k->profile.max_int_interval, f2k->profile.big_inter_cnt);
+		  printk("f2k drop_threshold %lld, drop_cnt %d, dmaErrCnt %d\n", f2k->profile.drop_threshold, f2k->profile.drop_cnt, f2k->profile.dmaErrCnt);
+		}		
 		break;
 	}
 
@@ -3649,6 +3840,7 @@ static int f2k_set_format(struct v4l2_subdev *sd, struct v4l2_subdev_pad_config
 		dev_warn(f2k->isp->dev, "%s:pad error!\n",__func__);
 		return -EINVAL;
 	}
+	
 	if (fmt->pad == ISP_F2K_PAD_SINK) {
 		/* Reset the crop rectangle. */
 		crop = &f2k->crop_in;
diff --git a/drivers/media/platform/canaan-isp/isp_2k/isp_f2k.h b/drivers/media/platform/canaan-isp/isp_2k/isp_f2k.h
index c2ead52e..ffff83fb 100755
--- a/drivers/media/platform/canaan-isp/isp_2k/isp_f2k.h
+++ b/drivers/media/platform/canaan-isp/isp_2k/isp_f2k.h
@@ -89,6 +89,7 @@ struct isp_f2k_device{
 	enum isp_f2k_input_entity input;
 	struct k510isp_video video_in;
 	struct k510isp_video video_out[VIDEO_NUM_MAX];
+	unsigned int pingpong[VIDEO_NUM_MAX];
 	spinlock_t lock;
 	wait_queue_head_t wait;
 	unsigned int nr3d_en;
@@ -103,6 +104,8 @@ struct isp_f2k_device{
 	/* mem resources - enums as defined in enum isp_mem_resources */
 	//u8 regs1;	
 	struct isp_cfg_info isp_cfg; 
+	
+	struct k510_isp_profile profile;
 };
 /* Function declarations */
 int k510isp_f2k_init(struct k510_isp_device *isp);
diff --git a/drivers/media/platform/canaan-isp/isp_2k/isp_r2k.c b/drivers/media/platform/canaan-isp/isp_2k/isp_r2k.c
index b66dd99a..183ba590 100755
--- a/drivers/media/platform/canaan-isp/isp_2k/isp_r2k.c
+++ b/drivers/media/platform/canaan-isp/isp_2k/isp_r2k.c
@@ -25,6 +25,18 @@
 #include "ds/isp_ds_drv.h"
 #include "remap/isp_remap_drv.h"
 #include "table/isp_table_drv.h"
+
+static unsigned long long get_usec(void)
+{
+	struct timeval ts;
+
+	do_gettimeofday(&ts);
+
+	ts.tv_sec &= 0x1ffffLL;
+
+	return ts.tv_sec*1000000 + ts.tv_usec;
+}
+
 /****************************************************************************
 *wrap
 *****************************************************************************/
@@ -407,8 +419,8 @@ void isp_r2k_wrap_SetDmaConfig(struct k510_isp_device *isp)
         stDmaCfg->stDmaChcfg[DmaChIndex].y_uv_noncon_en = 0;
         stDmaCfg->stDmaChcfg[DmaChIndex].y_uv_swap_en = 0;
         stDmaCfg->stDmaChcfg[DmaChIndex].wr_int_line_num = 8;
-        stDmaCfg->stDmaChcfg[DmaChIndex].wr_err_dec_en = 0;
-        stDmaCfg->stDmaChcfg[DmaChIndex].rd_err_dec_en = 0;
+        stDmaCfg->stDmaChcfg[DmaChIndex].wr_err_dec_en = 1;
+        stDmaCfg->stDmaChcfg[DmaChIndex].rd_err_dec_en = 1;
         if((DmaChIndex > 5) && (DmaChIndex < 8))
         {
             stDmaCfg->stDmaChcfg[DmaChIndex].y_uv_noncon_en = 0;
@@ -442,10 +454,10 @@ void isp_r2k_wrap_SetDmaConfig(struct k510_isp_device *isp)
     ISP_WRAP_DMA_ERR_DEC_CFG_S *stErrDecCfg = &pstDmaAttr.stErrDecCfg;
     for(DmaChIndex=0; DmaChIndex < ISP_DMA_CH_NUM; DmaChIndex++)
     {
-        stErrDecCfg->stDmaChErrDecCfg[DmaChIndex].wr_err_dec_unit = 1;
-        stErrDecCfg->stDmaChErrDecCfg[DmaChIndex].rd_err_dec_unit = 1;
-        stErrDecCfg->stDmaChErrDecCfg[DmaChIndex].wr_err_gen_thr = 1;
-        stErrDecCfg->stDmaChErrDecCfg[DmaChIndex].rd_err_gen_thr = 1;
+        stErrDecCfg->stDmaChErrDecCfg[DmaChIndex].wr_err_dec_unit = 255;
+        stErrDecCfg->stDmaChErrDecCfg[DmaChIndex].rd_err_dec_unit = 255;
+        stErrDecCfg->stDmaChErrDecCfg[DmaChIndex].wr_err_gen_thr = 255;
+        stErrDecCfg->stDmaChErrDecCfg[DmaChIndex].rd_err_gen_thr = 255;
     }
 	ISP_WRAP_DMA_ERR_STATUS_S *stErrStatus = &pstDmaAttr.stErrStatus;
     for(DmaChIndex=0; DmaChIndex < ISP_DMA_CH_NUM; DmaChIndex++)
@@ -1432,7 +1444,7 @@ static void isp_r2k_set_main_outaddr(struct isp_r2k_device *r2k, u32 addr)
 	addr = addr + main_info->main_line_stride*main_info->main_size.Height;//1920*1080;
 	isp_reg_writel(isp,addr,ISP_IOMEM_R2K_WRAP,ISP_WRAP_MAIN_UV_BUF0_BASE);
 	isp_reg_writel(isp,addr,ISP_IOMEM_R2K_WRAP,ISP_WRAP_MAIN_UV_BUF1_BASE);	
-	isp_reg_writel(isp,0x30001,ISP_IOMEM_R2K_WRAP,ISP_WRAP_CONFIG_DONE);
+	isp_reg_writel(isp,0x30001,ISP_IOMEM_R2K_WRAP,ISP_WRAP_CONFIG_DONE);	
 }
 
 /*
@@ -1447,14 +1459,30 @@ static void isp_r2k_set_out0_outaddr(struct isp_r2k_device *r2k, u32 addr)
 	struct k510_isp_device *isp = to_isp_device(r2k);
 	struct isp_wrap_cfg_info *isp_wrap_cfg = &r2k->isp_cfg.isp_wrap_cfg;
 	struct isp_wrap_ds0_info *ds0_info = &isp_wrap_cfg->ds0Info;
-	isp_reg_writel(isp,addr,ISP_IOMEM_R2K_WRAP,ISP_WRAP_DS0_Y_BUF0_BASE);
-	isp_reg_writel(isp,addr,ISP_IOMEM_R2K_WRAP,ISP_WRAP_DS0_Y_BUF1_BASE);
-	//dev_dbg(r2k->isp->dev,"%s:line_stride (%d),Width(%d),Height(%d)\n",\
-	__func__,ds0_info->ds0_line_stride,ds0_info->ds0_size.Width,ds0_info->ds0_size.Height);
-	addr = addr + ds0_info->ds0_line_stride*ds0_info->ds0_size.Height;//1920*1080;
-	isp_reg_writel(isp,addr,ISP_IOMEM_R2K_WRAP,ISP_WRAP_DS0_UV_BUF0_BASE);
-	isp_reg_writel(isp,addr,ISP_IOMEM_R2K_WRAP,ISP_WRAP_DS0_UV_BUF1_BASE);	
-	isp_reg_writel(isp,0x30001,ISP_IOMEM_R2K_WRAP,ISP_WRAP_CONFIG_DONE);
+
+#ifdef SET_DIFF_BUFF
+  if((r2k->pingpong[DS0_VIDEO]%2) == 0)
+  {
+    isp_reg_writel(isp,addr,ISP_IOMEM_R2K_WRAP,ISP_WRAP_DS0_Y_BUF0_BASE);
+    addr = addr + ds0_info->ds0_line_stride*ds0_info->ds0_size.Height;//1920*1080;
+    isp_reg_writel(isp,addr,ISP_IOMEM_R2K_WRAP,ISP_WRAP_DS0_UV_BUF0_BASE);
+  }
+  else if((r2k->pingpong[DS0_VIDEO]%2) == 1)
+  {
+    isp_reg_writel(isp,addr,ISP_IOMEM_R2K_WRAP,ISP_WRAP_DS0_Y_BUF1_BASE);
+    addr = addr + ds0_info->ds0_line_stride*ds0_info->ds0_size.Height;//1920*1080;
+    isp_reg_writel(isp,addr,ISP_IOMEM_R2K_WRAP,ISP_WRAP_DS0_UV_BUF1_BASE);
+  }
+  r2k->pingpong[DS0_VIDEO]++;
+  isp_reg_writel(isp,0x30001,ISP_IOMEM_R2K_WRAP,ISP_WRAP_CONFIG_DONE);
+#else
+  isp_reg_writel(isp,addr,ISP_IOMEM_R2K_WRAP,ISP_WRAP_DS0_Y_BUF0_BASE);
+  isp_reg_writel(isp,addr,ISP_IOMEM_R2K_WRAP,ISP_WRAP_DS0_Y_BUF1_BASE);
+  addr = addr + ds0_info->ds0_line_stride*ds0_info->ds0_size.Height;//1920*1080;
+  isp_reg_writel(isp,addr,ISP_IOMEM_R2K_WRAP,ISP_WRAP_DS0_UV_BUF0_BASE);
+  isp_reg_writel(isp,addr,ISP_IOMEM_R2K_WRAP,ISP_WRAP_DS0_UV_BUF1_BASE);
+  isp_reg_writel(isp,0x30001,ISP_IOMEM_R2K_WRAP,ISP_WRAP_CONFIG_DONE);
+#endif
 }
 /*
  * isp_r2k_set_out1_outaddr - Set memory address to save output image
@@ -2387,6 +2415,131 @@ static void isp_r2k_remap_print_status(struct isp_r2k_device *r2k)
 /* -----------------------------------------------------------------------------
  * Interrupt handling
  -----------------------------------------------------------------------------*/
+static void video_buffer_next(struct isp_r2k_device *r2k, enum video_type dsNum)
+{
+  struct k510isp_video *video = &r2k->video_out[dsNum];
+	struct k510isp_pipeline *pipe = to_isp_pipeline(&video->video.entity);
+	enum vb2_buffer_state vb_state;
+	struct k510isp_buffer *buf, *next_buf;
+	unsigned long flags;
+	int drop = 0;
+	
+	dev_dbg(video->isp->dev,"%s:start\n",__func__);
+	spin_lock_irqsave(&video->irqlock, flags);
+	if (WARN_ON(list_empty(&video->dmaqueue))) {
+		dev_err(video->isp->dev,"%s:WARN_ONlist_empty\n",__func__);
+		spin_unlock_irqrestore(&video->irqlock, flags);
+		return;
+	}
+
+	if (list_is_singular(&video->dmaqueue)) {//only one buffer, for isp, return NULL
+		spin_unlock_irqrestore(&video->irqlock, flags);
+		return;
+	}
+
+	buf = list_first_entry(&video->dmaqueue, struct k510isp_buffer, irqlist);
+	
+	if(dsNum == DS0_VIDEO && r2k->profile.drop_threshold > 0LL && r2k->profile.buf_set_time != 0)
+	{	  
+	  unsigned long long delta;
+	  delta = get_usec() - r2k->profile.buf_set_time;
+	  if(delta > r2k->profile.drop_threshold)
+	  {
+      drop = 1;
+      r2k->profile.drop_cnt++;
+	  }
+	}
+
+	if(drop)
+	{
+	  next_buf = buf;
+	}
+  else
+  {
+    list_del(&buf->irqlist);
+    next_buf = list_first_entry(&video->dmaqueue, struct k510isp_buffer, irqlist);
+  }
+  
+  if(next_buf != NULL)
+  {
+    if(dsNum == MAIN_VIDEO)
+      isp_r2k_set_main_outaddr(r2k, next_buf->dma);
+    else if(dsNum == DS0_VIDEO)
+	    isp_r2k_set_out0_outaddr(r2k, next_buf->dma);
+	  else if(dsNum == DS1_VIDEO)
+	    isp_r2k_set_out1_outaddr(r2k, next_buf->dma);
+	  else if(dsNum == DS2_VIDEO)
+	    isp_r2k_set_out2_outaddr(r2k, next_buf->dma);
+	}
+	
+	spin_unlock_irqrestore(&video->irqlock, flags);
+
+  if(!drop)
+  {
+  	buf->vb.vb2_buf.timestamp = ktime_get_ns();
+
+  	/* Do frame number propagation only if this is the output video node.
+  	 * Frame number either comes from the CSI receivers or it gets
+  	 * incremented here if H3A is not active.
+  	 * Note: There is no guarantee that the output buffer will finish
+  	 * first, so the input number might lag behind by 1 in some cases.
+  	 */
+  	if (video == pipe->output && !pipe->do_propagation)
+  		buf->vb.sequence =
+  			atomic_inc_return(&pipe->frame_number);
+  	else
+  		buf->vb.sequence = atomic_read(&pipe->frame_number);
+
+  	if (pipe->field != V4L2_FIELD_NONE)
+  		buf->vb.sequence /= 2;
+
+  	buf->vb.field = pipe->field;
+
+  	/* Report pipeline errors to userspace on the capture device side. */
+  	if (video->type == V4L2_BUF_TYPE_VIDEO_CAPTURE && pipe->error) {
+  		vb_state = VB2_BUF_STATE_ERROR;
+  		pipe->error = false;
+  	} else {
+  		vb_state = VB2_BUF_STATE_DONE;
+  	}
+
+  	vb2_buffer_done(&buf->vb.vb2_buf, vb_state);
+	}
+
+	spin_lock_irqsave(&video->irqlock, flags);
+
+	if (list_empty(&video->dmaqueue)) {
+		enum k510isp_pipeline_state state;
+
+		spin_unlock_irqrestore(&video->irqlock, flags);
+
+		if (video->type == V4L2_BUF_TYPE_VIDEO_CAPTURE)
+			state = ISP_PIPELINE_QUEUE_OUTPUT
+			      | ISP_PIPELINE_STREAM;
+		else
+			state = ISP_PIPELINE_QUEUE_INPUT
+			      | ISP_PIPELINE_STREAM;
+
+		spin_lock_irqsave(&pipe->lock, flags);
+		pipe->state &= ~state;
+		if (video->pipe.stream_state == ISP_PIPELINE_STREAM_CONTINUOUS)
+			video->dmaqueue_flags |= ISP_VIDEO_DMAQUEUE_UNDERRUN;
+		spin_unlock_irqrestore(&pipe->lock, flags);
+		dev_err(video->isp->dev,"%s:list_empty\n",__func__);
+		return;
+	}
+
+	if (video->type == V4L2_BUF_TYPE_VIDEO_CAPTURE && pipe->input != NULL) {
+		spin_lock(&pipe->lock);
+		pipe->state &= ~ISP_PIPELINE_STREAM;
+		spin_unlock(&pipe->lock);
+	}
+	
+	spin_unlock_irqrestore(&video->irqlock, flags);
+
+	return;
+}
+
 static void r2k_isr_main_buffer(struct isp_r2k_device *r2k)
 {
 	struct k510isp_pipeline *pipe = to_isp_pipeline(&r2k->subdev.entity);
@@ -2401,9 +2554,7 @@ static void r2k_isr_main_buffer(struct isp_r2k_device *r2k)
 		return 1;
 	}
 
-	buffer = k510isp_video_buffer_next(&r2k->video_out[MAIN_VIDEO]);
-	if (buffer != NULL)
-		isp_r2k_set_main_outaddr(r2k, buffer->dma);
+	video_buffer_next(r2k, MAIN_VIDEO);	
 
 	pipe->state |= ISP_PIPELINE_IDLE_OUTPUT;
 
@@ -2424,9 +2575,9 @@ static void r2k_isr_out0_buffer(struct isp_r2k_device *r2k)
 		return 1;
 	}
 
-	buffer = k510isp_video_buffer_next(&r2k->video_out[DS0_VIDEO]);
-	if (buffer != NULL)
-		isp_r2k_set_out0_outaddr(r2k, buffer->dma);
+	video_buffer_next(r2k, DS0_VIDEO);
+
+	r2k->profile.buf_set_time = r2k->profile.buf_set_time;
 
 	pipe->state |= ISP_PIPELINE_IDLE_OUTPUT;
 
@@ -2446,9 +2597,7 @@ static void r2k_isr_out1_buffer(struct isp_r2k_device *r2k)
 		return 1;
 	}
 
-	buffer = k510isp_video_buffer_next(&r2k->video_out[DS1_VIDEO]);
-	if (buffer != NULL)
-		isp_r2k_set_out1_outaddr(r2k, buffer->dma);
+	video_buffer_next(r2k, DS1_VIDEO);	
 
 	pipe->state |= ISP_PIPELINE_IDLE_OUTPUT;
 
@@ -2469,9 +2618,7 @@ static void r2k_isr_out2_buffer(struct isp_r2k_device *r2k)
 		return 1;
 	}
 
-	buffer = k510isp_video_buffer_next(&r2k->video_out[DS2_VIDEO]);
-	if (buffer != NULL)
-		isp_r2k_set_out2_outaddr(r2k, buffer->dma);
+	video_buffer_next(r2k, DS2_VIDEO);	
 
 	pipe->state |= ISP_PIPELINE_IDLE_OUTPUT;
 
@@ -2555,21 +2702,54 @@ static int r2k_video_queue(struct k510isp_video *video, struct k510isp_buffer *b
 	if (r2k->output & ISP_R2K_OUTPUT_MAIN_MEM)
 	{
 		dev_dbg(video->isp->dev,"%s:buffer->dma(0x%x)\n",__func__,buffer->dma);
+		r2k->pingpong[MAIN_VIDEO] = 0;
 		isp_r2k_set_main_outaddr(r2k, buffer->dma);
 	}
 	if (r2k->output & ISP_R2K_OUTPUT_DS0_MEM)
 	{
+		r2k->pingpong[DS0_VIDEO] = 0;
 		isp_r2k_set_out0_outaddr(r2k, buffer->dma);
 	}
 	if (r2k->output & ISP_R2K_OUTPUT_DS1_MEM)
 	{
+		r2k->pingpong[DS1_VIDEO] = 0;
 		isp_r2k_set_out1_outaddr(r2k, buffer->dma);
 	}
 	if (r2k->output & ISP_R2K_OUTPUT_DS2_MEM)
 	{
+		r2k->pingpong[DS2_VIDEO] = 0;
 		isp_r2k_set_out2_outaddr(r2k, buffer->dma);
 	}
+
+#ifdef SET_DIFF_BUFF
+	buffer++;
+	if (r2k->output & ISP_R2K_OUTPUT_FBC)
+	{
+		isp_r2k_set_fbc_outaddr(r2k, buffer->dma);
+	}
+	if (r2k->output & ISP_R2K_OUTPUT_MAIN_MEM)
+	{
+		dev_dbg(video->isp->dev,"%s:buffer->dma(0x%x)\n",__func__,buffer->dma);		
+		r2k->pingpong[MAIN_VIDEO] = 0;
+		isp_r2k_set_main_outaddr(r2k, buffer->dma);		
+	}
 
+	if (r2k->output & ISP_R2K_OUTPUT_DS0_MEM)
+	{
+		r2k->pingpong[DS0_VIDEO] = 0;
+		isp_r2k_set_out0_outaddr(r2k, buffer->dma);		
+	}
+	if (r2k->output & ISP_R2K_OUTPUT_DS1_MEM)
+	{
+		r2k->pingpong[DS1_VIDEO] = 0;
+		isp_r2k_set_out1_outaddr(r2k, buffer->dma);		
+	}
+	if (r2k->output & ISP_R2K_OUTPUT_DS2_MEM)
+	{
+		r2k->pingpong[DS2_VIDEO] = 0;
+		isp_r2k_set_out2_outaddr(r2k, buffer->dma);		
+	}
+#endif
 	/* We now have a buffer queued on the output, restart the pipeline
 	 * on the next r2k interrupt if running in continuous mode (or when
 	 * starting the stream) in external sync mode, or immediately in BT.656
@@ -2749,6 +2929,16 @@ static int r2k_set_stream(struct v4l2_subdev *sd, int enable)
 		//irq_info.ae_en = 1;
 		//irq_info.awb_en = 1;
 		//irq_info.af_en = 1;
+		memset(&r2k->profile,0,sizeof(struct k510_isp_profile));
+		if(isp_cfg->isp_ds_cfg.dsInSizeInfo.Width == 1920 &&
+		  isp_cfg->isp_ds_cfg.dsInSizeInfo.Height == 1080)
+		{
+		  r2k->profile.drop_threshold = 1000000LL/30 + DROP_THRESHOLD_GAP;
+		}
+		else
+		{
+		  r2k->profile.drop_threshold = 0LL;
+		}
 		mutex_lock(&r2k->ioctl_lock);
 		k510isp_r2k_irq_enable(isp,&irq_info);
 		mutex_unlock(&r2k->ioctl_lock);
@@ -2764,11 +2954,18 @@ static int r2k_set_stream(struct v4l2_subdev *sd, int enable)
 		//if (r2k->input == ISP_R2K_INPUT_VI) {
 		//	r2k_if_enable(r2k, 0);
 		//}
+		r2k->state == ISP_PIPELINE_STREAM_STOPPED;
 		memset(&irq_info,0,sizeof(struct isp_irq_info));
 		mutex_lock(&r2k->ioctl_lock);
 		k510isp_r2k_irq_enable(isp,&irq_info);
 		k510isp_r2k_reset(isp);
 		mutex_unlock(&r2k->ioctl_lock);
+		if(r2k->profile.drop_threshold > 0)
+		{
+		  printk("r2k interrupt: max duration %lld us, big_cnt %d\n", r2k->profile.max_int_duration, r2k->profile.big_dur_cnt);
+		  printk("r2k interrupt: max interval %lld us, big_cnt %d\n", r2k->profile.max_int_interval, r2k->profile.big_inter_cnt);
+		  printk("r2k drop_threshold %lld, drop_cnt %d, dmaErrCnt %d\n", r2k->profile.drop_threshold, r2k->profile.drop_cnt, r2k->profile.dmaErrCnt);
+		}
 		break;
 	}
 
@@ -3748,4 +3945,4 @@ void k510isp_r2k_cleanup(struct k510_isp_device *isp)
 	media_entity_cleanup(&r2k->subdev.entity);
 
 	mutex_destroy(&r2k->ioctl_lock);			  	
-}
\ No newline at end of file
+}
diff --git a/drivers/media/platform/canaan-isp/isp_2k/isp_r2k.h b/drivers/media/platform/canaan-isp/isp_2k/isp_r2k.h
index d50e35f7..78bdd132 100755
--- a/drivers/media/platform/canaan-isp/isp_2k/isp_r2k.h
+++ b/drivers/media/platform/canaan-isp/isp_2k/isp_r2k.h
@@ -58,6 +58,7 @@ struct isp_r2k_device{
 	unsigned int output;
 	struct k510isp_video video_in;
 	struct k510isp_video video_out[VIDEO_NUM_MAX];
+	unsigned int pingpong[VIDEO_NUM_MAX];
 
 	unsigned int underrun:1;
 	enum k510isp_pipeline_stream_state state;
@@ -69,6 +70,8 @@ struct isp_r2k_device{
 	unsigned int fields;
 
 	struct isp_cfg_info isp_cfg;
+
+	struct k510_isp_profile profile;
 };
 
 
diff --git a/drivers/media/platform/canaan-isp/k510_isp.c b/drivers/media/platform/canaan-isp/k510_isp.c
index ef5e133b..80b54802 100755
--- a/drivers/media/platform/canaan-isp/k510_isp.c
+++ b/drivers/media/platform/canaan-isp/k510_isp.c
@@ -41,6 +41,9 @@
 #include "isp_2k/table/isp_table_drv.h"
 #include "isp_2k/isp_3a/isp_3a.h"
 
+#define INT_BIG_INTERVAL 33333LL
+#define INT_BIG_DURATION 200LL
+
 static int v4l2_init_flag = 0;
 extern const struct dma_map_ops swiotlb_noncoh_dma_ops;
 static void k510isp_save_ctx(struct k510_isp_device *isp);
@@ -87,6 +90,20 @@ static void k510isp_addr_init(struct k510_isp_device *isp)
 	isp->mmio_base[ISP_IOMEM_R2K_OUT0_REMAP] = isp->isp_regs + ISP_R2K_OUT0_REMAP_BASE;
     isp->mmio_base[ISP_IOMEM_R2K_OUT1_REMAP] = isp->isp_regs + ISP_R2K_OUT1_REMAP_BASE;	
 }
+
+#if (PROFILE_FRAME_RATE | PROFILE_INTERRUPT)
+static unsigned long long get_usec(void)
+{
+	struct timeval ts;
+
+	do_gettimeofday(&ts);
+
+	ts.tv_sec &= 0x1ffffLL;
+
+	return ts.tv_sec*1000000 + ts.tv_usec;
+}
+#endif
+
 /* -----------------------------------------------------------------------------
  * Interrupts
  */
@@ -659,6 +676,74 @@ void k510isp_put(struct k510_isp_device *isp)
 	dev_dbg(isp->dev,"%s:start\n",__func__);
 	__k510isp_put(isp, true);
 }
+
+static void profile_int_interval(struct k510_isp_profile *profile)
+{
+#ifdef PROFILE_INTERRUPT	
+  profile->int_time = get_usec();
+  if(profile->prev_int_time != 0)
+  {
+    unsigned long long time;
+    time = profile->int_time - profile->prev_int_time;
+    if(time > profile->max_int_interval)
+    {
+      profile->max_int_interval = time;
+    }
+    if(time > INT_BIG_INTERVAL)
+    {
+      profile->big_inter_cnt++;
+    }
+    profile->cur_int_interval = time;
+  }
+  profile->prev_int_time = profile->int_time;
+  
+  profile->pic_cnt++;
+#endif
+
+}
+
+static void profile_int_duration(struct k510_isp_profile *profile)
+{
+#ifdef PROFILE_INTERRUPT	
+  if(profile->int_time != 0)
+  {
+    unsigned long long time;
+  
+    time = get_usec() - profile->int_time;
+    if(time > profile->max_int_duration)
+    {
+      profile->max_int_duration = time;
+    }
+    if(time > INT_BIG_DURATION)
+    {
+      profile->big_dur_cnt++;
+    }
+    profile->cur_int_duration = time;
+  }
+#endif
+}
+
+static void profile_int_framerate(struct k510_isp_profile *profile)
+{
+#ifdef PROFILE_FRAME_RATE
+  if(profile->pic_cnt == 1)
+  {
+    profile->start_time = get_usec();
+  }
+      
+  if(profile->pic_cnt % 150 == 0)
+  {
+    unsigned long long tmp1, tmp2, tmp3;
+  
+    tmp1 = profile->pic_cnt*1000;
+    tmp2 = (get_usec()-profile->start_time)/1000;
+    tmp3 = tmp1/tmp2;
+    printk("isp profile %d pictures. Average FrameRate = %lld Fps\n", profile->pic_cnt, tmp3);
+  }
+#endif	
+
+}
+
 /*
  * k510isp_f2k_isr - Interrupt Service Routine for Camera ISP module.
  * @irq: Not used currently.
@@ -691,32 +776,50 @@ static irqreturn_t k510isp_f2k_isr(int irq, void *_isp)
 
 	if(f2k_irqstatus1 & IRQW1_STS_OUT0_Y_FRAME_ERR_IRQ)
 	{
-	    return IRQ_HANDLED;
+	  isp->isp_f2k.profile.dmaErrCnt++;
+	  return IRQ_HANDLED;
 	}
 	else if(f2k_irqstatus1 & IRQW1_STS_OUT0_Y_IMM_ERR_IRQ)
 	{
-	    return IRQ_HANDLED;
+	  isp->isp_f2k.profile.dmaErrCnt++;
+	  return IRQ_HANDLED;
 	}
 	else if(f2k_irqstatus1 & IRQW1_STS_OUT0_UV_FRAME_ERR_IRQ)
 	{
-	    return IRQ_HANDLED;
+	  isp->isp_f2k.profile.dmaErrCnt++;
+	  return IRQ_HANDLED;
 	}
 	else if(f2k_irqstatus1 & IRQW1_STS_OUT0_UV_IMM_ERR_IRQ)
 	{
-	    return IRQ_HANDLED;
+	  isp->isp_f2k.profile.dmaErrCnt++;
+	  return IRQ_HANDLED;
 	}
+
+  if(f2k_irqstatus1 & ds0_events)
+  {
+    profile_int_interval(&isp->isp_f2k.profile);
+  }
+
 	if(f2k_core_irqstatus & CORE_STS_3A_OUT_IRQ)
 	{
 		k510isp_stat_isr(&isp->isp_f2k_ae);
 		k510isp_stat_isr(&isp->isp_f2k_awb);
 	//	k510isp_stat_isr(&isp->isp_f2k_af);
 	}	
-
+	
 	if(f2k_irqstatus0 & events)
+	{
 		k510isp_f2k_main_isr(&isp->isp_f2k, f2k_irqstatus0 & events);
-
+	}
+	
 	if(f2k_irqstatus1 & ds0_events)
-		k510isp_f2k_ds0_isr(&isp->isp_f2k, f2k_irqstatus1 & ds0_events);
+	{
+  	profile_int_framerate(&isp->isp_f2k.profile);
+
+		k510isp_f2k_ds0_isr(&isp->isp_f2k, ds0_events);
+
+    profile_int_duration(&isp->isp_f2k.profile);		
+	}
 
 	if(f2k_irqstatus1 & ds1_events)
 		k510isp_f2k_ds1_isr(&isp->isp_f2k, f2k_irqstatus1 & ds1_events);
@@ -754,6 +857,32 @@ static irqreturn_t k510isp_r2k_isr(int irq, void *_isp)
 	r2k_irqstatus1 = isp_reg_readl(isp, ISP_IOMEM_R2K_WRAP, ISP_WRAP_DMA_WR_INT_STATUS1);
 	isp_reg_writel(isp, r2k_irqstatus1, ISP_IOMEM_R2K_WRAP, ISP_WRAP_DMA_WR_INT_STATUS1);
 
+	if(r2k_irqstatus1 & IRQW1_STS_OUT0_Y_FRAME_ERR_IRQ)
+	{
+	  isp->isp_r2k.profile.dmaErrCnt++;
+	  return IRQ_HANDLED;
+	}
+	else if(r2k_irqstatus1 & IRQW1_STS_OUT0_Y_IMM_ERR_IRQ)
+	{
+	  isp->isp_r2k.profile.dmaErrCnt++;
+	  return IRQ_HANDLED;
+	}
+	else if(r2k_irqstatus1 & IRQW1_STS_OUT0_UV_FRAME_ERR_IRQ)
+	{
+	  isp->isp_r2k.profile.dmaErrCnt++;
+	  return IRQ_HANDLED;
+	}
+	else if(r2k_irqstatus1 & IRQW1_STS_OUT0_UV_IMM_ERR_IRQ)
+	{
+	  isp->isp_r2k.profile.dmaErrCnt++;
+	  return IRQ_HANDLED;
+	}
+
+  if(r2k_irqstatus1 & ds0_events)
+  {
+    profile_int_interval(&isp->isp_r2k.profile);
+  }
+
 	if(r2k_core_irqstatus & CORE_STS_3A_OUT_IRQ)
 	{
 		k510isp_stat_isr(&isp->isp_r2k_ae);
@@ -763,9 +892,15 @@ static irqreturn_t k510isp_r2k_isr(int irq, void *_isp)
 
 	if(r2k_irqstatus0 & events)
 		k510isp_r2k_main_isr(&isp->isp_r2k, r2k_irqstatus0 & events);
-
+	
 	if(r2k_irqstatus1 & ds0_events)
-		k510isp_r2k_ds0_isr(&isp->isp_r2k, r2k_irqstatus1 & ds0_events);
+	{
+    profile_int_framerate(&isp->isp_r2k.profile);
+
+		k510isp_r2k_ds0_isr(&isp->isp_r2k, ds0_events);
+
+    profile_int_duration(&isp->isp_r2k.profile);	
+	}
 
 	if(r2k_irqstatus1 & ds1_events)
 		k510isp_r2k_ds1_isr(&isp->isp_r2k, r2k_irqstatus1 & ds1_events);
@@ -1589,6 +1724,7 @@ static int k510isp_register_entities(struct k510_isp_device *isp)
 			__func__, ret);
 		goto done;
 	}
+
 
 	dev_dbg(isp->dev,"%s: k510isp_f2k_register_entities\n",__func__);	
 	ret = k510isp_f2k_register_entities(&isp->isp_f2k,&isp->v4l2_dev);
diff --git a/drivers/media/platform/canaan-isp/k510_isp.h b/drivers/media/platform/canaan-isp/k510_isp.h
index 6a0faba0..317cbe3b 100755
--- a/drivers/media/platform/canaan-isp/k510_isp.h
+++ b/drivers/media/platform/canaan-isp/k510_isp.h
@@ -28,6 +28,7 @@
 #include "isp_mipi/csi2/mipi_csi2.h"
 #include "vi/vi_com.h"
 #include "k510isp_stat.h"
+#include "k510isp_com.h"
 
 #define K510ISP_VIDEO_DRIVER_NAME		"k510isp-video"
 #define K510ISP_VIDEO_DRIVER_VERSION	    "0.0.1"
diff --git a/drivers/media/platform/canaan-isp/k510isp_com.h b/drivers/media/platform/canaan-isp/k510isp_com.h
index 6ecec4c6..19fc5f0e 100755
--- a/drivers/media/platform/canaan-isp/k510isp_com.h
+++ b/drivers/media/platform/canaan-isp/k510isp_com.h
@@ -31,6 +31,11 @@
 #define ENABLE      1
 #endif
 
+#define DROP_THRESHOLD_GAP  2000LL
+#define PROFILE_INTERRUPT	1
+//#define PROFILE_FRAME_RATE  1
+//#define SET_DIFF_BUFF	1
+
 typedef struct _IMAGE_SIZE{
 	unsigned int Width;
 	unsigned int Height;	
@@ -461,4 +466,21 @@ struct vi_irq_info
 #define NULL    ((void *)0)
 #endif
 
+struct k510_isp_profile {
+  int dmaErrCnt;
+	unsigned int pic_cnt;
+	unsigned long long start_time;
+	unsigned long long int_time;
+	unsigned long long prev_int_time;
+	unsigned long long max_int_duration;
+	unsigned long long max_int_interval;
+	unsigned long long cur_int_duration;
+	unsigned long long cur_int_interval;
+	int big_dur_cnt;
+	int big_inter_cnt;
+	unsigned long long buf_set_time;
+	unsigned long long drop_threshold;
+	int drop_cnt;
+};
+
 #endif /*_K510ISP_COM_H*/
\ No newline at end of file
-- 
2.36.1

