name: Build CRB

on:
  pull_request:
    branches:
      - main
      - dev

env:
  PULL_REQUEST_ID: ${{ github.event.number }}
  CI_ROOT: /data/k510/github-actions
  TFTP_ROOT: /data/tftp_server
  NFS_ROOT: /data/nfs_server

defaults:
  run:
    shell: bash

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build_image:
    name: Build
    runs-on: [self-hosted, k510_buildroot]
    timeout-minutes: 45
    container:
      image: ai.b-bug.org:5000/k510_sdk_github
      env:
        CONF: k510_${{ matrix.cfg }}_defconfig
        ENV: pull-request
      volumes:
        - /data:/data
      options: --hostname pull-request
    strategy:
      matrix:
        cfg: ["crb_lp3_v1_2"]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          clean: false

      - name: Install toolchain
        id: install_toolchain
        run: |
          test -f toolchain/nds64le-linux-glibc-v5d.txz || wget -c https://ai.b-bug.org/k510_buildroot/toolchain/nds64le-linux-glibc-v5d.txz -O toolchain/nds64le-linux-glibc-v5d.txz
          test -f toolchain/nds64le-elf-mculib-v5d.txz || wget -c https://ai.b-bug.org/k510_buildroot/toolchain/nds64le-elf-mculib-v5d.txz -O toolchain/nds64le-elf-mculib-v5d.txz          

      - name: Download cache package
        id: download_cache
        run: |
          test -f pkg-download/dl.tar.gz && rm pkg-download/dl.tar.gz
          wget -qc https://ai.b-bug.org/k510_buildroot/pkg-download/dl.tar.gz -O pkg-download/dl.tar.gz
          echo "dl.tar.gz file md5 check"
          md5sum pkg-download/dl.tar.gz
          test -d dl_bak && rm -rf dl_bak
          test -d dl && mv dl dl_bak
          tar -xf pkg-download/dl.tar.gz
          test -d dl/ai/ || mkdir -p dl/ai/
          wget -qc https://ai.b-bug.org/k510_buildroot/pkg-download/ai_kmodel_data.tar.xz -O dl/ai/ai_kmodel_data.tar.xz
          echo "ai_kmodel_data.tar.xz file md5 check"
          md5sum dl/ai/ai_kmodel_data.tar.xz
          test -d dl/riscv-pk-k510 && (test -d dl/riscv-pk-k510 || mv dl_bak/riscv-pk-k510 dl/)
          test -d dl_bak && rm -rf dl_bak
      
      - name: Build image
        id: build_image
        run: |
          sed -i "s/BR2_JLEVEL=5/BR2_JLEVEL=14/g" configs/$CONF
          rm -rf $CONF
          rm -rf buildroot-*
          make CONF=$CONF

      - name: Save image to CI cache
        id: save_cache
        run: |
          export HW=`echo ${{ matrix.cfg }}|awk -F '_' '{print $1"_"$3"_"$4}'`
          echo $HW
          VER=$(cat $CONF/target/etc/version/release_version | grep ".*CST-github-pull-request" | sed 's/\(.*\)CST-github-pull-request/\1/g') || exit 1
          echo $VER
          mkdir -p $CI_ROOT/$VER/$HW/
          cp -r $CONF/images/* $CI_ROOT/$VER/$HW/
          cp -r $CONF/target/etc/version/release_version $CI_ROOT/$VER/$HW/

      - name: Save image to TFTP
        id: save_tftp
        run: |
          export FILE_SUFFIX=`echo ${{ matrix.cfg }}|awk -F '_' '{print $1"-"$3"_"$4}'`-$PULL_REQUEST_ID-$GITHUB_RUN_ID
          echo $FILE_SUFFIX
          cp $CONF/images/bootm-bbl.img $TFTP_ROOT/bootm-bbl-$FILE_SUFFIX.img
          cp $CONF/images/k510.dtb $TFTP_ROOT/k510-$FILE_SUFFIX.dtb
      
      - name: Save image to NFS
        id: save_nfs
        run: |
          export HW=`echo ${{ matrix.cfg }}|awk -F '_' '{print $1"_"$3"_"$4}'`
          export SAVE_DIR=$PULL_REQUEST_ID"_"$GITHUB_RUN_ID
          echo $HW
          echo $SAVE_DIR
          mkdir -p $NFS_ROOT/k510_buildroot/$HW/$SAVE_DIR/
          tar -xf $CONF/images/rootfs.tar -C $NFS_ROOT/k510_buildroot/$HW/$PULL_REQUEST_ID"_"$GITHUB_RUN_ID

  load_image:
    name: Load
    needs: build_image
    timeout-minutes: 5
    runs-on: [self-hosted, k510_buildroot]
    outputs:
      device: ${{ steps.get_dut.outputs.device }}
    container:
      image: ai.b-bug.org:5000/k510_sdk_github
      volumes:
        - /data:/data
    strategy:
      matrix:
        cfg: ["crb_lp3_v1_2"]
    steps:
      - name: Get DUT
        id: get_dut
        run: |
          echo "get available DUT"
          export HW_MODEL=`echo ${{ matrix.cfg }}|awk -F '_' '{print $1}'`
          export HW_VER=`echo ${{ matrix.cfg }}|awk -F '_' '{print $3"."$4}'`
          test -d bin || mkdir ./bin
          test -f ./bin/dut && rm -rf ./bin/dut
          wget -qc https://ai.b-bug.org/k510_buildroot/github/dut -O ./bin/dut
          chmod +x ./bin/dut
          device=$(./bin/dut show --dest available --hw_type k510 --hw_model $HW_MODEL --hw_ver $HW_VER )
          echo "::set-output name=device::$device"

      - name: Reserve DUT
        id: reserve_dut
        run: |
          echo "reserve DUT"
          echo ${{ needs.get_dut.outputs.device }}
          test -d bin || mkdir ./bin
          test -f ./bin/dut && rm -rf ./bin/dut
          wget -qc https://ai.b-bug.org/k510_buildroot/github/dut -O ./bin/dut
          chmod +x ./bin/dut
          echo "convert DUT args to running device args"
          available=$(./bin/dut convert ${{ needs.get_dut.outputs.device }} )
          echo $available
          device=$(./bin/dut add $available --site github-actions --source $PULL_REQUEST_ID --job $GITHUB_RUN_ID )

      - name: Load image
        id: load_image
        run: |
          echo "Load image"
          echo ${{ needs.get_dut.outputs.device }}
          test -d bin || mkdir ./bin
          test -f ./bin/ci2 && rm -rf ./bin/ci2
          wget -qc https://ai.b-bug.org/k510_buildroot/github/ci2 -O ./bin/ci2
          chmod +x ./bin/ci2
          export HW_MODEL=`echo ${{ matrix.cfg }}|awk -F '_' '{print $1}'`
          export HW_VER=`echo ${{ matrix.cfg }}|awk -F '_' '{print $3"_"$4}'`
          echo $HW_MODEL
          echo $HW_VER
          echo $PULL_REQUEST_ID
          echo $GITHUB_RUN_ID
          ./bin/ci2 --project k510_buildroot --merge_id $PULL_REQUEST_ID --pipeline_id $GITHUB_RUN_ID --device ${{needs.get_dut.outputs.device}}

      - name: Run Test
        id: run_test
        run: |
          echo "Run Test"
          echo ${{ needs.get_dut.outputs.device }}
          test -d bin || mkdir ./bin
          test -f ./bin/dut && rm -rf ./bin/dut
          echo "Run test case later"

      - name: Release DUT
        id: release_dut
        if: ${{ always() }}
        run: |
          echo "release DUT"
          echo ${{ needs.get_dut.outputs.device }}
          test -d bin || mkdir ./bin
          test -f ./bin/dut && rm -rf ./bin/dut
          wget -qc https://ai.b-bug.org/k510_buildroot/github/dut -O ./bin/dut
          chmod +x ./bin/dut
          device=$(./bin/dut delete ${{ needs.get_dut.outputs.device }})
